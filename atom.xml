<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>David Koloski</title>
    <subtitle>Software Engineer, Game Designer, Web Developer</subtitle>
    <link rel="self" type="application/atom+xml" href="https://david.kolo.ski/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://david.kolo.ski"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-08-30T00:00:00+00:00</updated>
    <id>https://david.kolo.ski/atom.xml</id>
    <entry xml:lang="en">
        <title>How to sort your library in exactly 51,271 steps</title>
        <published>2024-08-30T00:00:00+00:00</published>
        <updated>2024-08-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/sort-library-steps-mtg/"/>
        <id>https://david.kolo.ski/blog/sort-library-steps-mtg/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/sort-library-steps-mtg/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=uhZnHJBH4Ag&quot;&gt;Today&#x27;s daily ruling&lt;&#x2F;a&gt; on &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@JudgingFtW&quot;&gt;Judging FtW&lt;&#x2F;a&gt; proposed an interesting question that lies at the intersection of mathematics, computer science, and tournament play policy. Take a look at these two cards:&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div&gt;
&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;david.kolo.ski&amp;#x2F;processed_images&amp;#x2F;omniscience.ebbe8e4df2856533.jpg&quot; &#x2F;&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;david.kolo.ski&amp;#x2F;processed_images&amp;#x2F;petals-of-insight.24686615e7a1dfbe.jpg&quot; &#x2F;&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Omniscience allows you to cast Petals of Insight without paying its mana cost, and you can choose to return Petals to your hand after it resolves.&lt;&#x2F;p&gt;
&lt;p&gt;It seems intuitive that by casting and re-casting Petals of Insight, you can put your library in an arbitrary order &lt;em&gt;as long as&lt;&#x2F;em&gt; the number of cards in it is not divisible by three or is equal to three. This claim is true, but actually performing this combo runs into an issue.&lt;&#x2F;p&gt;
&lt;p&gt;In Magic: the Gathering, players can &quot;shortcut&quot; repetitive game actions by demonstrating a loop and then declaring the number of times they&#x27;d like to execute that loop. This lets players easily take advantage of infinite combos without also requiring them to mechanically perform the actions of that combo; they just have to pick a number of how many times they&#x27;d like to do it. According to IPG 3.3:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;IPG 3.3 It is also slow play if a player continues to execute a loop without being able to provide an exact number of iterations and the expected resulting game state.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So while we &lt;em&gt;can&lt;&#x2F;em&gt; shortcut casting Petals of Insight and sorting our cards, we have to provide an exact number of steps that our loop will execute in. For sorting cards, this is a somewhat complex calculation! But we want to combo off, so let&#x27;s figure it out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scrying-through-the-library&quot;&gt;Scrying through the library&lt;&#x2F;h2&gt;
&lt;p&gt;If we have a library of &lt;code&gt;N&lt;&#x2F;code&gt; cards, then after casting Petals &lt;code&gt;N&lt;&#x2F;code&gt; times without reordering cards, our library will return to the original state. To prove this:&lt;&#x2F;p&gt;
&lt;p&gt;Number each card in your library &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;N-1&lt;&#x2F;code&gt; where the top card is &lt;code&gt;0&lt;&#x2F;code&gt; and the bottom card is &lt;code&gt;N-1&lt;&#x2F;code&gt;. We start with card &lt;code&gt;0&lt;&#x2F;code&gt; on top. Each time we cast Petals, the top three cards are put to the bottom in the same order. This advances the top card by three, looping back to previous cards after all &lt;code&gt;N&lt;&#x2F;code&gt; cards have been scried. After &lt;code&gt;k&lt;&#x2F;code&gt; casts of Petals, the top card will be &lt;code&gt;3k mod N&lt;&#x2F;code&gt;. Thus, by casting &lt;code&gt;k = N&lt;&#x2F;code&gt; times, we guarantee that the top card will be &lt;code&gt;3N mod N = 0&lt;&#x2F;code&gt;. Because we did not change the orders of any cards, our library will have returned to its original state.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of thinking about our library getting re-arranged after each cast, let&#x27;s shift our frame of reference and instead think about looking at sets of three cards at a time. As an example, for &lt;code&gt;N=17&lt;&#x2F;code&gt; cards, we&#x27;ll look at the following groups in order:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;*** ... ... ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... *** ... ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... *** ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... *** ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... ... *** ..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;wrap-around:
&lt;&#x2F;span&gt;&lt;span&gt;*.. ... ... ... ... **
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;.** *.. ... ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... .** *.. ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... .** *.. ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... .** *.. ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... ... .** *.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;wrap-around:
&lt;&#x2F;span&gt;&lt;span&gt;**. ... ... ... ... .*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;..* **. ... ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ..* **. ... ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ..* **. ... ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... ..* **. ..
&lt;&#x2F;span&gt;&lt;span&gt;... ... ... ... ..* **
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;*&lt;&#x2F;code&gt; represents the current group of three cards being scried.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-a-sorting-primitive&quot;&gt;Building a sorting primitive&lt;&#x2F;h2&gt;
&lt;p&gt;Now we&#x27;ll need is a way to change the order of each card in our library in a controlled way.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s call casting Petals &lt;code&gt;N&lt;&#x2F;code&gt; times a &quot;cycle&quot;. In each cycle, there will be exactly one cast where the &lt;code&gt;k&lt;&#x2F;code&gt;-th card is the last in its group of three. For the first two cards, these casts &quot;wrap around&quot; the library so we&#x27;ll choose to do nothing (i.e. wrap-around casts are a &quot;no-op&quot;).&lt;&#x2F;p&gt;
&lt;p&gt;To sort a card once, we&#x27;ll do a cycle of casts. If we see the card we want to sort as the last in its group, we&#x27;ll move it to the front. Additionally, if we see the card in the very first group of three then we&#x27;ll move it to the front.&lt;&#x2F;p&gt;
&lt;p&gt;In doing so, we&#x27;ve moved a card of our choice towards the top of our library by up to two places. We&#x27;ve got a sorting primitive!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sorting-a-single-card&quot;&gt;Sorting a single card&lt;&#x2F;h2&gt;
&lt;p&gt;Each cycle, we can move a single card up to two places closer to the top of our library. If we want to move a particular card to the top of our library, then we&#x27;ll have to move it at most &lt;code&gt;N-1&lt;&#x2F;code&gt; places (if it&#x27;s at the bottom of our library). This means that we&#x27;ll have to do &lt;code&gt;floor(N&#x2F;2)&lt;&#x2F;code&gt; cycles to move the bottom card to the top. As a visual demonstration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;N = 4: ...*
&lt;&#x2F;span&gt;&lt;span&gt;    1: .*..
&lt;&#x2F;span&gt;&lt;span&gt;    2: *...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;N = 5: ....*
&lt;&#x2F;span&gt;&lt;span&gt;    1: ..*..
&lt;&#x2F;span&gt;&lt;span&gt;    2: *....
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;N = 6: .....*
&lt;&#x2F;span&gt;&lt;span&gt;    1: ...*..
&lt;&#x2F;span&gt;&lt;span&gt;    2: .*....
&lt;&#x2F;span&gt;&lt;span&gt;    3: *.....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;sorting-all-of-the-cards&quot;&gt;Sorting all of the cards&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we can sort a single card, let&#x27;s define our procedure for sorting all of our cards:&lt;&#x2F;p&gt;
&lt;p&gt;For &lt;code&gt;i&lt;&#x2F;code&gt; in &lt;code&gt;0..N-3&lt;&#x2F;code&gt;, sort the &lt;code&gt;i&lt;&#x2F;code&gt;-th card to position &lt;code&gt;i&lt;&#x2F;code&gt; in the library. Then sort the last three cards in a single cycle. The library is now sorted.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t the most efficient algorithm for sorting, but it&#x27;s one that we could feasibly do and which satisfies the requirements for declaring and executing loops. So how many casts does that require?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To sort the &lt;code&gt;i&lt;&#x2F;code&gt;-th card, we&#x27;ll need to perform &lt;code&gt;floor(N&#x2F;2)&lt;&#x2F;code&gt; cycles as demonstrated above.&lt;&#x2F;li&gt;
&lt;li&gt;To sort the last three cards of our library, we only have to do a single cycle. One of the casts will look at the final three cards, and we can put them on the bottom in sorted order.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;counting-the-casts&quot;&gt;Counting the casts&lt;&#x2F;h2&gt;
&lt;p&gt;So if we have &lt;code&gt;N&lt;&#x2F;code&gt; cards in our library, then the number of cycles to sort the library has the following recurrence relationship:&lt;&#x2F;p&gt;
&lt;p&gt;Base case: Sorting the last three cards takes a single cycle.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_3 = 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Recursive case: Sorting the last &lt;code&gt;N&lt;&#x2F;code&gt; cards takes &lt;code&gt;floor(N&#x2F;2)&lt;&#x2F;code&gt; cycles plus the number of cycles to sort the last &lt;code&gt;N-1&lt;&#x2F;code&gt; cards.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor(N&#x2F;2) + c_{n-1}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expanding our recursive case gives:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor(N&#x2F;2) + floor((N-1)&#x2F;2) + floor((N-2)&#x2F;2) + ... + floor(4&#x2F;2) + 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the following exact values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_3 = 1
&lt;&#x2F;span&gt;&lt;span&gt;c_4 = 3 = 2 + 1
&lt;&#x2F;span&gt;&lt;span&gt;c_5 = 5 = 2 + 3
&lt;&#x2F;span&gt;&lt;span&gt;c_6 = 8 = 3 + 5
&lt;&#x2F;span&gt;&lt;span&gt;c_7 = 11 = 3 + 8
&lt;&#x2F;span&gt;&lt;span&gt;c_8 = 15 = 4 + 11
&lt;&#x2F;span&gt;&lt;span&gt;c_9 = 19 = 4 + 15
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a quick simplification, let&#x27;s just replace &lt;code&gt;1&lt;&#x2F;code&gt; with &lt;code&gt;floor(3&#x2F;2)&lt;&#x2F;code&gt; since they&#x27;re the same value:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor(N&#x2F;2) + floor((N-1)&#x2F;2) + floor((N-2)&#x2F;2) + ... + floor(4&#x2F;2) + floor(3&#x2F;2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now let&#x27;s move everything under a single &lt;code&gt;floor&lt;&#x2F;code&gt;. To do so, we&#x27;ll need to add an error-correcting term to compensate for the amount that each floor is throwing away. This is relatively straightforward: &lt;code&gt;floor(x&#x2F;2)&lt;&#x2F;code&gt; throws away &lt;code&gt;1&#x2F;2&lt;&#x2F;code&gt; when &lt;code&gt;x&lt;&#x2F;code&gt; is odd, and &lt;code&gt;0&lt;&#x2F;code&gt; when &lt;code&gt;x&lt;&#x2F;code&gt; is even. Thus, it throws away &lt;code&gt;1&#x2F;4&lt;&#x2F;code&gt; on average and so we can subtract &lt;code&gt;(N-2)&#x2F;4&lt;&#x2F;code&gt; to compensate:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor(N&#x2F;2 + (N-1)&#x2F;2 + (N-2)&#x2F;2 + ... + 4&#x2F;2 + 3&#x2F;2 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Simplifying:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor((N + N-1 + N-2 + ... + 4 + 3)&#x2F;2 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can add and subtract &lt;code&gt;2 + 1&lt;&#x2F;code&gt; from the &lt;code&gt;N&lt;&#x2F;code&gt; summation to get a complete sequence, and move the subtracted elements out of the group:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor((N + N-1 + N-2 + ... + 4 + 3 + 2 + 1 - 2 - 1)&#x2F;2 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;span&gt;    = floor((N + N-1 + N-2 + ... + 4 + 3 + 2 + 1)&#x2F;2 - 3&#x2F;2 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the summation identity for &lt;code&gt;sum(i..N)&lt;&#x2F;code&gt; and simplifying:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;c_n = floor((N*(N+1)&#x2F;2)&#x2F;2 - 3&#x2F;2 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;span&gt;    = floor(N*(N+1)&#x2F;4 - 6&#x2F;4 - (N-2)&#x2F;4)
&lt;&#x2F;span&gt;&lt;span&gt;    = floor((N*(N+1) - 6 - N + 2) &#x2F; 4)
&lt;&#x2F;span&gt;&lt;span&gt;    = floor((N*(N+1) - N - 4) &#x2F; 4)
&lt;&#x2F;span&gt;&lt;span&gt;    = floor((N*(N+1) - N) &#x2F; 4) - 1
&lt;&#x2F;span&gt;&lt;span&gt;    = floor((N*N + N - N) &#x2F; 4) - 1
&lt;&#x2F;span&gt;&lt;span&gt;    = floor(N*N &#x2F; 4) - 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And since each cycle requires &lt;code&gt;N&lt;&#x2F;code&gt; casts, that gives us our final answer of:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;C(N) = N * (floor(N*N &#x2F; 4) - 1)
&lt;&#x2F;span&gt;&lt;span&gt;     = N*floor(N^2&#x2F;4) - N
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;C(N)&lt;&#x2F;code&gt; is the number of casts required to sort a library of &lt;code&gt;N&amp;gt;3&lt;&#x2F;code&gt; cards.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;numbers-to-know&quot;&gt;Numbers to know&lt;&#x2F;h2&gt;
&lt;p&gt;Here are the most important numbers to know:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;Cards in library&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Casts of Petals of Insight&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31200&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;52&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;35100&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;53&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37153&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;55&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41525&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;And here are the exact number of casts to declare when casting Petals of Insight with &lt;code&gt;N&lt;&#x2F;code&gt; cards left in your library:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: right&quot;&gt;Cards in library&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Casts of Petals of Insight&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;0&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;2&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;3&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;4&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;5&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;25&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;7&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;77&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;8&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;120&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;10&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;240&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;11&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;319&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;533&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;14&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;672&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;16&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1008&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;17&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1207&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;19&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1691&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;20&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1980&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2640&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;23&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3013&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;25&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3875&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;26&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4368&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;28&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5460&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;29&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6061&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;31&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7409&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;32&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8160&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;34&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9792&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;35&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10675&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;37&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12617&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;38&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;13680&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;40&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15960&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;41&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;17179&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;43&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19823&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;44&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;21252&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;46&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;24288&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;47&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;25897&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;49&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;29351&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;50&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;31200&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;52&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;35100&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;53&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37153&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;55&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41525&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;56&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;43848&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;58&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;48720&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: right&quot;&gt;59&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;51271&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A new impl Trait 4&#x2F;4</title>
        <published>2022-05-13T00:00:00+00:00</published>
        <updated>2022-05-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/a-new-impl-trait-4/"/>
        <id>https://david.kolo.ski/blog/a-new-impl-trait-4/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/a-new-impl-trait-4/">&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;&#x2F;h2&gt;
&lt;p&gt;This post is the culmination of the previous three posts, which discussed the &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-1&#x2F;&quot;&gt;nature of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-2&#x2F;&quot;&gt;how to improve it&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-3&#x2F;&quot;&gt;prior work on &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This is my final recommendation on a path forward for &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recap&quot;&gt;Recap&lt;&#x2F;h3&gt;
&lt;p&gt;As a quick recap, I suggest introducing a new &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; language feature that abstracts types in general. Augmented with either named unnameable types or expanded type inference, this change would enable all existing functionality while making code clearer and more orthogonal.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stepping-stones&quot;&gt;Stepping stones&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve been breezing through many different examples and suggestions without really consolidating our knowledge. Let&#x27;s take some time to build up some higher-level facts that we can use to inform our final analysis.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-lesser-of-two-evils&quot;&gt;The lesser of two evils&lt;&#x2F;h3&gt;
&lt;p&gt;In this case, the two evils are &lt;strong&gt;type inference&lt;&#x2F;strong&gt; and &lt;strong&gt;named unnameable types&lt;&#x2F;strong&gt;. In order for &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; to function, we must choose one of these. Note that we have already chosen one of these (type inference) with &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. I personally think that return type inference is simpler but less in line with Rust&#x27;s goals&lt;a href=&quot;#footnote-1&quot; id=&quot;citation-1&quot; class=&quot;citation&quot;&gt;1&lt;&#x2F;a&gt;. Let&#x27;s consult a motivating example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?? &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I would like to have some function &lt;code&gt;foo&lt;&#x2F;code&gt; return a closure that yields some given value. Then, I would like to have some function &lt;code&gt;bar&lt;&#x2F;code&gt; call &lt;code&gt;foo&lt;&#x2F;code&gt; with a predefined value and return the same type. &lt;code&gt;foo&lt;&#x2F;code&gt;&#x27;s return type must either be &lt;em&gt;inferred&lt;&#x2F;em&gt; or &lt;em&gt;named&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;inferred&quot;&gt;Inferred&lt;&#x2F;h4&gt;
&lt;p&gt;If &lt;code&gt;foo&lt;&#x2F;code&gt;&#x27;s return type is inferred, then &lt;code&gt;bar&lt;&#x2F;code&gt; must either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Infer it from its body (i.e. &lt;code&gt;fn bar() -&amp;gt; _ { foo(42) }&lt;&#x2F;code&gt;, this is basically what &lt;code&gt;impl Trait&lt;&#x2F;code&gt; does right now)&lt;&#x2F;li&gt;
&lt;li&gt;Or, refer to &lt;code&gt;foo&lt;&#x2F;code&gt; to name its return type (i.e. &lt;code&gt;fn bar() -&amp;gt; &amp;lt;foo as Fn&amp;lt;(T,)&amp;gt;&amp;gt;::Output&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A type alias doesn&#x27;t change the situation here, as it would also either state &lt;code&gt;type Output = &amp;lt;foo as Fn(T)&amp;gt;::Output&lt;&#x2F;code&gt; or &lt;code&gt;type Output = _&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we infer the return type of &lt;code&gt;bar&lt;&#x2F;code&gt; from its body, we end up long-range type inference and spooky action at a distance. This has the additional downside that it opens the door for inference to be used in places where it&#x27;s not strictly necessary. This could lead to further confusion and, in my opinion, would render the feature more harmful than helpful.&lt;&#x2F;p&gt;
&lt;p&gt;If we refer to &lt;code&gt;foo&lt;&#x2F;code&gt; to name &lt;code&gt;bar&lt;&#x2F;code&gt;&#x27;s return type, we end up with &lt;code&gt;foo&lt;&#x2F;code&gt; only performing local inference which is arguably better. However, we suffer from the explicit function output signature, especially when we want to change the definition of &lt;code&gt;foo&lt;&#x2F;code&gt;. Modifying its arguments would require modifying the type signature of &lt;code&gt;bar&lt;&#x2F;code&gt; (or equivalently, the signature of the type alias) even when the return type has not changed. It makes maintenance more difficult at the same time as making discoverability more difficult.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;named&quot;&gt;Named&lt;&#x2F;h4&gt;
&lt;p&gt;If we can name &lt;code&gt;foo&lt;&#x2F;code&gt;&#x27;s return type, then &lt;code&gt;bar&lt;&#x2F;code&gt; can reuse that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;Closure&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;Closure&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;Closure&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This opens up new possibilities with closures, and extends nicely to async blocks which are the other main unnameable type. It also alleviates a major problem with naming these types, which was previously done by creating a type alias and using inference to achieve the same result.&lt;&#x2F;p&gt;
&lt;p&gt;The obvious downside is that this breaks encapsulation. There are also some very thorny questions regarding generics for closures that depend on type arguments. As a result, I recommend making this change a separate issue for &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;. In the meantime, we could allow the old-style &lt;code&gt;impl Trait&lt;&#x2F;code&gt; wherever we would write &lt;code&gt;_ as impl Trait&lt;&#x2F;code&gt; or &lt;code&gt;type &#x27;Closure as impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;finer-details&quot;&gt;Finer details&lt;&#x2F;h3&gt;
&lt;p&gt;With a new syntax &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; to perform type abstraction, we must decide:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;are-all-i32-as-impl-debug-the-same-type&quot;&gt;Are all &lt;code&gt;i32 as impl Debug&lt;&#x2F;code&gt; the same type?&lt;&#x2F;h4&gt;
&lt;p&gt;As an example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt; as impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt; as impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Could we do &lt;code&gt;let mut x = a()&lt;&#x2F;code&gt; and then &lt;code&gt;x = b()&lt;&#x2F;code&gt;? These run contrary to the idea that &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; creates a new type that only exposes a minimum of traits and information, so the answer here must be &lt;em&gt;no&lt;&#x2F;em&gt;. This leads naturally to the idea of &lt;code&gt;as impl Debug&lt;&#x2F;code&gt; as the desugaring site for abstraction itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;A&amp;lt;T: Debug&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; A&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    A(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;B&amp;lt;T: Debug&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; B&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    B(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now it is evident that &lt;code&gt;a&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt; do not return types that can be meaningfully compared or exchanged. To unify them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= i32 as impl &lt;&#x2F;span&gt;&lt;span&gt;Debug;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn a() -&amp;gt; Output {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Output {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Would then desugar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Output&amp;lt;T: Debug&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Output&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Output&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Output(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In which case we can see that the return values of &lt;code&gt;a&lt;&#x2F;code&gt; and &lt;code&gt;b&lt;&#x2F;code&gt; can support those operations.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unnamed-in-return-position&quot;&gt;Unnamed in return position&lt;&#x2F;h4&gt;
&lt;p&gt;It&#x27;s worth noting that this still suffers from the same composability restrictions that &lt;code&gt;impl Trait&lt;&#x2F;code&gt; does in return position:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; crate `a`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt; as impl Debug { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; crate `b`
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?? &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because &lt;code&gt;b&lt;&#x2F;code&gt; must return the same type as &lt;code&gt;a&lt;&#x2F;code&gt;, it needs some way to return to &lt;code&gt;a&lt;&#x2F;code&gt;&#x27;s return type. The most commonly suggested way to do this is to use &lt;code&gt;Fn&lt;&#x2F;code&gt; traits:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &amp;lt;a &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Fn&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;()&amp;gt;&amp;gt;::Output { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which works, but suffers from the verbosity of the syntax. This is a problem already discussed with type inference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-practice&quot;&gt;In practice&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have the groundwork laid, we can make some engineering decisions:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-ultimate-goal&quot;&gt;The ultimate goal&lt;&#x2F;h3&gt;
&lt;p&gt;I believe that return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; should be deprecated in favor of &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;. Additionally, we must either stabilize naming the return value of a function (e.g. &lt;code&gt;&amp;lt;foo as Fn()&amp;gt;::Output&lt;&#x2F;code&gt;) or ban &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; in return position. In the latter case, it would still be legal in type alises and that would effectively relegate it to syntax sugar for creating abstracted types. That&#x27;s not necessarily a bad thing; remember that the &lt;code&gt;?&lt;&#x2F;code&gt; operator was a huge quality of life improvement and yet is relatively simple syntax sugar.&lt;&#x2F;p&gt;
&lt;p&gt;The major fork in the road is that we must choose between type inference and explicit naming for unnameable types. They both have their pros and cons, and inference could be restricted to a local context if used with named function return values. I believe that any longer-range type inference (e.g. TAIT) is likely to cause more problems than it solves. Explicitly naming unnameable types requires some exotic syntax and may also cause more problems than it solves.&lt;&#x2F;p&gt;
&lt;p&gt;I think it would be acceptable to keep &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in argument position since its sugar is sufficiently simple and its purpose is orthogonal to other features. However, I would be in support of removing it entirely to keep the language consistent and clean if others preferred that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-way-there&quot;&gt;The way there&lt;&#x2F;h3&gt;
&lt;p&gt;On our way there, we can lint and suggest replacing &lt;code&gt;impl Trait&lt;&#x2F;code&gt; with a concrete &lt;code&gt;T as impl Trait&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= impl &lt;&#x2F;span&gt;&lt;span&gt;Debug;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;            ^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; WARNING: Output is nameable type `i32` and should be declared as:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;   type Output = i32 as impl Debug;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would help push users to use the more explicit &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; syntax and help prevent errors down the line from confusing inference situations. Similarly, we should ban or lint on &lt;code&gt;impl Trait&lt;&#x2F;code&gt; used on nameable types in return position:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Debug {
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;             ^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; WARNING: return type is nameable type `i32` and should be declared as:
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;          fn target() -&amp;gt; i32 as impl Debug
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However we must acknowledge that there are still situations where we must allow closures and async blocks to take advantage of inference.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Clone {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we want to allow local inference, perhaps a lint would be best in this case as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Clone {
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F;             ^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; WARNING: impl Trait is deprecated
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; NOTE:    use explicit inference instead: `_ as impl Clone`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I see this as very similar to the change from &lt;code&gt;Trait&lt;&#x2F;code&gt; to &lt;code&gt;dyn Trait&lt;&#x2F;code&gt;, so many of the same strategies are likely to work here as well.&lt;&#x2F;p&gt;
&lt;p&gt;The largest obstacle for &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; will be building consensus for either type inference or named unnameables. Because this space is still up in the air, I think a discussion of &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; would be good to keep separate. When we do come to a consensus on how to resolve this issue, we can deprecate &lt;code&gt;impl Trait&lt;&#x2F;code&gt; completely. That would allow us to complete the transition and resolve many longstanding issues related to &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Whew, that was a lot of work. Hopefully I&#x27;ve inspired some new ideas and thoughts about &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. Let&#x27;s have some lively debate about it and see if we can make Rust a better language for everyone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h3&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;computerdruid&quot;&gt;@computerdruid&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmandry&quot;&gt;@tmandry&lt;&#x2F;a&gt; in particular for reviewing this series of posts and helping me hone my understanding of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p id=&quot;footnote-1&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-1&quot;&gt;1&lt;&#x2F;a&gt; Don&#x27;t get me wrong, I actually like type inference and use it all the time. However, I think of Rust&#x27;s typing philosophy as a kind of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mechanically_stabilized_earth&quot;&gt;&quot;stabilized inference&quot;&lt;&#x2F;a&gt; model.&lt;&#x2F;p&gt;
&lt;p&gt;In geotechnical engineering, it&#x27;s common practice to use regular soil for building retaining walls, seawalls, and dikes. However, soil alone is not very strong and can easily flow when exposed to movement or water. A seawall made of plain soil would very quickly collapse from the soil shifting and flowing, but we can fix that by adding &quot;&lt;em&gt;reinforcement&lt;&#x2F;em&gt;&quot; to it. These are layers within the soil that provide stiffness and friction to prevent the soil from moving. It&#x27;s kind of like a dirt sandwich with many layers, and it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=0olpSN6_TCc&quot;&gt;surprisingly effective&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think of Rust&#x27;s type inference like the soil: it&#x27;s on-site, abundant, and a natural choice for construction. But it has a tendency to shift and flow because it&#x27;s only loosely held together. In large quantities it can quickly shift and flow when exposed to change. Likewise, I think of function signatures as the reinforcement. It&#x27;s not a lot of material, but it&#x27;s stiff and prevents the type inference inside of function bodies from moving too much. Just this little bit of added stiffness prevents changes from propagating across function boundaries, keeping the system as a whole stable.&lt;&#x2F;p&gt;
&lt;p&gt;This is why I like type inference in statements, but I&#x27;m not a fan of type inference in function signatures.&lt;&#x2F;p&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A new impl Trait 3&#x2F;4</title>
        <published>2022-05-12T00:00:00+00:00</published>
        <updated>2022-05-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/a-new-impl-trait-3/"/>
        <id>https://david.kolo.ski/blog/a-new-impl-trait-3/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/a-new-impl-trait-3/">&lt;p&gt;If you&#x27;re not interested in reading about the prior work done on &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, feel free to skip ahead to &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-4&#x2F;&quot;&gt;the fourth and final post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prior-work&quot;&gt;Prior work&lt;&#x2F;h2&gt;
&lt;p&gt;The concepts behind &lt;code&gt;impl Trait&lt;&#x2F;code&gt; have been around for a surprisingly long time. I&#x27;ve done my best to collect relevant RFCs, successful and failed, review them and compare them to my proposal. There are five RFCs that are directly relevant to &lt;code&gt;impl Trait&lt;&#x2F;code&gt; and type abstraction. Let&#x27;s go in chronological order.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-original-impl-trait&quot;&gt;The original &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;105&#x2F;files&quot;&gt;first &lt;code&gt;impl Trait&lt;&#x2F;code&gt; RFC&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aturon&quot;&gt;@aturon&lt;&#x2F;a&gt; was not accepted, but a proposed &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1522-conservative-impl-trait.html&quot;&gt;more conservative version&lt;&#x2F;a&gt; of it was accepted.&lt;&#x2F;p&gt;
&lt;p&gt;In many ways, this RFC has the same goals as my recommendation. Specifically, it addresses the following by name:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Returning unboxed closures - this now also applies to unboxed &lt;code&gt;Futures&lt;&#x2F;code&gt; generated by &lt;code&gt;async&lt;&#x2F;code&gt; blocks&lt;&#x2F;li&gt;
&lt;li&gt;Preventing leaky APIs - this is related to trait leakage when returning unabstracted types, one of the problems that we&#x27;re trying to solve&lt;&#x2F;li&gt;
&lt;li&gt;Simplifying complex types - the given example is heavily-composed iterator types&lt;&#x2F;li&gt;
&lt;li&gt;Documentation - namely making it easier to understand complex return types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It even proposed allowing &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in any type position, which &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; also aims to allow. Thare are places in the thread where &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; is even used, albeit in the context of a value. So why was the more conservative version accepted instead of the original?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;impl-trait-anywhere&quot;&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; anywhere&lt;&#x2F;h3&gt;
&lt;p&gt;The original proposal didn&#x27;t have a concrete use-case for &lt;code&gt;impl Trait&lt;&#x2F;code&gt; outside of function signatures. With a more current need for TAIT, I would say that we now have a motivating use case for it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;named-return-types&quot;&gt;Named return types&lt;&#x2F;h3&gt;
&lt;p&gt;The original proposal suggested syntax like &lt;code&gt;collect_to_set::&amp;lt;T, I&amp;gt;::impl&lt;&#x2F;code&gt; to refer to the &lt;code&gt;impl Trait&lt;&#x2F;code&gt; return type of the function &lt;code&gt;collect_to_set&lt;&#x2F;code&gt;. This raised questions about how to refer to nested return types. &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; does not have this problem, since the correct approach in this case would be to separate the return type into a type alias. It is good to question how named unnameable types interact with distant type aliases though and whether this would be an issue. Nested &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;s can be approached in the same way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;trait-object-confusion&quot;&gt;Trait object confusion&lt;&#x2F;h3&gt;
&lt;p&gt;There was a lot of concern that it would be easy to confuse &lt;code&gt;impl Trait&lt;&#x2F;code&gt; (a statically-dispatched abstract type) with &lt;code&gt;Trait&lt;&#x2F;code&gt;. At the time, &lt;code&gt;Trait&lt;&#x2F;code&gt; was the syntax for trait objects. It has since been replaced with &lt;code&gt;dyn Trait&lt;&#x2F;code&gt; and deprecated, so the risk of confusion is lower now than ever. Additionally, I think that &lt;code&gt;Type as impl Trait&lt;&#x2F;code&gt; conveys a much larger difference from &lt;code&gt;dyn Trait&lt;&#x2F;code&gt; than &lt;code&gt;impl Trait&lt;&#x2F;code&gt; does.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;impl-trait-is-not-powerful-enough&quot;&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; is not powerful enough&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; was proposed as being a very general-purpose equivalent of existential types, which &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; does not. There was some reluctance to having two ways to express the same concept, which isn&#x27;t as much of a problem with &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;coupled-sugarings&quot;&gt;Coupled sugarings&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pnkfelix&quot;&gt;@pnkfelix&lt;&#x2F;a&gt; actually calls this out explicitly in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;105#issuecomment-45329909&quot;&gt;a comment&lt;&#x2F;a&gt;, how &lt;code&gt;impl Trait&lt;&#x2F;code&gt; has two different uses depending on whether it&#x27;s used in argument position or return position. There&#x27;s also discussion about how covariant and contravariant appearances of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; have different desugarings, and even a suggestion that &lt;code&gt;some Trait&lt;&#x2F;code&gt; be introduced to capture that notion. This parallels a lot of what was discussed in the first post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leaky-auto-traits&quot;&gt;Leaky auto traits&lt;&#x2F;h3&gt;
&lt;p&gt;This was a controversial aspect at the time, but it&#x27;s now well-known that abstractions leak auto traits. This hasn&#x27;t changed, and the previous discussion is extensive and not worth rehashing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;At the end of it all, @aturon closed the RFC in favor of working towards some alternatives with other interested members.&lt;&#x2F;p&gt;
&lt;p&gt;This first RFC does somewhat of a whirlwind tour of the problems that &lt;code&gt;impl Trait&lt;&#x2F;code&gt; attempts to solve. Existential types made an appearance, conditional trait bounds showed up, and there was speculative syntax galore. It properly sets the stage for:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conservative-impl-trait&quot;&gt;Conservative &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2071-impl-trait-existential-types.html&quot;&gt;This RFC&lt;&#x2F;a&gt; is essentially just a limited version of the original proposal. It only allows &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in argument and return position on free and inherent functions. Unfortunately, there&#x27;s not much to comment on here since it&#x27;s a subset of the previous RFC. Some notes:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;abstract-vs-anonymous&quot;&gt;Abstract vs anonymous&lt;&#x2F;h3&gt;
&lt;p&gt;There are a few places here where the terminology around these types are questioned. I prefer &quot;abstract&quot; to draw a clearer separation between abstracted types and unnameable types, both of which could be confused as &quot;anonymous&quot; by non-experts (sorry @eddyb!).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;named-output-types&quot;&gt;Named output types&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eddyb&quot;&gt;@eddyb&lt;&#x2F;a&gt; suggests naming the return types of functions, which is very similar to my suggestion for named unnameable types. Even down to the use of the &lt;code&gt;type&lt;&#x2F;code&gt; keyword, which was fun to see. Naming the return types of functions alone would make it possible to do everything that type alias &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; can do, but using it in conjunction with type aliases would give us incredibly comfy ergonomics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;anxiety-of-impl-trait-overuse&quot;&gt;Anxiety of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; overuse&lt;&#x2F;h3&gt;
&lt;p&gt;The downsides of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; are known, and a few people pointed out that encouraging the use of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in more places could lead to undesirable situations. We discussed this problem when we talked about whether we want our trait implementations to leak, and I think that &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; alleviates many of these concerns by preserving the concrete type information.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bikeshedding-impl-vs-type&quot;&gt;Bikeshedding: &lt;code&gt;impl&lt;&#x2F;code&gt; vs &lt;code&gt;type&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There seem to be some strong opinions about which syntax would be better. &lt;code&gt;impl Trait&lt;&#x2F;code&gt; won evidently.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-unclear-future-for-impl-trait&quot;&gt;An unclear future for &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A really poignant critique of the RFC was that the original failed because many people wanted different futures for it. This RFC was effectively just the lowest common denominator, but doesn&#x27;t resolve the question of which future &lt;code&gt;impl Trait&lt;&#x2F;code&gt; should have. This is exactly the same problem that I aim to address with &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-blocks&quot;&gt;&lt;code&gt;for&lt;&#x2F;code&gt; blocks&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;glaebhoerl&quot;&gt;@glaebhoerl&lt;&#x2F;a&gt; suggests using &lt;code&gt;for&lt;&#x2F;code&gt; blocks to desugar return-position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; for generic free functions. It&#x27;s a cool idea, but doesn&#x27;t get much further exploration as the RFC period was winding down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expanded-impl-trait&quot;&gt;Expanded &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;1951-expand-impl-trait.html&quot;&gt;This RFC&lt;&#x2F;a&gt;, in essence, took on all the bikeshedding that wasn&#x27;t ultimately essential to the first RFC. It does manage to introduce &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in argument position, resolve bikeshedding around syntax, and come to a conclusion about type and lifetime parameters interacting with &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s honestly not too much to discuss here that hasn&#x27;t already been discussed. Most of this RFC is consensus building and cornering &lt;code&gt;impl Trait&lt;&#x2F;code&gt; to prevent it from getting out of hand. This is a valuable RFC to read if you want to understand the specific semantics of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;impl-trait-existential-types&quot;&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; existential types&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve finally caught up and are moving on to the more experimental RFCs. &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2071-impl-trait-existential-types.html&quot;&gt;This RFC&lt;&#x2F;a&gt; aims to introduce &lt;em&gt;existential types&lt;&#x2F;em&gt; and expand &lt;code&gt;impl Trait&lt;&#x2F;code&gt; to more places. I have some real critiques of this RFC, so let&#x27;s get into them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;as-impl-trait-in-spirit&quot;&gt;&lt;code&gt;as impl Trait&lt;&#x2F;code&gt; in spirit&lt;&#x2F;h3&gt;
&lt;p&gt;One of the first sections of this RFC suggests this syntax for abstracted types:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; displayable: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Display = &amp;quot;Hello, world!&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This doesn&#x27;t include the concrete underlying type, and so I think this would be much clearer as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; displayable: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str as impl &lt;&#x2F;span&gt;&lt;span&gt;Display = &amp;quot;Hello, world!&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; or, with variable type inference
&lt;&#x2F;span&gt;&lt;span&gt;let displayable: _ as impl Display = &amp;quot;Hello, world!&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This addresses the same problems, but with an arguably clearer syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Concrete
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;DISPLAYABLE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Abstract
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;DISPLAYABLE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str as impl &lt;&#x2F;span&gt;&lt;span&gt;Display = &amp;quot;Hello, world!&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And can handle unnameable types with local inference:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;MY_CLOSURE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ as impl &lt;&#x2F;span&gt;&lt;span&gt;Fn(i32) -&amp;gt; i32 = |x| x + 1;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;existential-types&quot;&gt;Existential types&lt;&#x2F;h3&gt;
&lt;p&gt;This section in particular muddies the water with &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. The introduction of existential types is &lt;em&gt;intended&lt;&#x2F;em&gt; to provide the same type-abstracting functionality as &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, but with the added benefit of being usable in more positions. There is a particular focus on type aliases and associated types, where the concrete underlying type is inferred based on its use.&lt;&#x2F;p&gt;
&lt;p&gt;I believe that inferring this concrete type is a mistake, and leads to the same inference issues discussed in the last post. Additionally, there is a large focus on not naming the concrete type to prevent trait impls from leaking. However I think this confuses the abstraction of a type with the naming of it. It&#x27;s clearer to name a type and explicitly abstract it.&lt;&#x2F;p&gt;
&lt;p&gt;Fundamentally, I believe that existential types are a less clear formulation of &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;. That&#x27;s a very subjective opinion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-alias-impl-trait&quot;&gt;Type alias impl trait&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2515-type_alias_impl_trait.html&quot;&gt;this RFC&lt;&#x2F;a&gt; is nice and light. It simply builds on the existential types RFC by explicitly setting the syntax to use &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. There is a lot of language lawyering and nailing down the very specific semantics, and it does a good job of explaining why additional syntax hinders learnability and results in confusion. We&#x27;ve already discussed the pros and cons of this RFC extensively, and I think we can do better.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; has taken a long journey to reach where it is now. Along the way there has been great ambition, as well as great confusion. I understand that there are very strong convictions on both sides, and I hope that we can use this as an opportunity to finally resolve them.&lt;&#x2F;p&gt;
&lt;p&gt;In my &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-4&#x2F;&quot;&gt;final post&lt;&#x2F;a&gt;, I hope to bring the past three posts together into a coherent framework and provide a final recommendation on what should be done with &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. If you&#x27;ve made it this far, I appreciate it a lot and hope you can hang on for just a little while longer.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A new impl Trait 2&#x2F;4</title>
        <published>2022-05-11T00:00:00+00:00</published>
        <updated>2022-05-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/a-new-impl-trait-2/"/>
        <id>https://david.kolo.ski/blog/a-new-impl-trait-2/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/a-new-impl-trait-2/">&lt;h2 id=&quot;where-we-left-off&quot;&gt;Where we left off&lt;&#x2F;h2&gt;
&lt;p&gt;In part 1, we explored some possibilities for desugaring &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in return position. In this post, I will explore these possibilities more fully and try to discover the logical implications of them. If you&#x27;re feeling goal-oriented, you can skip to &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-3&#x2F;&quot;&gt;the next post&lt;&#x2F;a&gt; where I discuss prior art and compare my proposal against it.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start far away from desugarings; we&#x27;ll wander back there soon enough. For the time being, we&#x27;ll also use standard desugarings for &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. To start, let&#x27;s talk about...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;abstract-return-types&quot;&gt;Abstract return types&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve got some odd code. Let&#x27;s take a look:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; impl FnOnce() -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; This works
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;eighteen &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; also_eighteen &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; eighteen.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; This doesn&amp;#39;t?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; forty_two &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; also_forty_two &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; forty_two.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;generate&lt;&#x2F;code&gt; is a function that accepts a value and returns a closure that returns that value. Well technically, it really returns an &lt;code&gt;impl FnOnce() -&amp;gt; T&lt;&#x2F;code&gt; which is an abstract type. In fact, because it&#x27;s a closure, the &lt;em&gt;only&lt;&#x2F;em&gt; way we can return it is with &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. We can&#x27;t refer to the type of the closure by name, so it can&#x27;t be used as a concrete type. That&#x27;s not a problem unless we want to leverage some of its concrete properties. However, closures already have some properties that we may want to take advantage of:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;types&#x2F;closure.html#other-traits&quot;&gt;&lt;em&gt;Closure types&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;: All closure types implement &lt;code&gt;Sized&lt;&#x2F;code&gt;. Additionally, closure types implement the following traits if allowed to do so by the types of the captures it stores:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Clone&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Copy&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Sync&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Send&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;Sized&lt;&#x2F;code&gt;, &lt;code&gt;Sync&lt;&#x2F;code&gt;, and &lt;code&gt;Send&lt;&#x2F;code&gt; are all auto-traits. For &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Gankra_&#x2F;status&#x2F;1141413230905966593&quot;&gt;complicated reasons&lt;&#x2F;a&gt;, we&#x27;ll ignore these for now and focus on &lt;code&gt;Clone&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Because we&#x27;re returning our closure abstracted, we can&#x27;t leak whether our closure implements &lt;code&gt;Clone&lt;&#x2F;code&gt; back to the caller. And we can&#x27;t return our closure unabstracted, so we&#x27;re stuck. The closure that we made locally can be cloned because it&#x27;s not abstracted, but as soon as it&#x27;s returned by a function we can no longer clone it!&lt;&#x2F;p&gt;
&lt;p&gt;We could do something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_cloneable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(value: T) -&amp;gt; impl (Clone + FnOnce() -&amp;gt; T) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But now we have two copies of &lt;code&gt;generate&lt;&#x2F;code&gt;, and anything that calls it will also need two copies. And so on and so forth. That&#x27;s pretty inconvenient, but in all fairness, it could be worse.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;it-could-be-worse&quot;&gt;It could be worse&lt;&#x2F;h3&gt;
&lt;p&gt;Presumably, new traits will be added to the standard library over time. Maybe some of them will be useful enough that closures will implement them, much like they do for &lt;code&gt;Clone&lt;&#x2F;code&gt; right now. For now, let&#x27;s say that we&#x27;ve decided to implement &lt;code&gt;Debug&lt;&#x2F;code&gt; for closures. That would be cool, now people can for example check what variables are captured by a closure. In this future, we&#x27;ve just created a huge headache for everyone who wants to return one of them.&lt;&#x2F;p&gt;
&lt;p&gt;To cover all the possible use cases, it&#x27;s no longer suitable to have two copies of a function with different return types. Now, we need &lt;em&gt;four&lt;&#x2F;em&gt; copies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;impl Fn() -&amp;gt; T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Clone + impl Fn() -&amp;gt; T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Debug + impl Fn() -&amp;gt; T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Clone + Debug + impl Fn() -&amp;gt; T&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And four copies of whatever calls those, and so on. That&#x27;s not sustainable. In a technical sense, we&#x27;re already here since closures eagerly implement both &lt;code&gt;Clone&lt;&#x2F;code&gt; and &lt;code&gt;Copy&lt;&#x2F;code&gt;. If we want to return a closure that may implement either of these, we need different functions that all return different &lt;code&gt;impl Trait&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;changing-return-types&quot;&gt;Changing return types&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s pretend that we can return our closure as a concrete type, for example by using type inference. This could be done by putting a &lt;code&gt;_&lt;&#x2F;code&gt; in return position:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_cloneable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(value: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With an unabstracted return type, we can leak our implemented traits! Now we only need one copy of our closure-returning function. However, there&#x27;s nowhere in our function signature that we&#x27;re guaranteeing that our return type is... well anything. This isn&#x27;t great because we might accidentally change our return type by changing our function body, breaking our semver compatibility without realizing it. Maybe if we had a type alias, we could add some where clauses?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;MyClosure&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt; = _&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate_cloneable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(value: T) -&amp;gt; MyClosure&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    MyClosure&amp;lt;T&amp;gt;: FnOnce() -&amp;gt; T,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We know that &lt;code&gt;MyClosure&lt;&#x2F;code&gt; is actually the type of &lt;code&gt;move || value&lt;&#x2F;code&gt;, but nobody else who glances at our source code will know that. It&#x27;s not in our function signature, it&#x27;s not at the alias declaration site, it&#x27;s all inferred from our surroundings. And yet, we&#x27;re now exposing the concrete properties of our closure to everyone. It&#x27;s a recipe for semver violations.&lt;&#x2F;p&gt;
&lt;p&gt;Some of these cases could be mitigated by linting. Places where type inference is used in return position, but the return type can be named. That would keep &lt;code&gt;impl Trait&lt;&#x2F;code&gt; just for cases where we want to abstract the return type and type inference just for cases where we can&#x27;t name the type.&lt;&#x2F;p&gt;
&lt;p&gt;Before we put these ideas together into a coherent proposal, I&#x27;d like to address some solutions we already have:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rpitit-and-tait&quot;&gt;RPITIT and TAIT&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-1&#x2F;&quot;&gt;last post&lt;&#x2F;a&gt;, we looked at &quot;Return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in traits&quot; (RPITIT) and &quot;Type alias &lt;code&gt;impl Trait&lt;&#x2F;code&gt;&quot; (TAIT). To be clear, I don&#x27;t think either of these proposals are bad. I just think they miss the mark, and it&#x27;s not their fault. Here&#x27;s why:&lt;&#x2F;p&gt;
&lt;p&gt;When we desugar return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, it gets hidden in a wrapper type and that &lt;em&gt;type&lt;&#x2F;em&gt; is abstract. In fact, that type is &lt;em&gt;an abstraction&lt;&#x2F;em&gt; over the concrete type. I argue that we&#x27;re missing that extra information, and that is leading us down the path of type inference. Instead of declaring our type aliases and leveraging those for inference, we instead have to declare our alias and then be painfully specific everywhere that we use it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![feature(type_alias_impl_trait)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;::core::{fmt::Debug, ptr::null};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Handle &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= impl &lt;&#x2F;span&gt;&lt;span&gt;Debug;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn a() -&amp;gt; Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    null::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you thought that this would compile, I don&#x27;t blame you! We should have all the information we need to deduce that &lt;code&gt;Handle&lt;&#x2F;code&gt; is an abstract pointer to an &lt;code&gt;i32&lt;&#x2F;code&gt;. However, that&#x27;s not what we get:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0282]: type annotations needed
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;lib.rs:12:5
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;12 |     null()
&lt;&#x2F;span&gt;&lt;span&gt;   |     ^^^^ cannot infer type for type parameter `T` declared on the function `null`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is because we&#x27;re inferring the type of &lt;code&gt;Handle&lt;&#x2F;code&gt;, and we don&#x27;t want to accidentally infer the wrong type in a situation where we&#x27;re &lt;em&gt;actually&lt;&#x2F;em&gt; confused. Compare this to a concrete type alias:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![feature(type_alias_impl_trait)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;::core::ptr::null;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Handle &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *const i32&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;null_handle&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this situation, we can infer the type arguments to &lt;code&gt;null()&lt;&#x2F;code&gt; and don&#x27;t have to use a turbofish to specify that it&#x27;s specifically &lt;code&gt;null::&amp;lt;i32&amp;gt;()&lt;&#x2F;code&gt;. This reversal of the inference flow strikes me as ripe for confusing errors and unintuitive type inference problems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-proposal&quot;&gt;My proposal&lt;&#x2F;h2&gt;
&lt;p&gt;I propose that we introduce new syntax for performing type abstraction. Instead of focusing on the call site, this will instead directly abstract a given concrete type. The goal of this proposal is to separate the broadly-useful type abstraction of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; from the narrowly-useful type inference of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. As I mentioned earlier, separating these two features would allow us to use abstracted types freely while still preventing the use of inferred types unless they are absolutely necessary (i.e. for unnameable types).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;as-impl-trait&quot;&gt;&lt;code&gt;as impl Trait&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Consider this new syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt; as impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This new syntax would desugar to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ImplDebug&amp;lt;T: Debug&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Debug&amp;gt; Debug &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;ImplDebug&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, f: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Formatter&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; ImplDebug&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ImplDebug(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this situation, &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; would serve as the site where the abstracted type is generated. This gives us more control over when these wrappers are created and allows us to guarantee that multiple functions return the same abstracted type.&lt;&#x2F;p&gt;
&lt;p&gt;This also allows abstract types to be used anywhere a regular type would be, and not just in return position. It would separate the type abstraction of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in return position from the type inference of it in argument position and help solve a number of outstanding problems with type abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at how this would apply to RPITIT and TAIT.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;return-position-impl-trait-in-trait-rpitit&quot;&gt;Return position impl trait in trait (RPITIT)&lt;&#x2F;h3&gt;
&lt;p&gt;Associated types of traits leak concrete types. Someone might use &lt;code&gt;&amp;lt;MyFoo as Foo&amp;gt;::Bar&lt;&#x2F;code&gt; somewhere that it needs to be &lt;code&gt;Debug&lt;&#x2F;code&gt;, and the compiler will let them do it as long as the constraints check out. But that&#x27;s not part of our contract, and nobody should be allowed to depend on the fact that &lt;code&gt;MyBar&lt;&#x2F;code&gt; implements &lt;code&gt;Debug&lt;&#x2F;code&gt; if we don&#x27;t want them to. So what if we could say something like this instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Transformer&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;(x: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Output;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Clone&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Transformer&amp;lt;T&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Replicator {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; T &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as impl &lt;&#x2F;span&gt;&lt;span&gt;Clone;
&lt;&#x2F;span&gt;&lt;span&gt;    fn transform(x: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T) -&amp;gt; Self::Cloned {
&lt;&#x2F;span&gt;&lt;span&gt;        x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, the associated &lt;code&gt;T&lt;&#x2F;code&gt; type isn&#x27;t &lt;code&gt;T&lt;&#x2F;code&gt;, it&#x27;s an &lt;em&gt;abstraction&lt;&#x2F;em&gt; of &lt;code&gt;T&lt;&#x2F;code&gt;. It&#x27;s an abstraction that only exposes the fact that &lt;code&gt;T&lt;&#x2F;code&gt; implements &lt;code&gt;Clone&lt;&#x2F;code&gt;, which is exactly what we want.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;type-alias-impl-trait-tait&quot;&gt;Type alias impl trait (TAIT)&lt;&#x2F;h3&gt;
&lt;p&gt;A new approach to TAIT would look like this instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;::core::{fmt::Debug, ptr::null};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Handle &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= *const i32 as impl &lt;&#x2F;span&gt;&lt;span&gt;Debug;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn a() -&amp;gt; Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Handle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This time, everything checks out. We know that &lt;code&gt;Handle&lt;&#x2F;code&gt; is not just any &lt;code&gt;impl Debug&lt;&#x2F;code&gt;, it&#x27;s specifically &lt;code&gt;*const i32 as impl Debug&lt;&#x2F;code&gt;. That allows us to use type inference everywhere; we don&#x27;t even need to turbofish in &lt;code&gt;a()&lt;&#x2F;code&gt; this time. And to cap it all off, we still get an abstracted type to hide any trait implementations we want to keep private.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;publicly-abstracted-private-types&quot;&gt;Publicly abstracted private types&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; already allows us to expose private types through &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, but now we can go a step further:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Thought;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Brain;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Factory &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Brain {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Output &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Thought &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as impl &lt;&#x2F;span&gt;&lt;span&gt;Display;
&lt;&#x2F;span&gt;&lt;span&gt;    fn produce() -&amp;gt; Self::Output {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that &lt;code&gt;Thought&lt;&#x2F;code&gt; is &lt;em&gt;private&lt;&#x2F;em&gt;, yet we&#x27;re exposing it &lt;em&gt;through an abstraction&lt;&#x2F;em&gt; in our associated type. This makes it possible for us to swap out the concrete type of &lt;code&gt;&amp;lt;Brain as Factory&amp;gt;::Output&lt;&#x2F;code&gt; without it being a breaking change! &lt;code&gt;Thought&lt;&#x2F;code&gt; was private and inaccessible, and so we could remove it entirely without causing any semver violations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clarity-and-concreteness&quot;&gt;Clarity and concreteness&lt;&#x2F;h3&gt;
&lt;p&gt;Because the concrete type of the abstraction is preserved, we can still reason about and use the concrete underlying type. If we wanted to, we could even provide the same type abstracted in some places, and unabstracted in others. We could easily abstract types we didn&#x27;t make, and use concrete types internally while still exposing them as abstracted externally. And most importantly, the abstracted return types do not depend on the bodies of our functions. We can modify the code however we want and the compiler will prevent us from accidentally modifying our return types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-inference&quot;&gt;Type inference&lt;&#x2F;h2&gt;
&lt;p&gt;This leaves us with one final issue to tackle: how to return unnameable type. Think back to our closure example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;?? as impl &lt;&#x2F;span&gt;&lt;span&gt;FnOnce() -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ve dug ourselves a hole. One of the primary use cases of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; was to avoid having to name our closure type. But in order to use &lt;code&gt;as impl Trait&lt;&#x2F;code&gt;, we need to do exactly that. This is a situation where we&#x27;d have to reach for type inference and write &lt;code&gt;_ as impl FnOnce() -&amp;gt; T&lt;&#x2F;code&gt;, which exposes us to the problems of type inference. Now, it&#x27;s just on a very small scale since it&#x27;s just for closures and async blocks. But there&#x27;s a - still not perfect - but better way...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;name-the-unnameable&quot;&gt;Name the unnameable&lt;&#x2F;h2&gt;
&lt;p&gt;Why couldn&#x27;t we just give that closure a name? Maybe something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;A&lt;&#x2F;span&gt;&lt;span&gt; as impl FnOnce() -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;A: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So here&#x27;s some more new syntax. Similarly to how we label loops, we can label the creation sites of unnameable types. That way, we can uniquely refer to them in other places. This would solve both of our outstanding problems:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;With a label, we can now refer to our closure in our signature as &lt;code&gt;type &#x27;A&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Additionally, we can leave off the &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; to return our closure concretely. This solves our earlier problem of returning a closure that &lt;em&gt;may be&lt;&#x2F;em&gt; &lt;code&gt;Clone&lt;&#x2F;code&gt;, and avoids having to use unrestricted type inference (i.e. &lt;code&gt;-&amp;gt; _&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Returning the closure concretely sould be as simple as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;generate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; type &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;A &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;A: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;move ||&lt;&#x2F;span&gt;&lt;span&gt; value
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m not married to the syntax. It&#x27;s functional, but I don&#x27;t think it&#x27;s great. I&#x27;ll talk more about this and type inference in later posts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In the first post, I stated that I would propose an alternative formulation of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; that restores orthogonality. That comes in two parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;as impl Trait&lt;&#x2F;code&gt; now handles only type abstraction. Unnameable types like closures and async blocks use their own syntax to be named.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;type &#x27;A&lt;&#x2F;code&gt; labels for unnameable types enable them to be returned concretely and abstracted cleanly. This is an alternative to type inference, but either will complement &lt;code&gt;as impl Trait&lt;&#x2F;code&gt; and get the job done.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Neither of these ideas are new, they have been discussed and considered before. However, I think we now have the experience necessary to fix our past mistakes and a growing need for these more general tools.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-3&#x2F;&quot;&gt;third post&lt;&#x2F;a&gt;, I&#x27;ll discuss existing proposals and prior art and compare my proposal against them.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>A new impl Trait 1&#x2F;4</title>
        <published>2022-05-10T00:00:00+00:00</published>
        <updated>2022-05-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/a-new-impl-trait-1/"/>
        <id>https://david.kolo.ski/blog/a-new-impl-trait-1/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/a-new-impl-trait-1/">&lt;h2 id=&quot;foreword&quot;&gt;Foreword&lt;&#x2F;h2&gt;
&lt;p&gt;This series is both an explanation and criticism of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. A large portion of this text is dedicated to explaining and understanding the properties of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, but it is not &lt;em&gt;solely&lt;&#x2F;em&gt; an explainer.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you&#x27;re already familiar with the properties and mechanics of &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, you can skip to &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-2&#x2F;&quot;&gt;the next post&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If you want to read the past work done on &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, you can skip to &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-3&#x2F;&quot;&gt;the third post&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;re ready for the final proposal, you can skip to &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-4&#x2F;&quot;&gt;the fourth post&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I believe that the current implementation of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; is confusing and non-orthogonal. I propose an alternative formulation of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; that is more intuitive, restores orthogonality to the feature, and enables more precise and flexible use of abstraction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-impl-trait&quot;&gt;What is &lt;code&gt;impl Trait&lt;&#x2F;code&gt;?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; is syntax sugar that can be used in argument position or in return position. Let&#x27;s look at how it can be used and how it desugars to more fundamental Rust syntax.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;argument-position&quot;&gt;Argument position&lt;&#x2F;h3&gt;
&lt;p&gt;When used in argument position, &lt;code&gt;impl Trait&lt;&#x2F;code&gt; is shorthand for a type that implements the requested traits. It takes a function like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(x: impl Debug) {
&lt;&#x2F;span&gt;&lt;span&gt;    dbg!(x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And desugars it to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;X: Debug&amp;gt;(x: X) {
&lt;&#x2F;span&gt;&lt;span&gt;    dbg!(x);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In argument position, each &lt;code&gt;impl Trait&lt;&#x2F;code&gt; is assumed to be a different, unique type. If we wanted to take &lt;em&gt;two&lt;&#x2F;em&gt; arguments of the same type, we couldn&#x27;t use &lt;code&gt;impl Trait&lt;&#x2F;code&gt; any more and would have to be more explicit. This doesn&#x27;t compile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span&gt;(which: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, x: impl Debug, y: impl Debug) -&amp;gt; impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;which {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#ffffff;color:#323232;&quot;&gt;&lt;code&gt;&lt;span&gt;error[E0308]: `if` and `else` have incompatible types
&lt;&#x2F;span&gt;&lt;span&gt;= note:        expected type `impl Debug`
&lt;&#x2F;span&gt;&lt;span&gt;        found type parameter `impl Debug`
&lt;&#x2F;span&gt;&lt;span&gt;= note: a type parameter was expected, but a different one was found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is because &lt;code&gt;x&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;impl Debug&lt;&#x2F;code&gt; could be a different concrete type from &lt;code&gt;y&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;impl Debug&lt;&#x2F;code&gt;. &lt;code&gt;impl Trait&lt;&#x2F;code&gt; makes them appear to be the same type when they really aren&#x27;t. Instead, we write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;pick&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Debug&amp;gt;(which: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;, x: T, y: T) -&amp;gt; T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which tells the compiler that we expect two of the same type and will return that type. That&#x27;s easy enough, we just have to desugar it ourselves and give the compiler a little more information. Let&#x27;s move on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;return-position&quot;&gt;Return position&lt;&#x2F;h3&gt;
&lt;p&gt;When used in return position, &lt;code&gt;impl Traits&lt;&#x2F;code&gt; is &lt;em&gt;also&lt;&#x2F;em&gt; shorthand for a type that implements the requested traits. However, there&#x27;s a catch. It takes a function like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And desugars it to something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Target&amp;lt;T: Debug &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Debug &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f5f5f5;font-weight:bold;color:#b52a1d;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized&amp;gt; Debug for Target&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, f: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut &lt;&#x2F;span&gt;&lt;span&gt;Formatter&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(), Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(f)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Target&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Target(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This desugaring has a special property: the return type &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt; gets &lt;em&gt;abstracted&lt;&#x2F;em&gt; behind an opaque &lt;code&gt;Target&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; wrapper. That lets &lt;code&gt;target&lt;&#x2F;code&gt; limit what properties of its return type a caller is allowed to rely on. In this case, the &lt;code&gt;Target&lt;&#x2F;code&gt; type proxies the &lt;code&gt;Debug&lt;&#x2F;code&gt; impl but &lt;em&gt;only&lt;&#x2F;em&gt; the &lt;code&gt;Debug&lt;&#x2F;code&gt; impl. Any other traits implemented by the wrapped &lt;code&gt;T&lt;&#x2F;code&gt; are &lt;em&gt;not&lt;&#x2F;em&gt; implemented by &lt;code&gt;Target&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;a href=&quot;#footnote-1&quot; id=&quot;citation-1&quot; class=&quot;citation&quot;&gt;1&lt;&#x2F;a&gt;. Let&#x27;s look at a more complex example to see how this affects composability:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;combine&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Add&amp;gt;(lhs: T, rhs: T) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;T::&lt;&#x2F;span&gt;&lt;span&gt;Output {
&lt;&#x2F;span&gt;&lt;span&gt;    lhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(rhs)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;combine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;combine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, the return type of &lt;code&gt;combine&lt;&#x2F;code&gt; is just a &lt;code&gt;T::Output&lt;&#x2F;code&gt;. That means that &lt;code&gt;combine(1, 2)&lt;&#x2F;code&gt; returns a plain &lt;code&gt;i32&lt;&#x2F;code&gt;, so we can take advantage of &lt;code&gt;i32&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;Display&lt;&#x2F;code&gt; and &lt;code&gt;Debug&lt;&#x2F;code&gt; implementations. Let&#x27;s compare that to what happens when we use &lt;code&gt;impl Trait&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;combine_abstract&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Add&amp;gt;(lhs: T, rhs: T) -&amp;gt; impl Display
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;T::&lt;&#x2F;span&gt;&lt;span&gt;Output: Display,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    lhs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(rhs)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;combine_abstract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; ERROR: `impl Display` does not implement `Debug`
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;combine_abstract&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have &lt;em&gt;abstracted&lt;&#x2F;em&gt; our return type using &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, and that opaque return type does not implement &lt;code&gt;Debug&lt;&#x2F;code&gt;. Note that we also had to bound &lt;code&gt;T::Output: Display&lt;&#x2F;code&gt; since our &lt;code&gt;impl Display&lt;&#x2F;code&gt; requires that the value inside of it implements &lt;code&gt;Display&lt;&#x2F;code&gt;. While we can still &lt;code&gt;Display&lt;&#x2F;code&gt; the return value of &lt;code&gt;combine_abstract&lt;&#x2F;code&gt;, we can no longer &lt;code&gt;Debug&lt;&#x2F;code&gt; it. That&#x27;s the very literal difference when using &lt;code&gt;impl Trait&lt;&#x2F;code&gt;, but what does that actually mean for our code?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;should-you-abstract-your-types&quot;&gt;Should you abstract your types?&lt;&#x2F;h2&gt;
&lt;p&gt;An abstract type restricts what someone else can know about a concrete type. In the &lt;code&gt;fn target() -&amp;gt; &amp;amp;&#x27;static str&lt;&#x2F;code&gt; example, whoever calls &lt;code&gt;target&lt;&#x2F;code&gt; gets an unabstracted &lt;code&gt;&amp;amp;&#x27;static str&lt;&#x2F;code&gt;. This can be both a blessing and a curse:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-good&quot;&gt;The good&lt;&#x2F;h3&gt;
&lt;p&gt;On one hand, a concrete type lets you reason about its other properties. In this example, we wrap our input in a type and return it concretely:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Container&amp;lt;T&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;contain&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(value: T) -&amp;gt; Container&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Container(value)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because &lt;code&gt;contain&lt;&#x2F;code&gt; returns &lt;code&gt;Container&lt;&#x2F;code&gt; concretely, we can determine whether the return value implements a trait. &lt;code&gt;T&lt;&#x2F;code&gt; implements &lt;code&gt;Debug&lt;&#x2F;code&gt;, and &lt;code&gt;Container&lt;&#x2F;code&gt; implements it if &lt;code&gt;T&lt;&#x2F;code&gt; does, so we can debug print the return value from &lt;code&gt;contain&lt;&#x2F;code&gt;. This lets us write &lt;code&gt;contain&lt;&#x2F;code&gt; to be as helpful as possible to whoever calls it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-bad&quot;&gt;The bad&lt;&#x2F;h3&gt;
&lt;p&gt;But what if, some time in the future, we want to change &lt;code&gt;Container&lt;&#x2F;code&gt; so that it no longer implements &lt;code&gt;PartialEq&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Container&amp;lt;T&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perhaps that was just for debugging and nobody was supposed to rely on &lt;code&gt;PartialEq&lt;&#x2F;code&gt; being implemented. But &lt;code&gt;Container&lt;&#x2F;code&gt; is public since it&#x27;s the return type of &lt;code&gt;contain&lt;&#x2F;code&gt;, so we&#x27;ve broken everyone who was relying on &lt;code&gt;PartialEq&lt;&#x2F;code&gt; being implemented! This situation gets worse for &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#auto-traits&quot;&gt;auto traits&lt;&#x2F;a&gt; like &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt; since we might change whether our type implements an auto trait just by changing its definition. That&#x27;s spooky action at a distance!&lt;&#x2F;p&gt;
&lt;p&gt;This is a situation where &lt;code&gt;impl Trait&lt;&#x2F;code&gt; can help us. By returning an &lt;code&gt;impl Debug&lt;&#x2F;code&gt;, we can prevent &lt;a href=&quot;https:&#x2F;&#x2F;www.hyrumslaw.com&#x2F;&quot;&gt;Hyrum&#x27;s Law&lt;&#x2F;a&gt; from breaking everything downstream from our library when we remove the &lt;code&gt;Debug&lt;&#x2F;code&gt; implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;contain&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Debug&amp;gt;(value: T) -&amp;gt; impl Debug {
&lt;&#x2F;span&gt;&lt;span&gt;    Container(value)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our downstream users can&#x27;t rely on any additional traits being implemented, and we can add and remove more trait implementations from &lt;code&gt;Container&lt;&#x2F;code&gt; without causing a semver breakage.&lt;&#x2F;p&gt;
&lt;p&gt;These examples have all been for free functions and inherent methods; what&#x27;s the situation for traits?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;impl-trait-in-traits&quot;&gt;&lt;code&gt;impl Trait&lt;&#x2F;code&gt; in traits&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;argument-position-traits&quot;&gt;Argument position (traits)&lt;&#x2F;h3&gt;
&lt;p&gt;Not much is different for argument position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in trait methods. Something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Logger {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;(x: impl Debug);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;desugars to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Logger {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;X: Debug&amp;gt;(x: X);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is pretty much the same as the previous argument position desugaring. But what about...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;return-position-traits&quot;&gt;Return position (traits)&lt;&#x2F;h3&gt;
&lt;p&gt;You can&#x27;t use &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in return position right now, but why is that? Let&#x27;s consider a desugaring of &lt;code&gt;impl Trait&lt;&#x2F;code&gt; as a return type in a trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A straightforward desugaring of this would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine: Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But that doesn&#x27;t abstract the return type like we want. Instead, we should make a wrapper to hide the details of the concrete type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MinerOre&amp;lt;T: Ore&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Ore&amp;gt; Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MinerOre&amp;lt;T&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine: Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; MinerOre&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This seems sensible, now let&#x27;s implement a &lt;code&gt;Miner&lt;&#x2F;code&gt; with our chosen desugaring:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore {
&lt;&#x2F;span&gt;&lt;span&gt;        Bauxite
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This desugars to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Bauxite;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; MinerOre&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        MinerOre(Bauxite)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That makes sense, but I&#x27;m left a little dissatisfied. The trait is dictating whether the return type of the function is abstract, but we could let the impl choose whether to abstract its return type. The impl is the one exposing that associated &lt;code&gt;Mine&lt;&#x2F;code&gt; type, so we could just set &lt;code&gt;type Mine = MinerOre&amp;lt;Bauxite&amp;gt;&lt;&#x2F;code&gt; instead. Let&#x27;s consider an alternative desugaring:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;return-position-traits-version-2&quot;&gt;Return position (traits, version 2)&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s change our original desugaring for our trait:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So that it now desugars to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine: Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this is more consistent with how the argument position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; desugars, let&#x27;s keep that in mind. Anyway, now our &lt;code&gt;Miner&lt;&#x2F;code&gt; impl is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore {
&lt;&#x2F;span&gt;&lt;span&gt;        Bauxite
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which desugars to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;QuarryOre&amp;lt;T: Ore&amp;gt;(T);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Ore&amp;gt; Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;QuarryOre&amp;lt;T&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;QuarryOre&amp;lt;Bauxite&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine {
&lt;&#x2F;span&gt;&lt;span&gt;        QuarryOre(Bauxite)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now it&#x27;s the &lt;em&gt;impl&lt;&#x2F;em&gt; that decides whether to abstract the return type. Nice, but the syntax seems a little weird. If we chose not to abstract our return type, the trait and impl look like this instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Bauxite;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine {
&lt;&#x2F;span&gt;&lt;span&gt;        Bauxite
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no associated type in the trait definition, but we still need it to write our unabstracted trait implementation. So we end up conjuring the associated &lt;code&gt;Mine&lt;&#x2F;code&gt; type out of thin air. This is because the &lt;code&gt;impl Ore&lt;&#x2F;code&gt; in our &lt;code&gt;Miner&lt;&#x2F;code&gt; trait actually desugars to a concrete associated &lt;code&gt;Mine&lt;&#x2F;code&gt; type. This is good because we want the implementor to choose whether to abstract their return type. However, &lt;code&gt;impl Trait&lt;&#x2F;code&gt; now means different things in different contexts.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In a trait definition, &lt;code&gt;impl Trait&lt;&#x2F;code&gt; is just sugar for an associated type bounded by some trait. This is similar to how &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in argument position is just sugar for generics. This desugaring &lt;em&gt;does not&lt;&#x2F;em&gt; abstract the return type.&lt;&#x2F;li&gt;
&lt;li&gt;In a trait implementation, &lt;code&gt;impl Trait&lt;&#x2F;code&gt; &lt;em&gt;does&lt;&#x2F;em&gt; abstract the return type like we would expect.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This desugaring does everything we want at the cost of having some very unintuitive behavior around the secret associated type. In our first desugaring, the one that didn&#x27;t let the implementor choose whether to abstract the return type, &lt;code&gt;impl Trait&lt;&#x2F;code&gt; had syntactic consistency at the cost of flexibility. This new desugaring makes the opposite tradeoff.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flipping-it-around&quot;&gt;Flipping it around&lt;&#x2F;h3&gt;
&lt;p&gt;We can also have the reverse problem if a trait returns an associated type but an implementation wants to abstract its return value:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine: Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= ???&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Ore {
&lt;&#x2F;span&gt;&lt;span&gt;        Bauxite
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we can no longer tell &lt;code&gt;Mine&lt;&#x2F;code&gt; what type it is. We could move the &lt;code&gt;impl Ore&lt;&#x2F;code&gt; into the type definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= impl &lt;&#x2F;span&gt;&lt;span&gt;Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    fn mine() -&amp;gt; Self::Mine { &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And in fact, this is what the Type Alias Impl Trait (TAIT) proposal suggests. But now the type of &lt;code&gt;Mine&lt;&#x2F;code&gt; is being inferred from the body of &lt;code&gt;mine&lt;&#x2F;code&gt;. This can lead to confusion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= impl &lt;&#x2F;span&gt;&lt;span&gt;Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    fn mine() -&amp;gt; Self::Mine {
&lt;&#x2F;span&gt;&lt;span&gt;        Bauxite; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- Oops! A stray semicolon!
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code&gt;Ore&lt;&#x2F;code&gt; is implemented for the unit type &lt;code&gt;()&lt;&#x2F;code&gt;, then our code will compile fine but do the wrong thing. We won&#x27;t know about it until runtime, if we even catch it. Additionally, it&#x27;s important to note that we would have avoided this if we specified &lt;code&gt;type Mine = Bauxite&lt;&#x2F;code&gt; instead of using &lt;code&gt;impl Trait&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a specific case, but with more complex expressions we can cause much sneakier issues&lt;a href=&quot;#footnote-2&quot; id=&quot;citation-2&quot; class=&quot;citation&quot;&gt;2&lt;&#x2F;a&gt;. This issue can occur anywhere that infer the return types of functions, and is really a problem with return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; as a whole. What we&#x27;re doing here is allowing these issues to creep into new places in the language as well, increasing the odds that we&#x27;ll accidentally stumble across it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;meta-who-cares&quot;&gt;Meta: who cares?&lt;&#x2F;h3&gt;
&lt;p&gt;Is this really so bad though? For many people this will be a mild annoyance, but one that they can live with. Maybe the compiler errors will be a little vague, maybe a few screwball types will get mixed up but caught in unit tests. It&#x27;s very tempting to never publish these posts, never start any debate, never pitch dumb issues like these back and forth on Github. Who am I really to stand in the way of progress? I don&#x27;t want to go back to a language where nothing improves or changes or ever gets done.&lt;&#x2F;p&gt;
&lt;p&gt;I see this as a papercut. It&#x27;s an unsettling reminder of the weird behavior I&#x27;d see in C++, where these kinds of issues kept getting added and expanded over multiple language revisions. Eventually, it got so bad that you were not just able but likely to die by a thousand papercuts. You could only write so much code before one of them would get you.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t think we have to choose between having footguns and being able to use &lt;code&gt;impl Trait&lt;&#x2F;code&gt;. Unfortunately, we&#x27;re also steaming ahead in implementing and stabilizing all of these features. I don&#x27;t think that&#x27;s a bad thing, I admire that as a project we&#x27;re able to make real progress on new features and improvements. I just think this is a moment for us to take pause and consider some alternatives.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Alright, so we&#x27;ve got some problems. In &lt;a href=&quot;https:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;a-new-impl-trait-2&#x2F;&quot;&gt;part 2&lt;&#x2F;a&gt;, I&#x27;ll describe one possible solution to this problem that allows us to have both consistency and flexibility.&lt;&#x2F;p&gt;
&lt;p id=&quot;footnote-1&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-1&quot;&gt;1&lt;&#x2F;a&gt; &lt;code&gt;impl Trait&lt;&#x2F;code&gt; actually &lt;em&gt;does&lt;&#x2F;em&gt; leak some traits, specifically &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;unstable-book&#x2F;language-features&#x2F;auto-traits.html&quot;&gt;auto traits&lt;&#x2F;a&gt;. Auto traits are automatically implemented for types based on their compositions, so the &lt;code&gt;Target&lt;&#x2F;code&gt; struct in our example will implement them if &lt;code&gt;T&lt;&#x2F;code&gt; does. This has led to a &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;Gankra_&#x2F;status&#x2F;1141409682017308672&quot;&gt;now-famous tweet&lt;&#x2F;a&gt;. I&#x27;d like to add that &lt;code&gt;impl Trait&lt;&#x2F;code&gt; also leaks &lt;code&gt;Unpin&lt;&#x2F;code&gt; because it is an auto trait like &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;&lt;p id=&quot;footnote-2&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-2&quot;&gt;2&lt;&#x2F;a&gt; Consider this code that uses TAIT and GATs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![feature(type_alias_impl_trait)]
&lt;&#x2F;span&gt;&lt;span&gt;#![feature(generic_associated_types)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Miner {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&amp;#39;a&amp;gt; where Self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Mine&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Ore: Clone {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Ore&amp;gt; Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) { println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Ore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Bauxite;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Bauxite {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) { println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Bauxite&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ore: T,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt; Quarry&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;ore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.ore
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;#39;static +&lt;&#x2F;span&gt;&lt;span&gt; Ore&amp;gt; Miner &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Quarry&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Mine&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt;&amp;#39;a&amp;gt; = impl &lt;&#x2F;span&gt;&lt;span&gt;Ore;
&lt;&#x2F;span&gt;&lt;span&gt;    fn mine(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; Self::Mine&amp;lt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ore&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quarry &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Quarry { ore: Bauxite };
&lt;&#x2F;span&gt;&lt;span&gt;    quarry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;ve written any async code using GATs and TAIT then you may find this kind of code eerily familiar. This prints &lt;code&gt;Bauxite&lt;&#x2F;code&gt; like we expect, but if we remove the &lt;code&gt;: Clone&lt;&#x2F;code&gt; supertrait from &lt;code&gt;Ore&lt;&#x2F;code&gt; (maybe during some refactoring) then it prints &lt;code&gt;Ore&lt;&#x2F;code&gt; instead. This issue isn&#x27;t totally unique to TAIT though, it can also happen in stable Rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;Ore: Clone {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Ore&amp;gt; Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) { println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Ore&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Clone, Copy)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Bauxite;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Bauxite {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) { println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Bauxite&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;); }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quarry&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ore: T,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: Ore&amp;gt; Quarry&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;ore&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.ore
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; impl Ore &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &amp;#39;_ &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;ore&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quarry &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Quarry { ore: Bauxite };
&lt;&#x2F;span&gt;&lt;span&gt;    quarry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;mine&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case it&#x27;s only for free functions, and you&#x27;d probably find the presence of &lt;code&gt;impl Ore + &#x27;_&lt;&#x2F;code&gt; a bit more suspicious. What TAIT does is allow this problem cross the trait boundary. Traits are no longer safe from this mistake because this is really a problem with return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; and TAIT enables return position &lt;code&gt;impl Trait&lt;&#x2F;code&gt; in traits.&lt;&#x2F;p&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Anima Playground</title>
        <published>2021-10-10T00:00:00+00:00</published>
        <updated>2021-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/anima-playground/"/>
        <id>https://david.kolo.ski/blog/anima-playground/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/anima-playground/">

&lt;script&gt;
    let wasm_bindgen;
(function() {
    const __exports = {};
    let wasm;

    let WASM_VECTOR_LEN = 0;

    let cachegetUint8Memory0 = null;
    function getUint8Memory0() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachegetUint8Memory0;
    }

    let cachedTextEncoder = new TextEncoder(&#x27;utf-8&#x27;);

    const encodeString = (typeof cachedTextEncoder.encodeInto === &#x27;function&#x27;
        ? function (arg, view) {
        return cachedTextEncoder.encodeInto(arg, view);
    }
        : function (arg, view) {
        const buf = cachedTextEncoder.encode(arg);
        view.set(buf);
        return {
            read: arg.length,
            written: buf.length
        };
    });

    function passStringToWasm0(arg, malloc, realloc) {

        if (realloc === undefined) {
            const buf = cachedTextEncoder.encode(arg);
            const ptr = malloc(buf.length);
            getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
            WASM_VECTOR_LEN = buf.length;
            return ptr;
        }

        let len = arg.length;
        let ptr = malloc(len);

        const mem = getUint8Memory0();

        let offset = 0;

        for (; offset &lt; len; offset++) {
            const code = arg.charCodeAt(offset);
            if (code &gt; 0x7F) break;
            mem[ptr + offset] = code;
        }

        if (offset !== len) {
            if (offset !== 0) {
                arg = arg.slice(offset);
            }
            ptr = realloc(ptr, len, len = offset + arg.length * 3);
            const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
            const ret = encodeString(arg, view);

            offset += ret.written;
        }

        WASM_VECTOR_LEN = offset;
        return ptr;
    }

    let cachegetInt32Memory0 = null;
    function getInt32Memory0() {
        if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
            cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
        }
        return cachegetInt32Memory0;
    }

    function getArrayI32FromWasm0(ptr, len) {
        return getInt32Memory0().subarray(ptr &#x2F; 4, ptr &#x2F; 4 + len);
    }
    &#x2F;**
    * @param {string} puzzle
    * @returns {Int32Array | undefined}
    *&#x2F;
    __exports.solve = function(puzzle) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(puzzle, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.solve(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr &#x2F; 4 + 0];
            var r1 = getInt32Memory0()[retptr &#x2F; 4 + 1];
            let v1;
            if (r0 !== 0) {
                v1 = getArrayI32FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 4);
            }
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    };

    async function load(module, imports) {
        if (typeof Response === &#x27;function&#x27; &amp;&amp; module instanceof Response) {
            if (typeof WebAssembly.instantiateStreaming === &#x27;function&#x27;) {
                try {
                    return await WebAssembly.instantiateStreaming(module, imports);

                } catch (e) {
                    if (module.headers.get(&#x27;Content-Type&#x27;) != &#x27;application&#x2F;wasm&#x27;) {
                        console.warn(&quot;`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application&#x2F;wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n&quot;, e);

                    } else {
                        throw e;
                    }
                }
            }

            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);

        } else {
            const instance = await WebAssembly.instantiate(module, imports);

            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };

            } else {
                return instance;
            }
        }
    }

    async function init(input) {
        if (typeof input === &#x27;undefined&#x27;) {
            let src;
            if (typeof document === &#x27;undefined&#x27;) {
                src = location.href;
            } else {
                src = document.currentScript.src;
            }
            input = src.replace(&#x2F;\.js$&#x2F;, &#x27;_bg.wasm&#x27;);
        }
        const imports = {};


        if (typeof input === &#x27;string&#x27; || (typeof Request === &#x27;function&#x27; &amp;&amp; input instanceof Request) || (typeof URL === &#x27;function&#x27; &amp;&amp; input instanceof URL)) {
            input = fetch(input);
        }



        const { instance, module } = await load(await input, imports);

        wasm = instance.exports;
        init.__wbindgen_wasm_module = module;

        return wasm;
    }

    wasm_bindgen = Object.assign(init, __exports);

})();

&lt;&#x2F;script&gt;

&lt;script&gt;
    const PLAYGROUND_URL = &#x27;http:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;anima-playground&#x27;

window.addEventListener(&#x27;load&#x27;, async (event) =&gt; {
  await wasm_bindgen(&#x27;&#x2F;wasm&#x2F;anima_solver_bg.wasm&#x27;)

  for (let json of document.getElementsByClassName(&#x27;anima-data&#x27;)) {
    let puzzle = {
      data: JSON.parse(json.text),
      scale: Number(json.getAttribute(&#x27;data-scale&#x27;)),
      controls: json.getAttribute(&#x27;data-controls&#x27;) === &#x27;true&#x27;
    }

    let params = new URL(document.location).searchParams

    let data = params.get(&#x27;data&#x27;)
    let scale = params.get(&#x27;scale&#x27;)
    let controls = params.get(&#x27;controls&#x27;)

    if (json.getAttribute(&#x27;data-dynamic&#x27;) === &#x27;true&#x27; &amp;&amp; data != null) {
      console.log(data)
      puzzle.data = JSON.parse(atob(data))
    }
    if (scale != null) {
      puzzle.scale = Number(scale)
    }
    if (controls === &#x27;true&#x27;) {
      puzzle.controls = true
    }

    json.insertAdjacentElement(
      &#x27;afterend&#x27;,
      new Puzzle(puzzle)
    )
  }
})

class CustomElement extends HTMLElement {
  constructor (name, props, data) {
    super()

    const template = document.getElementById(name + &#x27;-template&#x27;)
    this.attachShadow({ mode: &#x27;open&#x27; }).appendChild(template.content.cloneNode(true))

    this.refs = {}
    for (let ref of this.shadowRoot.querySelectorAll(&#x27;[data-ref]&#x27;)) {
      this.refs[ref.getAttribute(&#x27;data-ref&#x27;)] = ref
    }

    this._props = props || this.props
    Object.defineProperty(this, &#x27;props&#x27;, {
      get () {
        return this._props
      },
      set (value) {
        this._props = value
        this.update()
      }
    })

    if (data != null) {
      for (let key in data) {
        this[key] = data[key]
      }
    }

    if (this._props !== undefined) {
      this.update()
    }
  }

  update () {}
}

class Actor extends CustomElement {
  constructor (props) {
    super(&#x27;anima-actor&#x27;, props)
  }

  update () {
    switch (this.props.color) {
      case &#x27;red&#x27;:
        this.classList.add(&#x27;red&#x27;)
        break
      case &#x27;blue&#x27;:
        this.classList.add(&#x27;blue&#x27;)
        break
      default:
        throw new Error(`Invalid color ${this.props.color}`)
    }

    this.style.width = `${this.props.scale}px`
    this.style.height = `${this.props.scale}px`
    this.style.transform = `translate(${this.props.x * this.props.scale}px, ${(this.props.height - this.props.y - 1) * this.props.scale}px)`
  }
}
window.customElements.define(&#x27;anima-actor&#x27;, Actor)

class Puzzle extends CustomElement {
  constructor (props) {
    super(&#x27;anima-puzzle&#x27;, props)

    this.deactivate()

    this.refs.board.addEventListener(&#x27;focus&#x27;, e =&gt; this.activate())
    this.refs.board.addEventListener(&#x27;blur&#x27;, e =&gt; this.deactivate())

    this.touch = {}
    this.refs.board.addEventListener(&#x27;touchstart&#x27;, e =&gt; {
      if (this.active) {
        this.touch.startX = e.targetTouches[0].clientX
        this.touch.startY = e.targetTouches[0].clientY
        this.touch.done = false
        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchmove&#x27;, e =&gt; {
      if (this.active) {
        if (!this.touch.done) {
          let dx = e.targetTouches[0].clientX - this.touch.startX
          let dy = e.targetTouches[0].clientY - this.touch.startY

          const SWIPE_DIST = 40
          if (dx &lt; -SWIPE_DIST) {
            this.move(-1, 0)
            this.touch.done = true
          } else if (dx &gt; SWIPE_DIST) {
            this.move(1, 0)
            this.touch.done = true
          } else if (dy &lt; -SWIPE_DIST) {
            this.move(0, 1)
            this.touch.done = true
          } else if (dy &gt; SWIPE_DIST) {
            this.move(0, -1)
            this.touch.done = true
          }
        }

        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchend&#x27;, e =&gt; {
      if (this.active &amp;&amp; !this.touch.done) {
        this.refs.board.blur()
      }
    })

    document.addEventListener(&#x27;keydown&#x27;, e =&gt; this.onKeyDown(e))
    this.refs.focuser.addEventListener(&#x27;click&#x27;, e =&gt; this.refs.board.focus())

    this.refs.undo.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.undo.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.undo()
      this.bounce(this.refs.undo)
    })
    this.refs.reset.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.reset.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.reset()
      this.bounce(this.refs.reset)
    })
    this.refs.link.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.link.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.copyLinkToClipboard()
      this.bounce(this.refs.link)
    })

    this.refs.autoSolve.addEventListener(&#x27;change&#x27;, e =&gt; this.updateDisplay())
    this.refs.solveButton.addEventListener(&#x27;click&#x27;, e =&gt; this.solve())

    this.refs.importInput.addEventListener(&#x27;focus&#x27;, e =&gt; this.refs.importInput.select())
    this.refs.importButton.addEventListener(&#x27;click&#x27;, e =&gt; this.import())

    this.history = []
  }

  update () {
    this.refs.name.textContent = this.props.data.name

    this.refs.optimalMoves.textContent = `${this.props.data.optimalMoves}`

    this.refs.board.style.width = `${this.props.data.width * this.props.scale}px`
    this.refs.board.style.height = `${this.props.data.height * this.props.scale}px`

    this.refs.board.innerHTML = &#x27;&#x27;

    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile !== &#x27; &#x27;) {
          let div = document.createElement(&#x27;div&#x27;)

          div.classList.add(&#x27;tile&#x27;)
          div.style.width = `${this.props.scale}px`
          div.style.height = `${this.props.scale}px`
          div.style.left = `${x * this.props.scale}px`
          div.style.bottom = `${y * this.props.scale}px`

          if (tile === &#x27;r&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;red&#x27;)
          }
          if (tile === &#x27;b&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;blue&#x27;)
          }

          this.refs.board.append(div)
        }
      }
    }

    this.actors = []
    for (let dataActor of this.props.data.actors) {
      let actor = new Actor({
        x: dataActor.x,
        y: dataActor.y,
        color: dataActor.color,
        scale: this.props.scale,
        height: this.props.data.height,
      })
      this.actors.push(actor)
      this.refs.board.appendChild(actor)
    }

    if (!this.props.controls) {
      this.refs.controls.classList.add(&#x27;hidden&#x27;)
    }

    this.refs.importInput.value = JSON.stringify(this.props.data)
  }

  tile (x, y) {
    if (x &lt; 0 || x &gt;= this.props.data.width || y &lt; 0 || y &gt;= this.props.data.height) {
      return null
    } else {
      return this.props.data.tiles[this.props.data.height - y - 1][x]
    }
  }

  activate () {
    this.active = true
    this.classList.add(&#x27;active&#x27;)
  }

  deactivate () {
    this.active = false
    this.classList.remove(&#x27;active&#x27;)
  }

  onKeyDown (e) {
    if (!this.active) {
      return
    }

    switch (e.code) {
      case &#x27;ArrowRight&#x27;:
      case &#x27;KeyD&#x27;:
        this.move(1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowUp&#x27;:
      case &#x27;KeyW&#x27;:
        this.move(0, 1)
        e.preventDefault()
        break
      case &#x27;ArrowLeft&#x27;:
      case &#x27;KeyA&#x27;:
        this.move(-1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowDown&#x27;:
      case &#x27;KeyS&#x27;:
        this.move(0, -1)
        e.preventDefault()
        break
      case &#x27;Space&#x27;:
      case &#x27;KeyZ&#x27;:
        if (e.shiftKey) {
          this.reset()
          this.bounce(this.refs.reset)
        } else {
          this.undo()
          this.bounce(this.refs.undo)
        }
        e.preventDefault()
        break
      case &#x27;Escape&#x27;:
        this.refs.board.blur()
        e.preventDefault()
        break
      case &#x27;Tab&#x27;:
        if (e.shiftKey) {
          this.refs.board.blur()
          this.refs.link.focus()
          e.preventDefault()
        }
        break
      default:
        break
    }
  }

  move (x, y) {
    let nextPos = []
    for (let actor of this.actors) {
      let nx = actor.props.x
      let ny = actor.props.y
      switch (actor.props.color) {
        case &#x27;red&#x27;:
          nx += x
          ny += y
          break
        case &#x27;blue&#x27;:
          nx += -x
          ny += -y
          break
        default:
          throw new Error(&#x27;Invalid color&#x27;)
      }

      let tile = this.tile(nx, ny)
      if (tile === &#x27; &#x27; || tile == null) {
        nx = actor.props.x
        ny = actor.props.y
      }

      nextPos.push({
        x: nx,
        y: ny,
      })
    }

    let finished = false
    while (!finished) {
      finished = true
      for (let i = 0; i &lt; nextPos.length; ++i) {
        for (let j = i + 1; j &lt; nextPos.length; ++j) {
          if (nextPos[i].x === nextPos[j].x &amp;&amp; nextPos[i].y === nextPos[j].y) {
            nextPos[i] = {
              x: this.actors[i].props.x,
              y: this.actors[i].props.y,
            }
            nextPos[j] = {
              x: this.actors[j].props.x,
              y: this.actors[j].props.y,
            }
            finished = false
          }
        }
      }
    }

    let anyChanged = false
    for (let i = 0; i &lt; nextPos.length; ++i) {
      let actor = this.actors[i]
      if (actor.props.x != nextPos[i].x || actor.props.y != nextPos[i].y) {
        anyChanged = true
      }

      actor.props = {
        ...actor.props,
        x: nextPos[i].x,
        y: nextPos[i].y,
      }
    }

    if (anyChanged) {
      this.history.push(nextPos)
      this.updateDisplay()
    }
  }

  undo () {
    this.history.pop()

    if (this.history.length != 0) {
      let positions = this.history[this.history.length - 1]
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: positions[i].x,
          y: positions[i].y,
        }
      }
    } else {
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: this.props.data.actors[i].x,
          y: this.props.data.actors[i].y,
        }
      }
    }

    this.updateDisplay()
  }

  bounce (element) {
    if (element.classList.contains(&#x27;one&#x27;)) {
      element.classList.remove(&#x27;one&#x27;)
      element.classList.add(&#x27;two&#x27;)
    } else {
      element.classList.remove(&#x27;two&#x27;)
      element.classList.add(&#x27;one&#x27;)
    }
  }

  reset () {
    if (this.history.length &lt; 20) {
      let interval = setInterval(() =&gt; {
        if (this.history.length == 0) {
          clearInterval(interval)
        } else {
          this.undo()
        }
      }, 100)
    } else {
      this.history = []
      this.undo()
    }
  }

  isSolved () {
    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile == &#x27;r&#x27; || tile == &#x27;b&#x27;) {
          let met = false
          for (let actor of this.actors) {
            if (actor.props.x == x &amp;&amp; actor.props.y == y) {
              if (tile == &#x27;r&#x27; &amp;&amp; actor.props.color == &#x27;red&#x27;) {
                met = true
                break
              } else if (tile == &#x27;b&#x27; &amp;&amp; actor.props.color == &#x27;blue&#x27;) {
                met = true
                break
              }
            }
          }
          if (!met) {
            return false
          }
        }
      }
    }

    return true
  }

  updateDisplay () {
    if (this.isSolved()) {
      this.classList.add(&#x27;solved&#x27;)
      this.classList.add(&#x27;was-solved&#x27;)
      if (this.history.length == this.props.data.optimalMoves) {
        this.classList.add(&#x27;was-optimal&#x27;)
      }
    } else {
      this.classList.remove(&#x27;solved&#x27;)
    }

    this.refs.moves.textContent = `${this.history.length}`

    if (this.refs.autoSolve.checked) {
      this.solve()
    }
  }

  solve () {
    let puzzle = &#x27;&#x27;
    for (let row of this.props.data.tiles) {
      puzzle += row + &#x27;\n&#x27;
    }
    puzzle += &#x27;\n&#x27;
    for (let actor of this.actors) {
      puzzle += `${actor.props.color == &#x27;red&#x27; ? &#x27;R&#x27; : &#x27;B&#x27;} ${actor.props.x} ${actor.props.y}\n`
    }

    let start = performance.now()
    let solution = wasm_bindgen.solve(puzzle)
    let end = performance.now()
    this.refs.solveTime.textContent = `${((end - start) &#x2F; 1000).toFixed(3)}s`

    let solutionHTML = &#x27;&#x27;

    solutionHTML += &#x27;&lt;table&gt;&#x27;
    for (let [index, move] of solution.entries()) {
      let emoji = &#x27;?&#x27;
      let direction = &#x27;???&#x27;
      switch (move) {
        case 0:
          direction = &#x27;Right&#x27;
          emoji = &#x27;➡️&#x27;
          break
        case 1:
          direction = &#x27;Up&#x27;
          emoji = &#x27;⬆️&#x27;
          break
        case 2:
          direction = &#x27;Left&#x27;
          emoji = &#x27;⬅️&#x27;
          break
        case 3:
          direction = &#x27;Down&#x27;
          emoji = &#x27;⬇️&#x27;
          break
      }
      solutionHTML += `&lt;tr&gt;&lt;td&gt;${index + 1}&lt;&#x2F;td&gt;&lt;td&gt;${direction}&lt;&#x2F;td&gt;&lt;td&gt;${emoji}&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;`
    }
    solutionHTML += &#x27;&lt;&#x2F;table&gt;&#x27;
    this.refs.solution.innerHTML = solutionHTML
  }

  import () {
    this.history = []

    this.classList.remove(&#x27;solved&#x27;)
    this.classList.remove(&#x27;was-solved&#x27;)
    this.classList.remove(&#x27;was-optimal&#x27;)

    let source = this.refs.importInput.value
    try {
      if (source.startsWith(PLAYGROUND_URL)) {
        let base64 = source.match(&#x2F;(\?|&amp;)data=(?&lt;base64&gt;[a-zA-Z0-9+\&#x2F;=]*)(&amp;|$)&#x2F;).groups.base64
        source = atob(base64)
      }

      this.props = {
        ...this.props,
        data: JSON.parse(source),
      }

      this.refs.importInput.classList.remove(&#x27;error&#x27;)
      this.updateDisplay()
    } catch (e) {
      this.refs.importInput.classList.add(&#x27;error&#x27;)
      console.log(e)
    }
  }

  copyLinkToClipboard () {
    let json = JSON.stringify(this.props.data)
    navigator.clipboard.writeText(`${PLAYGROUND_URL}?data=${btoa(json)}`)
  }
}
window.customElements.define(&#x27;anima-puzzle&#x27;, Puzzle)

&lt;&#x2F;script&gt;
&lt;template id=&quot;anima-puzzle-template&quot;&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;board-container&quot;&gt;
        &lt;h3 data-ref=&quot;name&quot;&gt;&lt;&#x2F;h3&gt;
        &lt;div class=&quot;controls&quot;&gt;
            &lt;div class=&quot;left&quot;&gt;
                &lt;button data-ref=&quot;undo&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;M7.18,4,8.6,5.44,6.06,8h9.71a6,6,0,0,1,0,12h-2V18h2a4,4,0,0,0,0-8H6.06L8.6,12.51,7.18,13.92,2.23,9Z&#x27; &#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
                &lt;button data-ref=&quot;reset&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M20,8 C18.5974037,5.04031171 15.536972,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 L12,21 C16.9705627,21 21,16.9705627 21,12 M21,3 L21,9 L15,9&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
            &lt;div class=&quot;right&quot;&gt;
                &lt;button data-ref=&quot;link&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M16.1251884,2.42026615 C16.9095797,1.63587482 18.1818354,1.63638083 18.9643331,2.41887857 L21.5811214,5.03566688 C22.3647464,5.81929188 22.3723943,7.08215115 21.5797338,7.87481161 L17.8748116,11.5797338 C17.0904203,12.3641252 15.8181646,12.3636192 15.0356669,11.5811214 L12.4188786,8.96433312 C11.6352536,8.18070812 11.6276057,6.91784885 12.4202662,6.12518839 L16.1251884,2.42026615 Z M6.12518839,12.4202662 C6.90957973,11.6358748 8.18183538,11.6363808 8.96433312,12.4188786 L11.5811214,15.0356669 C12.3647464,15.8192919 12.3723943,17.0821512 11.5797338,17.8748116 L7.87481161,21.5797338 C7.09042027,22.3641252 5.81816462,22.3636192 5.03566688,21.5811214 L2.41887857,18.9643331 C1.63525357,18.1807081 1.6276057,16.9178488 2.42026615,16.1251884 L6.12518839,12.4202662 Z M7,17 L17,7&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;board&quot; tabindex=&quot;0&quot;&gt;&lt;&#x2F;div&gt;
        &lt;span data-ref=&quot;focuser&quot;&gt;
            Click to play
        &lt;&#x2F;span&gt;
        &lt;div&gt;
            &lt;span data-ref=&quot;moves&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;optimal-threshold&quot;&gt; &#x2F; &lt;span data-ref=&quot;optimalMoves&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; moves
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div data-ref=&quot;controls&quot;&gt;
        &lt;div class=&quot;import&quot;&gt;
            &lt;input type=&quot;text&quot; data-ref=&quot;importInput&quot;&gt;
            &lt;button data-ref=&quot;importButton&quot;&gt;Import&lt;&#x2F;button&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;solution&quot;&gt;
            &lt;em&gt;Solve to find a solution&lt;&#x2F;em&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;solve&quot;&gt;
            &lt;input type=&quot;checkbox&quot; data-ref=&quot;autoSolve&quot;&#x2F;&gt;Auto
            &lt;button data-ref=&quot;solveButton&quot;&gt;Solve&lt;&#x2F;button&gt;
            &lt;span data-ref=&quot;solveTime&quot;&gt;0.000s&lt;&#x2F;span&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;style&gt;
        :host {
            display: flex;
            align-items: stretch;
            margin: 0.5rem auto;
            overflow-x: auto;
        }
        .spacer {
            flex-grow: 1;
        }
        .board-container {
            text-align: center;
            flex-shrink: 0;
            padding: 0 32px;
        }
        [data-ref=&quot;focuser&quot;] {
            display: inline-block;
            position: relative;
            top: -0.3rem;
            padding: 0 0.5rem;
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            z-index: 1;
            cursor: pointer;
            transform: scale(1);
            transition: transform 0.15s cubic-bezier(.18, .85, .67, 1.53);
        }
        :host(.active) [data-ref=&quot;focuser&quot;] {
            transform: scale(0.0);
            transition: transform 0.1s linear;
        }
        .optimal-threshold {
            display: none;
            font-weight: bold;
        }
        :host(.was-solved) .optimal-threshold {
            display: inline;
        }
        :host(.was-solved.was-optimal) .optimal-threshold::after {
            content: &quot; ✔&quot;;
            color: #006600;
        }
        .controls {
            display: flex;
            position: relative;
            height: 0;
            flex-direction: row;
            justify-content: space-between;
        }
        .controls .left, .controls .right {
            position: relative;
            top: -10px;
            display: flex;
            flex-direction: column;
        }
        .controls .left {
            left: -34px;
        }
        .controls .right {
            right: -34px;
        }
        @keyframes bounce1 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        @keyframes bounce2 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        [data-ref=&quot;reset&quot;], [data-ref=&quot;undo&quot;], [data-ref=&quot;link&quot;] {
            padding: 6px;
            width: 36px;
            height: 36px;
            border-radius: 18px;
            z-index: 3;
            animation-duration: 0.2s;
        }
        [data-ref=&quot;reset&quot;].one, [data-ref=&quot;undo&quot;].one, [data-ref=&quot;link&quot;].one {
            animation-name: bounce1;
        }
        [data-ref=&quot;reset&quot;].two, [data-ref=&quot;undo&quot;].two, [data-ref=&quot;link&quot;].two {
            animation-name: bounce2;
        }
        [data-ref=&quot;board&quot;] {
            background-color: #e8e8e8;
            background-image:
                linear-gradient(135deg, #cccccc 25%, transparent 25%),
                linear-gradient(225deg, #cccccc 25%, transparent 25%),
                linear-gradient(45deg, #cccccc 25%, transparent 25%),
                linear-gradient(315deg, #cccccc 25%, #e8e8e8 25%);
            background-position: 18px 0, 18px 0, 0 0, 0 0;
            background-size: 36px 36px;
            background-repeat: repeat;
            position: relative;
            border-radius: 0.75rem;
            border: 0.5rem solid transparent;
            cursor: pointer;
        }
        :host(.active) [data-ref=&quot;board&quot;] {
            cursor: default;
        }
        [data-ref=&quot;board&quot;]::before {
            content: &quot; &quot;;
            position: absolute;
            left: -0.5rem;
            right: -0.5rem;
            top: -0.5rem;
            bottom: -0.5rem;
            border-radius: 0.75rem;
            box-shadow: inset 0 0 7px rgba(0, 0, 0, 0.5);
        }
        [data-ref=&quot;board&quot;]::after {
            content: &quot; &quot;;
            display: block;
            background-image: url(&quot;data:image&#x2F;svg+xml,%3C%3Fxml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;%3F%3E%3Csvg width=&#x27;111.58&#x27; height=&#x27;80.006&#x27; version=&#x27;1.1&#x27; viewBox=&#x27;0 0 111.57827 80.006501&#x27; xml:space=&#x27;preserve&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;m110.45 22.652c-1.0152-0.76245-2.4134-0.75457-3.414 0.01636l-29.369 22.42-19.275-43.549c-0.91154-2.0522-4.2759-2.0522-5.1905 0l-19.501 44.05-29.113-22.898c-1.0055-0.78609-2.4116-0.8079-3.4359-0.053335-1.0279 0.76002-1.417 2.1164-0.95579 3.2989l20.226 52.262c0.4188 1.0928 1.4728 1.8085 2.6407 1.8085h65.462c1.177 0 2.2219-0.71275 2.6425-1.8085l20.224-52.262c0.45759-1.1825 0.0739-2.5243-0.94124-3.2843z&#x27; fill=&#x27;%23ffd82b&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;);
            background-position: center center;
            background-repeat: no-repeat;
            position: absolute;
            left: 50%;
            top: 50%;
            width: 120px;
            height: 100px;
            opacity: 0.8;
            filter: drop-shadow(0 0 1rem rgba(0, 0, 0, 0.5));
            transform-origin: center;
            transform: translate(-50%, -50%) scale(0.0);
            transition: transform 0.1s linear;
            z-index: 3;
        }
        :host(.solved) [data-ref=&quot;board&quot;]::after {
            transform: translate(-50%, -50%) scale(1.0);
            transition: transform 0.25s cubic-bezier(.18, .85, .67, 1.53);
        }
        .tile {
            position: absolute;
        }
        .tile::before {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        .tile::after {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            background-color: #fff;
            z-index: 1;
        }
        .tile.goal::after {
            background-image:
                linear-gradient(135deg, #fff 40%, transparent 40%),
                linear-gradient(225deg, #fff 40%, transparent 40%),
                linear-gradient(45deg, #fff 40%, transparent 40%),
                linear-gradient(315deg, #fff 40%, transparent 40%);
        }
        .tile.goal.red::after {
            background-color: #ff0046;
        }
        .tile.goal.blue::after {
            background-color: #0989B2;
        }
        button, input {
            padding: 0.25rem 0.5rem;
            background-color: #fff;
            border: 0;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            font-family: inherit;
            font-size: inherit;
            margin: 0.25rem;
        }
        button {
            cursor: pointer;
        }
        button:hover {
            background-color: #e0e0e0;
        }
        button:active {
            background-color: #ccc;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        }
        input[type=&quot;text&quot;] {
            width: 0;
            flex-grow: 1;
        }
        [data-ref=&quot;controls&quot;] {
            text-align: center;
            display: flex;
            flex-direction: column;
            margin-left: 0.5rem;
            margin-top: 1rem;
        }
        [data-ref=&quot;controls&quot;].hidden {
            display: none;
        }
        .import, .solve {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 0.5rem 0;
        }
        [data-ref=&quot;importInput&quot;].error {
            background: #ffb8cb;
        }
        [data-ref=&quot;solution&quot;] {
            min-width: 200px;
            height: 0;
            flex-grow: 1;
            text-align: center;
            overflow-y: auto;
        }
        [data-ref=&quot;solution&quot;] table {
            margin: 0 auto;
            font-family: monospace;
            font-weight: bold;
        }
        [data-ref=&quot;solution&quot;] td {
            padding: 0 0.5rem;
            text-align: left;
        }
        [data-ref=&quot;solution&quot;] td:first-child {
            text-align: right;
        }
        [data-ref=&quot;solveButton&quot;] {
            margin: 0 0.75rem;
        }
        [data-ref=&quot;solveTime&quot;] {
            flex-grow: 1;
        }
    &lt;&#x2F;style&gt;
&lt;&#x2F;template&gt;
&lt;template id=&quot;anima-actor-template&quot;&gt;
    &lt;style&gt;
        :host {
            display: block;
            position: absolute;
            transition: transform 0.15s;
            z-index: 2;
        }
        .color {
            display: block;
            position: absolute;
            overflow: hidden;
            width: 81%;
            height: 81%;
            border-radius: 0.4rem;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        .color::after {
            content: &quot; &quot;;
            position: absolute;
            width: 100%;
            height: 100%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        :host(.red) .color::after {
            background-image:
                linear-gradient(135deg, #ff0046 30%, transparent 30%),
                linear-gradient(225deg, #ff0046 30%, transparent 30%),
                linear-gradient(45deg, #ff0046 30%, transparent 30%),
                linear-gradient(315deg, #ff0046 30%, transparent 30%);
        }
        :host(.blue) .color::after {
            background-image:
                linear-gradient(135deg, #0989B2 30%, transparent 30%),
                linear-gradient(225deg, #0989B2 30%, transparent 30%),
                linear-gradient(45deg, #0989B2 30%, transparent 30%),
                linear-gradient(315deg, #0989B2 30%, transparent 30%);
        }
    &lt;&#x2F;style&gt;
    &lt;div class=&quot;color&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;








&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;true&quot;
&gt;
    {
    &quot;name&quot;: &quot;Square Dance&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; ....&quot;,
        &quot;.r.r.&quot;,
        &quot;.. ..&quot;,
        &quot;.r.r.&quot;,
        &quot;.... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 12
}
&lt;&#x2F;script&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div&gt;&lt;h3 id=&quot;controls&quot;&gt;Controls&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Move&lt;&#x2F;strong&gt;: WASD&#x2F;Arrow keys (desktop), swipe (mobile)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Undo&lt;&#x2F;strong&gt;: Space (desktop), top left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reset&lt;&#x2F;strong&gt;: Shift + Space (desktop), bottom left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Unfocus&lt;&#x2F;strong&gt;: Escape (desktop), click away, tap (mobile)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Anima Puzzles</title>
        <published>2021-10-10T00:00:00+00:00</published>
        <updated>2021-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/anima-puzzles/"/>
        <id>https://david.kolo.ski/blog/anima-puzzles/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/anima-puzzles/">&lt;div class=&quot;center&quot;&gt;&lt;div&gt;&lt;h3 id=&quot;controls&quot;&gt;Controls&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Move&lt;&#x2F;strong&gt;: WASD&#x2F;Arrow keys (desktop), swipe (mobile)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Undo&lt;&#x2F;strong&gt;: Space (desktop), top left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reset&lt;&#x2F;strong&gt;: Shift + Space (desktop), bottom left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Unfocus&lt;&#x2F;strong&gt;: Escape (desktop), click away, tap (mobile)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;script&gt;
    let wasm_bindgen;
(function() {
    const __exports = {};
    let wasm;

    let WASM_VECTOR_LEN = 0;

    let cachegetUint8Memory0 = null;
    function getUint8Memory0() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachegetUint8Memory0;
    }

    let cachedTextEncoder = new TextEncoder(&#x27;utf-8&#x27;);

    const encodeString = (typeof cachedTextEncoder.encodeInto === &#x27;function&#x27;
        ? function (arg, view) {
        return cachedTextEncoder.encodeInto(arg, view);
    }
        : function (arg, view) {
        const buf = cachedTextEncoder.encode(arg);
        view.set(buf);
        return {
            read: arg.length,
            written: buf.length
        };
    });

    function passStringToWasm0(arg, malloc, realloc) {

        if (realloc === undefined) {
            const buf = cachedTextEncoder.encode(arg);
            const ptr = malloc(buf.length);
            getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
            WASM_VECTOR_LEN = buf.length;
            return ptr;
        }

        let len = arg.length;
        let ptr = malloc(len);

        const mem = getUint8Memory0();

        let offset = 0;

        for (; offset &lt; len; offset++) {
            const code = arg.charCodeAt(offset);
            if (code &gt; 0x7F) break;
            mem[ptr + offset] = code;
        }

        if (offset !== len) {
            if (offset !== 0) {
                arg = arg.slice(offset);
            }
            ptr = realloc(ptr, len, len = offset + arg.length * 3);
            const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
            const ret = encodeString(arg, view);

            offset += ret.written;
        }

        WASM_VECTOR_LEN = offset;
        return ptr;
    }

    let cachegetInt32Memory0 = null;
    function getInt32Memory0() {
        if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
            cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
        }
        return cachegetInt32Memory0;
    }

    function getArrayI32FromWasm0(ptr, len) {
        return getInt32Memory0().subarray(ptr &#x2F; 4, ptr &#x2F; 4 + len);
    }
    &#x2F;**
    * @param {string} puzzle
    * @returns {Int32Array | undefined}
    *&#x2F;
    __exports.solve = function(puzzle) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(puzzle, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.solve(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr &#x2F; 4 + 0];
            var r1 = getInt32Memory0()[retptr &#x2F; 4 + 1];
            let v1;
            if (r0 !== 0) {
                v1 = getArrayI32FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 4);
            }
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    };

    async function load(module, imports) {
        if (typeof Response === &#x27;function&#x27; &amp;&amp; module instanceof Response) {
            if (typeof WebAssembly.instantiateStreaming === &#x27;function&#x27;) {
                try {
                    return await WebAssembly.instantiateStreaming(module, imports);

                } catch (e) {
                    if (module.headers.get(&#x27;Content-Type&#x27;) != &#x27;application&#x2F;wasm&#x27;) {
                        console.warn(&quot;`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application&#x2F;wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n&quot;, e);

                    } else {
                        throw e;
                    }
                }
            }

            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);

        } else {
            const instance = await WebAssembly.instantiate(module, imports);

            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };

            } else {
                return instance;
            }
        }
    }

    async function init(input) {
        if (typeof input === &#x27;undefined&#x27;) {
            let src;
            if (typeof document === &#x27;undefined&#x27;) {
                src = location.href;
            } else {
                src = document.currentScript.src;
            }
            input = src.replace(&#x2F;\.js$&#x2F;, &#x27;_bg.wasm&#x27;);
        }
        const imports = {};


        if (typeof input === &#x27;string&#x27; || (typeof Request === &#x27;function&#x27; &amp;&amp; input instanceof Request) || (typeof URL === &#x27;function&#x27; &amp;&amp; input instanceof URL)) {
            input = fetch(input);
        }



        const { instance, module } = await load(await input, imports);

        wasm = instance.exports;
        init.__wbindgen_wasm_module = module;

        return wasm;
    }

    wasm_bindgen = Object.assign(init, __exports);

})();

&lt;&#x2F;script&gt;

&lt;script&gt;
    const PLAYGROUND_URL = &#x27;http:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;anima-playground&#x27;

window.addEventListener(&#x27;load&#x27;, async (event) =&gt; {
  await wasm_bindgen(&#x27;&#x2F;wasm&#x2F;anima_solver_bg.wasm&#x27;)

  for (let json of document.getElementsByClassName(&#x27;anima-data&#x27;)) {
    let puzzle = {
      data: JSON.parse(json.text),
      scale: Number(json.getAttribute(&#x27;data-scale&#x27;)),
      controls: json.getAttribute(&#x27;data-controls&#x27;) === &#x27;true&#x27;
    }

    let params = new URL(document.location).searchParams

    let data = params.get(&#x27;data&#x27;)
    let scale = params.get(&#x27;scale&#x27;)
    let controls = params.get(&#x27;controls&#x27;)

    if (json.getAttribute(&#x27;data-dynamic&#x27;) === &#x27;true&#x27; &amp;&amp; data != null) {
      console.log(data)
      puzzle.data = JSON.parse(atob(data))
    }
    if (scale != null) {
      puzzle.scale = Number(scale)
    }
    if (controls === &#x27;true&#x27;) {
      puzzle.controls = true
    }

    json.insertAdjacentElement(
      &#x27;afterend&#x27;,
      new Puzzle(puzzle)
    )
  }
})

class CustomElement extends HTMLElement {
  constructor (name, props, data) {
    super()

    const template = document.getElementById(name + &#x27;-template&#x27;)
    this.attachShadow({ mode: &#x27;open&#x27; }).appendChild(template.content.cloneNode(true))

    this.refs = {}
    for (let ref of this.shadowRoot.querySelectorAll(&#x27;[data-ref]&#x27;)) {
      this.refs[ref.getAttribute(&#x27;data-ref&#x27;)] = ref
    }

    this._props = props || this.props
    Object.defineProperty(this, &#x27;props&#x27;, {
      get () {
        return this._props
      },
      set (value) {
        this._props = value
        this.update()
      }
    })

    if (data != null) {
      for (let key in data) {
        this[key] = data[key]
      }
    }

    if (this._props !== undefined) {
      this.update()
    }
  }

  update () {}
}

class Actor extends CustomElement {
  constructor (props) {
    super(&#x27;anima-actor&#x27;, props)
  }

  update () {
    switch (this.props.color) {
      case &#x27;red&#x27;:
        this.classList.add(&#x27;red&#x27;)
        break
      case &#x27;blue&#x27;:
        this.classList.add(&#x27;blue&#x27;)
        break
      default:
        throw new Error(`Invalid color ${this.props.color}`)
    }

    this.style.width = `${this.props.scale}px`
    this.style.height = `${this.props.scale}px`
    this.style.transform = `translate(${this.props.x * this.props.scale}px, ${(this.props.height - this.props.y - 1) * this.props.scale}px)`
  }
}
window.customElements.define(&#x27;anima-actor&#x27;, Actor)

class Puzzle extends CustomElement {
  constructor (props) {
    super(&#x27;anima-puzzle&#x27;, props)

    this.deactivate()

    this.refs.board.addEventListener(&#x27;focus&#x27;, e =&gt; this.activate())
    this.refs.board.addEventListener(&#x27;blur&#x27;, e =&gt; this.deactivate())

    this.touch = {}
    this.refs.board.addEventListener(&#x27;touchstart&#x27;, e =&gt; {
      if (this.active) {
        this.touch.startX = e.targetTouches[0].clientX
        this.touch.startY = e.targetTouches[0].clientY
        this.touch.done = false
        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchmove&#x27;, e =&gt; {
      if (this.active) {
        if (!this.touch.done) {
          let dx = e.targetTouches[0].clientX - this.touch.startX
          let dy = e.targetTouches[0].clientY - this.touch.startY

          const SWIPE_DIST = 40
          if (dx &lt; -SWIPE_DIST) {
            this.move(-1, 0)
            this.touch.done = true
          } else if (dx &gt; SWIPE_DIST) {
            this.move(1, 0)
            this.touch.done = true
          } else if (dy &lt; -SWIPE_DIST) {
            this.move(0, 1)
            this.touch.done = true
          } else if (dy &gt; SWIPE_DIST) {
            this.move(0, -1)
            this.touch.done = true
          }
        }

        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchend&#x27;, e =&gt; {
      if (this.active &amp;&amp; !this.touch.done) {
        this.refs.board.blur()
      }
    })

    document.addEventListener(&#x27;keydown&#x27;, e =&gt; this.onKeyDown(e))
    this.refs.focuser.addEventListener(&#x27;click&#x27;, e =&gt; this.refs.board.focus())

    this.refs.undo.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.undo.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.undo()
      this.bounce(this.refs.undo)
    })
    this.refs.reset.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.reset.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.reset()
      this.bounce(this.refs.reset)
    })
    this.refs.link.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.link.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.copyLinkToClipboard()
      this.bounce(this.refs.link)
    })

    this.refs.autoSolve.addEventListener(&#x27;change&#x27;, e =&gt; this.updateDisplay())
    this.refs.solveButton.addEventListener(&#x27;click&#x27;, e =&gt; this.solve())

    this.refs.importInput.addEventListener(&#x27;focus&#x27;, e =&gt; this.refs.importInput.select())
    this.refs.importButton.addEventListener(&#x27;click&#x27;, e =&gt; this.import())

    this.history = []
  }

  update () {
    this.refs.name.textContent = this.props.data.name

    this.refs.optimalMoves.textContent = `${this.props.data.optimalMoves}`

    this.refs.board.style.width = `${this.props.data.width * this.props.scale}px`
    this.refs.board.style.height = `${this.props.data.height * this.props.scale}px`

    this.refs.board.innerHTML = &#x27;&#x27;

    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile !== &#x27; &#x27;) {
          let div = document.createElement(&#x27;div&#x27;)

          div.classList.add(&#x27;tile&#x27;)
          div.style.width = `${this.props.scale}px`
          div.style.height = `${this.props.scale}px`
          div.style.left = `${x * this.props.scale}px`
          div.style.bottom = `${y * this.props.scale}px`

          if (tile === &#x27;r&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;red&#x27;)
          }
          if (tile === &#x27;b&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;blue&#x27;)
          }

          this.refs.board.append(div)
        }
      }
    }

    this.actors = []
    for (let dataActor of this.props.data.actors) {
      let actor = new Actor({
        x: dataActor.x,
        y: dataActor.y,
        color: dataActor.color,
        scale: this.props.scale,
        height: this.props.data.height,
      })
      this.actors.push(actor)
      this.refs.board.appendChild(actor)
    }

    if (!this.props.controls) {
      this.refs.controls.classList.add(&#x27;hidden&#x27;)
    }

    this.refs.importInput.value = JSON.stringify(this.props.data)
  }

  tile (x, y) {
    if (x &lt; 0 || x &gt;= this.props.data.width || y &lt; 0 || y &gt;= this.props.data.height) {
      return null
    } else {
      return this.props.data.tiles[this.props.data.height - y - 1][x]
    }
  }

  activate () {
    this.active = true
    this.classList.add(&#x27;active&#x27;)
  }

  deactivate () {
    this.active = false
    this.classList.remove(&#x27;active&#x27;)
  }

  onKeyDown (e) {
    if (!this.active) {
      return
    }

    switch (e.code) {
      case &#x27;ArrowRight&#x27;:
      case &#x27;KeyD&#x27;:
        this.move(1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowUp&#x27;:
      case &#x27;KeyW&#x27;:
        this.move(0, 1)
        e.preventDefault()
        break
      case &#x27;ArrowLeft&#x27;:
      case &#x27;KeyA&#x27;:
        this.move(-1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowDown&#x27;:
      case &#x27;KeyS&#x27;:
        this.move(0, -1)
        e.preventDefault()
        break
      case &#x27;Space&#x27;:
      case &#x27;KeyZ&#x27;:
        if (e.shiftKey) {
          this.reset()
          this.bounce(this.refs.reset)
        } else {
          this.undo()
          this.bounce(this.refs.undo)
        }
        e.preventDefault()
        break
      case &#x27;Escape&#x27;:
        this.refs.board.blur()
        e.preventDefault()
        break
      case &#x27;Tab&#x27;:
        if (e.shiftKey) {
          this.refs.board.blur()
          this.refs.link.focus()
          e.preventDefault()
        }
        break
      default:
        break
    }
  }

  move (x, y) {
    let nextPos = []
    for (let actor of this.actors) {
      let nx = actor.props.x
      let ny = actor.props.y
      switch (actor.props.color) {
        case &#x27;red&#x27;:
          nx += x
          ny += y
          break
        case &#x27;blue&#x27;:
          nx += -x
          ny += -y
          break
        default:
          throw new Error(&#x27;Invalid color&#x27;)
      }

      let tile = this.tile(nx, ny)
      if (tile === &#x27; &#x27; || tile == null) {
        nx = actor.props.x
        ny = actor.props.y
      }

      nextPos.push({
        x: nx,
        y: ny,
      })
    }

    let finished = false
    while (!finished) {
      finished = true
      for (let i = 0; i &lt; nextPos.length; ++i) {
        for (let j = i + 1; j &lt; nextPos.length; ++j) {
          if (nextPos[i].x === nextPos[j].x &amp;&amp; nextPos[i].y === nextPos[j].y) {
            nextPos[i] = {
              x: this.actors[i].props.x,
              y: this.actors[i].props.y,
            }
            nextPos[j] = {
              x: this.actors[j].props.x,
              y: this.actors[j].props.y,
            }
            finished = false
          }
        }
      }
    }

    let anyChanged = false
    for (let i = 0; i &lt; nextPos.length; ++i) {
      let actor = this.actors[i]
      if (actor.props.x != nextPos[i].x || actor.props.y != nextPos[i].y) {
        anyChanged = true
      }

      actor.props = {
        ...actor.props,
        x: nextPos[i].x,
        y: nextPos[i].y,
      }
    }

    if (anyChanged) {
      this.history.push(nextPos)
      this.updateDisplay()
    }
  }

  undo () {
    this.history.pop()

    if (this.history.length != 0) {
      let positions = this.history[this.history.length - 1]
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: positions[i].x,
          y: positions[i].y,
        }
      }
    } else {
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: this.props.data.actors[i].x,
          y: this.props.data.actors[i].y,
        }
      }
    }

    this.updateDisplay()
  }

  bounce (element) {
    if (element.classList.contains(&#x27;one&#x27;)) {
      element.classList.remove(&#x27;one&#x27;)
      element.classList.add(&#x27;two&#x27;)
    } else {
      element.classList.remove(&#x27;two&#x27;)
      element.classList.add(&#x27;one&#x27;)
    }
  }

  reset () {
    if (this.history.length &lt; 20) {
      let interval = setInterval(() =&gt; {
        if (this.history.length == 0) {
          clearInterval(interval)
        } else {
          this.undo()
        }
      }, 100)
    } else {
      this.history = []
      this.undo()
    }
  }

  isSolved () {
    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile == &#x27;r&#x27; || tile == &#x27;b&#x27;) {
          let met = false
          for (let actor of this.actors) {
            if (actor.props.x == x &amp;&amp; actor.props.y == y) {
              if (tile == &#x27;r&#x27; &amp;&amp; actor.props.color == &#x27;red&#x27;) {
                met = true
                break
              } else if (tile == &#x27;b&#x27; &amp;&amp; actor.props.color == &#x27;blue&#x27;) {
                met = true
                break
              }
            }
          }
          if (!met) {
            return false
          }
        }
      }
    }

    return true
  }

  updateDisplay () {
    if (this.isSolved()) {
      this.classList.add(&#x27;solved&#x27;)
      this.classList.add(&#x27;was-solved&#x27;)
      if (this.history.length == this.props.data.optimalMoves) {
        this.classList.add(&#x27;was-optimal&#x27;)
      }
    } else {
      this.classList.remove(&#x27;solved&#x27;)
    }

    this.refs.moves.textContent = `${this.history.length}`

    if (this.refs.autoSolve.checked) {
      this.solve()
    }
  }

  solve () {
    let puzzle = &#x27;&#x27;
    for (let row of this.props.data.tiles) {
      puzzle += row + &#x27;\n&#x27;
    }
    puzzle += &#x27;\n&#x27;
    for (let actor of this.actors) {
      puzzle += `${actor.props.color == &#x27;red&#x27; ? &#x27;R&#x27; : &#x27;B&#x27;} ${actor.props.x} ${actor.props.y}\n`
    }

    let start = performance.now()
    let solution = wasm_bindgen.solve(puzzle)
    let end = performance.now()
    this.refs.solveTime.textContent = `${((end - start) &#x2F; 1000).toFixed(3)}s`

    let solutionHTML = &#x27;&#x27;

    solutionHTML += &#x27;&lt;table&gt;&#x27;
    for (let [index, move] of solution.entries()) {
      let emoji = &#x27;?&#x27;
      let direction = &#x27;???&#x27;
      switch (move) {
        case 0:
          direction = &#x27;Right&#x27;
          emoji = &#x27;➡️&#x27;
          break
        case 1:
          direction = &#x27;Up&#x27;
          emoji = &#x27;⬆️&#x27;
          break
        case 2:
          direction = &#x27;Left&#x27;
          emoji = &#x27;⬅️&#x27;
          break
        case 3:
          direction = &#x27;Down&#x27;
          emoji = &#x27;⬇️&#x27;
          break
      }
      solutionHTML += `&lt;tr&gt;&lt;td&gt;${index + 1}&lt;&#x2F;td&gt;&lt;td&gt;${direction}&lt;&#x2F;td&gt;&lt;td&gt;${emoji}&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;`
    }
    solutionHTML += &#x27;&lt;&#x2F;table&gt;&#x27;
    this.refs.solution.innerHTML = solutionHTML
  }

  import () {
    this.history = []

    this.classList.remove(&#x27;solved&#x27;)
    this.classList.remove(&#x27;was-solved&#x27;)
    this.classList.remove(&#x27;was-optimal&#x27;)

    let source = this.refs.importInput.value
    try {
      if (source.startsWith(PLAYGROUND_URL)) {
        let base64 = source.match(&#x2F;(\?|&amp;)data=(?&lt;base64&gt;[a-zA-Z0-9+\&#x2F;=]*)(&amp;|$)&#x2F;).groups.base64
        source = atob(base64)
      }

      this.props = {
        ...this.props,
        data: JSON.parse(source),
      }

      this.refs.importInput.classList.remove(&#x27;error&#x27;)
      this.updateDisplay()
    } catch (e) {
      this.refs.importInput.classList.add(&#x27;error&#x27;)
      console.log(e)
    }
  }

  copyLinkToClipboard () {
    let json = JSON.stringify(this.props.data)
    navigator.clipboard.writeText(`${PLAYGROUND_URL}?data=${btoa(json)}`)
  }
}
window.customElements.define(&#x27;anima-puzzle&#x27;, Puzzle)

&lt;&#x2F;script&gt;
&lt;template id=&quot;anima-puzzle-template&quot;&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;board-container&quot;&gt;
        &lt;h3 data-ref=&quot;name&quot;&gt;&lt;&#x2F;h3&gt;
        &lt;div class=&quot;controls&quot;&gt;
            &lt;div class=&quot;left&quot;&gt;
                &lt;button data-ref=&quot;undo&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;M7.18,4,8.6,5.44,6.06,8h9.71a6,6,0,0,1,0,12h-2V18h2a4,4,0,0,0,0-8H6.06L8.6,12.51,7.18,13.92,2.23,9Z&#x27; &#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
                &lt;button data-ref=&quot;reset&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M20,8 C18.5974037,5.04031171 15.536972,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 L12,21 C16.9705627,21 21,16.9705627 21,12 M21,3 L21,9 L15,9&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
            &lt;div class=&quot;right&quot;&gt;
                &lt;button data-ref=&quot;link&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M16.1251884,2.42026615 C16.9095797,1.63587482 18.1818354,1.63638083 18.9643331,2.41887857 L21.5811214,5.03566688 C22.3647464,5.81929188 22.3723943,7.08215115 21.5797338,7.87481161 L17.8748116,11.5797338 C17.0904203,12.3641252 15.8181646,12.3636192 15.0356669,11.5811214 L12.4188786,8.96433312 C11.6352536,8.18070812 11.6276057,6.91784885 12.4202662,6.12518839 L16.1251884,2.42026615 Z M6.12518839,12.4202662 C6.90957973,11.6358748 8.18183538,11.6363808 8.96433312,12.4188786 L11.5811214,15.0356669 C12.3647464,15.8192919 12.3723943,17.0821512 11.5797338,17.8748116 L7.87481161,21.5797338 C7.09042027,22.3641252 5.81816462,22.3636192 5.03566688,21.5811214 L2.41887857,18.9643331 C1.63525357,18.1807081 1.6276057,16.9178488 2.42026615,16.1251884 L6.12518839,12.4202662 Z M7,17 L17,7&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;board&quot; tabindex=&quot;0&quot;&gt;&lt;&#x2F;div&gt;
        &lt;span data-ref=&quot;focuser&quot;&gt;
            Click to play
        &lt;&#x2F;span&gt;
        &lt;div&gt;
            &lt;span data-ref=&quot;moves&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;optimal-threshold&quot;&gt; &#x2F; &lt;span data-ref=&quot;optimalMoves&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; moves
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div data-ref=&quot;controls&quot;&gt;
        &lt;div class=&quot;import&quot;&gt;
            &lt;input type=&quot;text&quot; data-ref=&quot;importInput&quot;&gt;
            &lt;button data-ref=&quot;importButton&quot;&gt;Import&lt;&#x2F;button&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;solution&quot;&gt;
            &lt;em&gt;Solve to find a solution&lt;&#x2F;em&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;solve&quot;&gt;
            &lt;input type=&quot;checkbox&quot; data-ref=&quot;autoSolve&quot;&#x2F;&gt;Auto
            &lt;button data-ref=&quot;solveButton&quot;&gt;Solve&lt;&#x2F;button&gt;
            &lt;span data-ref=&quot;solveTime&quot;&gt;0.000s&lt;&#x2F;span&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;style&gt;
        :host {
            display: flex;
            align-items: stretch;
            margin: 0.5rem auto;
            overflow-x: auto;
        }
        .spacer {
            flex-grow: 1;
        }
        .board-container {
            text-align: center;
            flex-shrink: 0;
            padding: 0 32px;
        }
        [data-ref=&quot;focuser&quot;] {
            display: inline-block;
            position: relative;
            top: -0.3rem;
            padding: 0 0.5rem;
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            z-index: 1;
            cursor: pointer;
            transform: scale(1);
            transition: transform 0.15s cubic-bezier(.18, .85, .67, 1.53);
        }
        :host(.active) [data-ref=&quot;focuser&quot;] {
            transform: scale(0.0);
            transition: transform 0.1s linear;
        }
        .optimal-threshold {
            display: none;
            font-weight: bold;
        }
        :host(.was-solved) .optimal-threshold {
            display: inline;
        }
        :host(.was-solved.was-optimal) .optimal-threshold::after {
            content: &quot; ✔&quot;;
            color: #006600;
        }
        .controls {
            display: flex;
            position: relative;
            height: 0;
            flex-direction: row;
            justify-content: space-between;
        }
        .controls .left, .controls .right {
            position: relative;
            top: -10px;
            display: flex;
            flex-direction: column;
        }
        .controls .left {
            left: -34px;
        }
        .controls .right {
            right: -34px;
        }
        @keyframes bounce1 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        @keyframes bounce2 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        [data-ref=&quot;reset&quot;], [data-ref=&quot;undo&quot;], [data-ref=&quot;link&quot;] {
            padding: 6px;
            width: 36px;
            height: 36px;
            border-radius: 18px;
            z-index: 3;
            animation-duration: 0.2s;
        }
        [data-ref=&quot;reset&quot;].one, [data-ref=&quot;undo&quot;].one, [data-ref=&quot;link&quot;].one {
            animation-name: bounce1;
        }
        [data-ref=&quot;reset&quot;].two, [data-ref=&quot;undo&quot;].two, [data-ref=&quot;link&quot;].two {
            animation-name: bounce2;
        }
        [data-ref=&quot;board&quot;] {
            background-color: #e8e8e8;
            background-image:
                linear-gradient(135deg, #cccccc 25%, transparent 25%),
                linear-gradient(225deg, #cccccc 25%, transparent 25%),
                linear-gradient(45deg, #cccccc 25%, transparent 25%),
                linear-gradient(315deg, #cccccc 25%, #e8e8e8 25%);
            background-position: 18px 0, 18px 0, 0 0, 0 0;
            background-size: 36px 36px;
            background-repeat: repeat;
            position: relative;
            border-radius: 0.75rem;
            border: 0.5rem solid transparent;
            cursor: pointer;
        }
        :host(.active) [data-ref=&quot;board&quot;] {
            cursor: default;
        }
        [data-ref=&quot;board&quot;]::before {
            content: &quot; &quot;;
            position: absolute;
            left: -0.5rem;
            right: -0.5rem;
            top: -0.5rem;
            bottom: -0.5rem;
            border-radius: 0.75rem;
            box-shadow: inset 0 0 7px rgba(0, 0, 0, 0.5);
        }
        [data-ref=&quot;board&quot;]::after {
            content: &quot; &quot;;
            display: block;
            background-image: url(&quot;data:image&#x2F;svg+xml,%3C%3Fxml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;%3F%3E%3Csvg width=&#x27;111.58&#x27; height=&#x27;80.006&#x27; version=&#x27;1.1&#x27; viewBox=&#x27;0 0 111.57827 80.006501&#x27; xml:space=&#x27;preserve&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;m110.45 22.652c-1.0152-0.76245-2.4134-0.75457-3.414 0.01636l-29.369 22.42-19.275-43.549c-0.91154-2.0522-4.2759-2.0522-5.1905 0l-19.501 44.05-29.113-22.898c-1.0055-0.78609-2.4116-0.8079-3.4359-0.053335-1.0279 0.76002-1.417 2.1164-0.95579 3.2989l20.226 52.262c0.4188 1.0928 1.4728 1.8085 2.6407 1.8085h65.462c1.177 0 2.2219-0.71275 2.6425-1.8085l20.224-52.262c0.45759-1.1825 0.0739-2.5243-0.94124-3.2843z&#x27; fill=&#x27;%23ffd82b&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;);
            background-position: center center;
            background-repeat: no-repeat;
            position: absolute;
            left: 50%;
            top: 50%;
            width: 120px;
            height: 100px;
            opacity: 0.8;
            filter: drop-shadow(0 0 1rem rgba(0, 0, 0, 0.5));
            transform-origin: center;
            transform: translate(-50%, -50%) scale(0.0);
            transition: transform 0.1s linear;
            z-index: 3;
        }
        :host(.solved) [data-ref=&quot;board&quot;]::after {
            transform: translate(-50%, -50%) scale(1.0);
            transition: transform 0.25s cubic-bezier(.18, .85, .67, 1.53);
        }
        .tile {
            position: absolute;
        }
        .tile::before {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        .tile::after {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            background-color: #fff;
            z-index: 1;
        }
        .tile.goal::after {
            background-image:
                linear-gradient(135deg, #fff 40%, transparent 40%),
                linear-gradient(225deg, #fff 40%, transparent 40%),
                linear-gradient(45deg, #fff 40%, transparent 40%),
                linear-gradient(315deg, #fff 40%, transparent 40%);
        }
        .tile.goal.red::after {
            background-color: #ff0046;
        }
        .tile.goal.blue::after {
            background-color: #0989B2;
        }
        button, input {
            padding: 0.25rem 0.5rem;
            background-color: #fff;
            border: 0;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            font-family: inherit;
            font-size: inherit;
            margin: 0.25rem;
        }
        button {
            cursor: pointer;
        }
        button:hover {
            background-color: #e0e0e0;
        }
        button:active {
            background-color: #ccc;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        }
        input[type=&quot;text&quot;] {
            width: 0;
            flex-grow: 1;
        }
        [data-ref=&quot;controls&quot;] {
            text-align: center;
            display: flex;
            flex-direction: column;
            margin-left: 0.5rem;
            margin-top: 1rem;
        }
        [data-ref=&quot;controls&quot;].hidden {
            display: none;
        }
        .import, .solve {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 0.5rem 0;
        }
        [data-ref=&quot;importInput&quot;].error {
            background: #ffb8cb;
        }
        [data-ref=&quot;solution&quot;] {
            min-width: 200px;
            height: 0;
            flex-grow: 1;
            text-align: center;
            overflow-y: auto;
        }
        [data-ref=&quot;solution&quot;] table {
            margin: 0 auto;
            font-family: monospace;
            font-weight: bold;
        }
        [data-ref=&quot;solution&quot;] td {
            padding: 0 0.5rem;
            text-align: left;
        }
        [data-ref=&quot;solution&quot;] td:first-child {
            text-align: right;
        }
        [data-ref=&quot;solveButton&quot;] {
            margin: 0 0.75rem;
        }
        [data-ref=&quot;solveTime&quot;] {
            flex-grow: 1;
        }
    &lt;&#x2F;style&gt;
&lt;&#x2F;template&gt;
&lt;template id=&quot;anima-actor-template&quot;&gt;
    &lt;style&gt;
        :host {
            display: block;
            position: absolute;
            transition: transform 0.15s;
            z-index: 2;
        }
        .color {
            display: block;
            position: absolute;
            overflow: hidden;
            width: 81%;
            height: 81%;
            border-radius: 0.4rem;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        .color::after {
            content: &quot; &quot;;
            position: absolute;
            width: 100%;
            height: 100%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        :host(.red) .color::after {
            background-image:
                linear-gradient(135deg, #ff0046 30%, transparent 30%),
                linear-gradient(225deg, #ff0046 30%, transparent 30%),
                linear-gradient(45deg, #ff0046 30%, transparent 30%),
                linear-gradient(315deg, #ff0046 30%, transparent 30%);
        }
        :host(.blue) .color::after {
            background-image:
                linear-gradient(135deg, #0989B2 30%, transparent 30%),
                linear-gradient(225deg, #0989B2 30%, transparent 30%),
                linear-gradient(45deg, #0989B2 30%, transparent 30%),
                linear-gradient(315deg, #0989B2 30%, transparent 30%);
        }
    &lt;&#x2F;style&gt;
    &lt;div class=&quot;color&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Line Dance&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 1,
    &quot;tiles&quot;: [
        &quot;..r&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 0
        }
    ],
    &quot;optimalMoves&quot;: 2
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;U-Turn&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;r .&quot;,
        &quot;. .&quot;,
        &quot;...&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Spiral&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.....&quot;,
        &quot;.   .&quot;,
        &quot;... .&quot;,
        &quot;    .&quot;,
        &quot;r....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 16
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Single File&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;.. rr&quot;,
        &quot;.. rr&quot;,
        &quot; ... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 16
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Oblique&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; ... &quot;,
        &quot;..r..&quot;,
        &quot;.r.r.&quot;,
        &quot;..r..&quot;,
        &quot; ... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 10
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Cycle&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;..r..&quot;,
        &quot;.   .&quot;,
        &quot;r   r&quot;,
        &quot;.   .&quot;,
        &quot;..r..&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 4
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 4
        }
    ],
    &quot;optimalMoves&quot;: 13
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Octothorpe&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; . . &quot;,
        &quot;.rrr.&quot;,
        &quot; r r &quot;,
        &quot;.rrr.&quot;,
        &quot; . . &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 4
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 4
        }
    ],
    &quot;optimalMoves&quot;: 7
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Square Dance&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; ....&quot;,
        &quot;.r.r.&quot;,
        &quot;.. ..&quot;,
        &quot;.r.r.&quot;,
        &quot;.... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 12
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Centralize&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 7,
    &quot;tiles&quot;: [
        &quot; ... &quot;,
        &quot; . . &quot;,
        &quot;.r.r.&quot;,
        &quot;. . .&quot;,
        &quot;.r.r.&quot;,
        &quot; . . &quot;,
        &quot; ... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 6
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 6
        }
    ],
    &quot;optimalMoves&quot;: 15
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Unwind&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;....b&quot;,
        &quot;.    &quot;,
        &quot;. ...&quot;,
        &quot;.   .&quot;,
        &quot;.....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 16
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Spinlock&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.....&quot;,
        &quot;. b .&quot;,
        &quot;.b.b.&quot;,
        &quot;. b .&quot;,
        &quot;.....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 4
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 4
        }
    ],
    &quot;optimalMoves&quot;: 11
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Gimbal Lock&quot;,
    &quot;width&quot;: 7,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;... ...&quot;,
        &quot;. r . .&quot;,
        &quot;... ..b&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 6,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Deadlock&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot; . &quot;,
        &quot;br.&quot;,
        &quot; b &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Sideswipe&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; ... &quot;,
        &quot;.r.r.&quot;,
        &quot;.....&quot;,
        &quot;.b.b.&quot;,
        &quot; ... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 10
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Untangle&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 4,
    &quot;tiles&quot;: [
        &quot;...  &quot;,
        &quot;b r..&quot;,
        &quot;..r b&quot;,
        &quot;  ...&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 4,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 11
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Traffic Circle&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot; b.r &quot;,
        &quot; . . &quot;,
        &quot;r...b&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 8
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Close Quarters&quot;,
    &quot;width&quot;: 4,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;.rb.&quot;,
        &quot;.br.&quot;,
        &quot; .. &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 1
        }
    ],
    &quot;optimalMoves&quot;: 11
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Fractal&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 7,
    &quot;tiles&quot;: [
        &quot;  r  &quot;,
        &quot; ... &quot;,
        &quot;. b .&quot;,
        &quot;.....&quot;,
        &quot;. r .&quot;,
        &quot; ... &quot;,
        &quot;  b  &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 4
        }
    ],
    &quot;optimalMoves&quot;: 13
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Box Step&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;.r.b.&quot;,
        &quot;.....&quot;,
        &quot;.b.r.&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 0
        }
    ],
    &quot;optimalMoves&quot;: 15
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Inversion&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 7,
    &quot;tiles&quot;: [
        &quot;.r.&quot;,
        &quot;. .&quot;,
        &quot;.b.&quot;,
        &quot;. .&quot;,
        &quot;.b.&quot;,
        &quot;. .&quot;,
        &quot;.r.&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 4
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 6
        }
    ],
    &quot;optimalMoves&quot;: 14
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Free Radical&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.....&quot;,
        &quot;..r..&quot;,
        &quot;.r.r.&quot;,
        &quot;..r..&quot;,
        &quot;.....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 19
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Side Channel&quot;,
    &quot;width&quot;: 4,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.b..&quot;,
        &quot;....&quot;,
        &quot;   .&quot;,
        &quot;....&quot;,
        &quot;r.r.&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 4
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 4
        }
    ],
    &quot;optimalMoves&quot;: 20
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Antiparticle&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.....&quot;,
        &quot;.r.r.&quot;,
        &quot;.....&quot;,
        &quot;.r.r.&quot;,
        &quot;.....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 22
}
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Intelligent brute forcing</title>
        <published>2021-10-10T00:00:00+00:00</published>
        <updated>2021-10-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/intelligent-brute-forcing/"/>
        <id>https://david.kolo.ski/blog/intelligent-brute-forcing/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/intelligent-brute-forcing/">&lt;h2 id=&quot;a-little-background&quot;&gt;A little background&lt;&#x2F;h2&gt;
&lt;p&gt;Back in college, I played a lot of &lt;em&gt;puzzle games&lt;&#x2F;em&gt;. When I talk about these kinds of games, I&#x27;m going
to be referring to a very specific subset of puzzle game. Some examples include:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;353540&#x2F;Stephens_Sausage_Roll&#x2F;&quot;&gt;Stephen&#x27;s Sausage Roll&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;207570&#x2F;English_Country_Tune&#x2F;&quot;&gt;English Country Tune&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;290260&#x2F;Sokobond&#x2F;&quot;&gt;Sokobond&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was also fortunate to take Data Structures at RPI, where at the time professor Cutler (hi Barb!)
had a yearly assignment&#x2F;competition where students to write a &lt;em&gt;puzzle solver&lt;&#x2F;em&gt;. The game changed
every year, and for my year the game was
&lt;a href=&quot;https:&#x2F;&#x2F;www.cs.rpi.edu&#x2F;academics&#x2F;courses&#x2F;fall13&#x2F;csci1200&#x2F;hw&#x2F;06_ricochet_robots&#x2F;hw.pdf&quot;&gt;Ricochet Robots&lt;&#x2F;a&gt;,
which is essentially a sliding ice puzzle with multiple players. I really enjoyed the assignment
(and won the competition!) and continued to enter the competition as a TA. I probably went too hard
on it in retrospect; hopefully I wasn&#x27;t too much of a nuisance!&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, the purpose of the assignment was to get everyone familiar with recursion and depth-first
search. Your program would be given the initial state of the game as well as a maximum recursion
depth. The goal was to return either the shortest possible solution, or all possible solutions of
minimum length. For the competition, you may or may not be passed a depth limit and might also be
given puzzles that had no solution. I learned a lot and had a lot of fun, so maybe you will too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;abstract&quot;&gt;Abstract&lt;&#x2F;h2&gt;
&lt;p&gt;In this article, I will present a new puzzle game and demonstrate techniques I used to write a fast,
practical solver for it. Topics covered will include breadth-first&#x2F;A* search, memoization,
optimization, and strategies specific to NP-hard and NP-complete puzzle games. If you spot any
problems or want to suggest any improvements, please file an issue or submit a PR
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;davidkoloski_me&quot;&gt;on GitHub&lt;&#x2F;a&gt;. I will present benchmarks to validate my
results throughout. While the percentage changes should be relatively accurate, the absolute timings
may vary throughout as they are taken at different times with different amounts of baseline noise.
The pre-&#x2F;post- change benchmarks are always run back-to-back to ensure that they are run in the same
environment and provide accurate percentage change.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-play-a-game&quot;&gt;Let&#x27;s play a game&lt;&#x2F;h2&gt;
&lt;p&gt;The game we&#x27;re going to play is called &quot;Anima&quot;. It uses a grid of tiles, each of which is either
passable or impassable. Some tiles are marked with a small colored diamond; these tiles are &lt;em&gt;goals&lt;&#x2F;em&gt;
and to solve the puzzle we have to cover all of these tiles simultaneously with &lt;em&gt;actors&lt;&#x2F;em&gt; of the same
color. Actors are blocks, at most one per tile, that can be moved around the grid on the passable
tiles. Each turn, you may move the actors in one of the four cardinal directions and they all slide
together. Let&#x27;s do a few to get a feel for it:&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div&gt;&lt;h3 id=&quot;controls&quot;&gt;Controls&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Move&lt;&#x2F;strong&gt;: WASD&#x2F;Arrow keys (desktop), swipe (mobile)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Undo&lt;&#x2F;strong&gt;: Space (desktop), top left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Reset&lt;&#x2F;strong&gt;: Shift + Space (desktop), bottom left button&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Unfocus&lt;&#x2F;strong&gt;: Escape (desktop), click away, tap (mobile)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;

&lt;script&gt;
    let wasm_bindgen;
(function() {
    const __exports = {};
    let wasm;

    let WASM_VECTOR_LEN = 0;

    let cachegetUint8Memory0 = null;
    function getUint8Memory0() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachegetUint8Memory0;
    }

    let cachedTextEncoder = new TextEncoder(&#x27;utf-8&#x27;);

    const encodeString = (typeof cachedTextEncoder.encodeInto === &#x27;function&#x27;
        ? function (arg, view) {
        return cachedTextEncoder.encodeInto(arg, view);
    }
        : function (arg, view) {
        const buf = cachedTextEncoder.encode(arg);
        view.set(buf);
        return {
            read: arg.length,
            written: buf.length
        };
    });

    function passStringToWasm0(arg, malloc, realloc) {

        if (realloc === undefined) {
            const buf = cachedTextEncoder.encode(arg);
            const ptr = malloc(buf.length);
            getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
            WASM_VECTOR_LEN = buf.length;
            return ptr;
        }

        let len = arg.length;
        let ptr = malloc(len);

        const mem = getUint8Memory0();

        let offset = 0;

        for (; offset &lt; len; offset++) {
            const code = arg.charCodeAt(offset);
            if (code &gt; 0x7F) break;
            mem[ptr + offset] = code;
        }

        if (offset !== len) {
            if (offset !== 0) {
                arg = arg.slice(offset);
            }
            ptr = realloc(ptr, len, len = offset + arg.length * 3);
            const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
            const ret = encodeString(arg, view);

            offset += ret.written;
        }

        WASM_VECTOR_LEN = offset;
        return ptr;
    }

    let cachegetInt32Memory0 = null;
    function getInt32Memory0() {
        if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
            cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
        }
        return cachegetInt32Memory0;
    }

    function getArrayI32FromWasm0(ptr, len) {
        return getInt32Memory0().subarray(ptr &#x2F; 4, ptr &#x2F; 4 + len);
    }
    &#x2F;**
    * @param {string} puzzle
    * @returns {Int32Array | undefined}
    *&#x2F;
    __exports.solve = function(puzzle) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(puzzle, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.solve(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr &#x2F; 4 + 0];
            var r1 = getInt32Memory0()[retptr &#x2F; 4 + 1];
            let v1;
            if (r0 !== 0) {
                v1 = getArrayI32FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 4);
            }
            return v1;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    };

    async function load(module, imports) {
        if (typeof Response === &#x27;function&#x27; &amp;&amp; module instanceof Response) {
            if (typeof WebAssembly.instantiateStreaming === &#x27;function&#x27;) {
                try {
                    return await WebAssembly.instantiateStreaming(module, imports);

                } catch (e) {
                    if (module.headers.get(&#x27;Content-Type&#x27;) != &#x27;application&#x2F;wasm&#x27;) {
                        console.warn(&quot;`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application&#x2F;wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n&quot;, e);

                    } else {
                        throw e;
                    }
                }
            }

            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);

        } else {
            const instance = await WebAssembly.instantiate(module, imports);

            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };

            } else {
                return instance;
            }
        }
    }

    async function init(input) {
        if (typeof input === &#x27;undefined&#x27;) {
            let src;
            if (typeof document === &#x27;undefined&#x27;) {
                src = location.href;
            } else {
                src = document.currentScript.src;
            }
            input = src.replace(&#x2F;\.js$&#x2F;, &#x27;_bg.wasm&#x27;);
        }
        const imports = {};


        if (typeof input === &#x27;string&#x27; || (typeof Request === &#x27;function&#x27; &amp;&amp; input instanceof Request) || (typeof URL === &#x27;function&#x27; &amp;&amp; input instanceof URL)) {
            input = fetch(input);
        }



        const { instance, module } = await load(await input, imports);

        wasm = instance.exports;
        init.__wbindgen_wasm_module = module;

        return wasm;
    }

    wasm_bindgen = Object.assign(init, __exports);

})();

&lt;&#x2F;script&gt;

&lt;script&gt;
    const PLAYGROUND_URL = &#x27;http:&#x2F;&#x2F;david.kolo.ski&#x2F;blog&#x2F;anima-playground&#x27;

window.addEventListener(&#x27;load&#x27;, async (event) =&gt; {
  await wasm_bindgen(&#x27;&#x2F;wasm&#x2F;anima_solver_bg.wasm&#x27;)

  for (let json of document.getElementsByClassName(&#x27;anima-data&#x27;)) {
    let puzzle = {
      data: JSON.parse(json.text),
      scale: Number(json.getAttribute(&#x27;data-scale&#x27;)),
      controls: json.getAttribute(&#x27;data-controls&#x27;) === &#x27;true&#x27;
    }

    let params = new URL(document.location).searchParams

    let data = params.get(&#x27;data&#x27;)
    let scale = params.get(&#x27;scale&#x27;)
    let controls = params.get(&#x27;controls&#x27;)

    if (json.getAttribute(&#x27;data-dynamic&#x27;) === &#x27;true&#x27; &amp;&amp; data != null) {
      console.log(data)
      puzzle.data = JSON.parse(atob(data))
    }
    if (scale != null) {
      puzzle.scale = Number(scale)
    }
    if (controls === &#x27;true&#x27;) {
      puzzle.controls = true
    }

    json.insertAdjacentElement(
      &#x27;afterend&#x27;,
      new Puzzle(puzzle)
    )
  }
})

class CustomElement extends HTMLElement {
  constructor (name, props, data) {
    super()

    const template = document.getElementById(name + &#x27;-template&#x27;)
    this.attachShadow({ mode: &#x27;open&#x27; }).appendChild(template.content.cloneNode(true))

    this.refs = {}
    for (let ref of this.shadowRoot.querySelectorAll(&#x27;[data-ref]&#x27;)) {
      this.refs[ref.getAttribute(&#x27;data-ref&#x27;)] = ref
    }

    this._props = props || this.props
    Object.defineProperty(this, &#x27;props&#x27;, {
      get () {
        return this._props
      },
      set (value) {
        this._props = value
        this.update()
      }
    })

    if (data != null) {
      for (let key in data) {
        this[key] = data[key]
      }
    }

    if (this._props !== undefined) {
      this.update()
    }
  }

  update () {}
}

class Actor extends CustomElement {
  constructor (props) {
    super(&#x27;anima-actor&#x27;, props)
  }

  update () {
    switch (this.props.color) {
      case &#x27;red&#x27;:
        this.classList.add(&#x27;red&#x27;)
        break
      case &#x27;blue&#x27;:
        this.classList.add(&#x27;blue&#x27;)
        break
      default:
        throw new Error(`Invalid color ${this.props.color}`)
    }

    this.style.width = `${this.props.scale}px`
    this.style.height = `${this.props.scale}px`
    this.style.transform = `translate(${this.props.x * this.props.scale}px, ${(this.props.height - this.props.y - 1) * this.props.scale}px)`
  }
}
window.customElements.define(&#x27;anima-actor&#x27;, Actor)

class Puzzle extends CustomElement {
  constructor (props) {
    super(&#x27;anima-puzzle&#x27;, props)

    this.deactivate()

    this.refs.board.addEventListener(&#x27;focus&#x27;, e =&gt; this.activate())
    this.refs.board.addEventListener(&#x27;blur&#x27;, e =&gt; this.deactivate())

    this.touch = {}
    this.refs.board.addEventListener(&#x27;touchstart&#x27;, e =&gt; {
      if (this.active) {
        this.touch.startX = e.targetTouches[0].clientX
        this.touch.startY = e.targetTouches[0].clientY
        this.touch.done = false
        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchmove&#x27;, e =&gt; {
      if (this.active) {
        if (!this.touch.done) {
          let dx = e.targetTouches[0].clientX - this.touch.startX
          let dy = e.targetTouches[0].clientY - this.touch.startY

          const SWIPE_DIST = 40
          if (dx &lt; -SWIPE_DIST) {
            this.move(-1, 0)
            this.touch.done = true
          } else if (dx &gt; SWIPE_DIST) {
            this.move(1, 0)
            this.touch.done = true
          } else if (dy &lt; -SWIPE_DIST) {
            this.move(0, 1)
            this.touch.done = true
          } else if (dy &gt; SWIPE_DIST) {
            this.move(0, -1)
            this.touch.done = true
          }
        }

        e.preventDefault()
      }
    })
    this.refs.board.addEventListener(&#x27;touchend&#x27;, e =&gt; {
      if (this.active &amp;&amp; !this.touch.done) {
        this.refs.board.blur()
      }
    })

    document.addEventListener(&#x27;keydown&#x27;, e =&gt; this.onKeyDown(e))
    this.refs.focuser.addEventListener(&#x27;click&#x27;, e =&gt; this.refs.board.focus())

    this.refs.undo.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.undo.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.undo()
      this.bounce(this.refs.undo)
    })
    this.refs.reset.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.reset.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.reset()
      this.bounce(this.refs.reset)
    })
    this.refs.link.addEventListener(&#x27;focus&#x27;, e =&gt; {
      e.preventDefault()
      if (e.relatedTarget == this.refs.board) {
        this.refs.board.focus()
      }
    })
    this.refs.link.addEventListener(&#x27;click&#x27;, e =&gt; {
      this.copyLinkToClipboard()
      this.bounce(this.refs.link)
    })

    this.refs.autoSolve.addEventListener(&#x27;change&#x27;, e =&gt; this.updateDisplay())
    this.refs.solveButton.addEventListener(&#x27;click&#x27;, e =&gt; this.solve())

    this.refs.importInput.addEventListener(&#x27;focus&#x27;, e =&gt; this.refs.importInput.select())
    this.refs.importButton.addEventListener(&#x27;click&#x27;, e =&gt; this.import())

    this.history = []
  }

  update () {
    this.refs.name.textContent = this.props.data.name

    this.refs.optimalMoves.textContent = `${this.props.data.optimalMoves}`

    this.refs.board.style.width = `${this.props.data.width * this.props.scale}px`
    this.refs.board.style.height = `${this.props.data.height * this.props.scale}px`

    this.refs.board.innerHTML = &#x27;&#x27;

    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile !== &#x27; &#x27;) {
          let div = document.createElement(&#x27;div&#x27;)

          div.classList.add(&#x27;tile&#x27;)
          div.style.width = `${this.props.scale}px`
          div.style.height = `${this.props.scale}px`
          div.style.left = `${x * this.props.scale}px`
          div.style.bottom = `${y * this.props.scale}px`

          if (tile === &#x27;r&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;red&#x27;)
          }
          if (tile === &#x27;b&#x27;) {
            div.classList.add(&#x27;goal&#x27;)
            div.classList.add(&#x27;blue&#x27;)
          }

          this.refs.board.append(div)
        }
      }
    }

    this.actors = []
    for (let dataActor of this.props.data.actors) {
      let actor = new Actor({
        x: dataActor.x,
        y: dataActor.y,
        color: dataActor.color,
        scale: this.props.scale,
        height: this.props.data.height,
      })
      this.actors.push(actor)
      this.refs.board.appendChild(actor)
    }

    if (!this.props.controls) {
      this.refs.controls.classList.add(&#x27;hidden&#x27;)
    }

    this.refs.importInput.value = JSON.stringify(this.props.data)
  }

  tile (x, y) {
    if (x &lt; 0 || x &gt;= this.props.data.width || y &lt; 0 || y &gt;= this.props.data.height) {
      return null
    } else {
      return this.props.data.tiles[this.props.data.height - y - 1][x]
    }
  }

  activate () {
    this.active = true
    this.classList.add(&#x27;active&#x27;)
  }

  deactivate () {
    this.active = false
    this.classList.remove(&#x27;active&#x27;)
  }

  onKeyDown (e) {
    if (!this.active) {
      return
    }

    switch (e.code) {
      case &#x27;ArrowRight&#x27;:
      case &#x27;KeyD&#x27;:
        this.move(1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowUp&#x27;:
      case &#x27;KeyW&#x27;:
        this.move(0, 1)
        e.preventDefault()
        break
      case &#x27;ArrowLeft&#x27;:
      case &#x27;KeyA&#x27;:
        this.move(-1, 0)
        e.preventDefault()
        break
      case &#x27;ArrowDown&#x27;:
      case &#x27;KeyS&#x27;:
        this.move(0, -1)
        e.preventDefault()
        break
      case &#x27;Space&#x27;:
      case &#x27;KeyZ&#x27;:
        if (e.shiftKey) {
          this.reset()
          this.bounce(this.refs.reset)
        } else {
          this.undo()
          this.bounce(this.refs.undo)
        }
        e.preventDefault()
        break
      case &#x27;Escape&#x27;:
        this.refs.board.blur()
        e.preventDefault()
        break
      case &#x27;Tab&#x27;:
        if (e.shiftKey) {
          this.refs.board.blur()
          this.refs.link.focus()
          e.preventDefault()
        }
        break
      default:
        break
    }
  }

  move (x, y) {
    let nextPos = []
    for (let actor of this.actors) {
      let nx = actor.props.x
      let ny = actor.props.y
      switch (actor.props.color) {
        case &#x27;red&#x27;:
          nx += x
          ny += y
          break
        case &#x27;blue&#x27;:
          nx += -x
          ny += -y
          break
        default:
          throw new Error(&#x27;Invalid color&#x27;)
      }

      let tile = this.tile(nx, ny)
      if (tile === &#x27; &#x27; || tile == null) {
        nx = actor.props.x
        ny = actor.props.y
      }

      nextPos.push({
        x: nx,
        y: ny,
      })
    }

    let finished = false
    while (!finished) {
      finished = true
      for (let i = 0; i &lt; nextPos.length; ++i) {
        for (let j = i + 1; j &lt; nextPos.length; ++j) {
          if (nextPos[i].x === nextPos[j].x &amp;&amp; nextPos[i].y === nextPos[j].y) {
            nextPos[i] = {
              x: this.actors[i].props.x,
              y: this.actors[i].props.y,
            }
            nextPos[j] = {
              x: this.actors[j].props.x,
              y: this.actors[j].props.y,
            }
            finished = false
          }
        }
      }
    }

    let anyChanged = false
    for (let i = 0; i &lt; nextPos.length; ++i) {
      let actor = this.actors[i]
      if (actor.props.x != nextPos[i].x || actor.props.y != nextPos[i].y) {
        anyChanged = true
      }

      actor.props = {
        ...actor.props,
        x: nextPos[i].x,
        y: nextPos[i].y,
      }
    }

    if (anyChanged) {
      this.history.push(nextPos)
      this.updateDisplay()
    }
  }

  undo () {
    this.history.pop()

    if (this.history.length != 0) {
      let positions = this.history[this.history.length - 1]
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: positions[i].x,
          y: positions[i].y,
        }
      }
    } else {
      for (let i = 0; i &lt; this.actors.length; ++i) {
        let actor = this.actors[i]
        actor.props = {
          ...actor.props,
          x: this.props.data.actors[i].x,
          y: this.props.data.actors[i].y,
        }
      }
    }

    this.updateDisplay()
  }

  bounce (element) {
    if (element.classList.contains(&#x27;one&#x27;)) {
      element.classList.remove(&#x27;one&#x27;)
      element.classList.add(&#x27;two&#x27;)
    } else {
      element.classList.remove(&#x27;two&#x27;)
      element.classList.add(&#x27;one&#x27;)
    }
  }

  reset () {
    if (this.history.length &lt; 20) {
      let interval = setInterval(() =&gt; {
        if (this.history.length == 0) {
          clearInterval(interval)
        } else {
          this.undo()
        }
      }, 100)
    } else {
      this.history = []
      this.undo()
    }
  }

  isSolved () {
    for (let x = 0; x &lt; this.props.data.width; ++x) {
      for (let y = 0; y &lt; this.props.data.height; ++y) {
        let tile = this.tile(x, y)
        if (tile == &#x27;r&#x27; || tile == &#x27;b&#x27;) {
          let met = false
          for (let actor of this.actors) {
            if (actor.props.x == x &amp;&amp; actor.props.y == y) {
              if (tile == &#x27;r&#x27; &amp;&amp; actor.props.color == &#x27;red&#x27;) {
                met = true
                break
              } else if (tile == &#x27;b&#x27; &amp;&amp; actor.props.color == &#x27;blue&#x27;) {
                met = true
                break
              }
            }
          }
          if (!met) {
            return false
          }
        }
      }
    }

    return true
  }

  updateDisplay () {
    if (this.isSolved()) {
      this.classList.add(&#x27;solved&#x27;)
      this.classList.add(&#x27;was-solved&#x27;)
      if (this.history.length == this.props.data.optimalMoves) {
        this.classList.add(&#x27;was-optimal&#x27;)
      }
    } else {
      this.classList.remove(&#x27;solved&#x27;)
    }

    this.refs.moves.textContent = `${this.history.length}`

    if (this.refs.autoSolve.checked) {
      this.solve()
    }
  }

  solve () {
    let puzzle = &#x27;&#x27;
    for (let row of this.props.data.tiles) {
      puzzle += row + &#x27;\n&#x27;
    }
    puzzle += &#x27;\n&#x27;
    for (let actor of this.actors) {
      puzzle += `${actor.props.color == &#x27;red&#x27; ? &#x27;R&#x27; : &#x27;B&#x27;} ${actor.props.x} ${actor.props.y}\n`
    }

    let start = performance.now()
    let solution = wasm_bindgen.solve(puzzle)
    let end = performance.now()
    this.refs.solveTime.textContent = `${((end - start) &#x2F; 1000).toFixed(3)}s`

    let solutionHTML = &#x27;&#x27;

    solutionHTML += &#x27;&lt;table&gt;&#x27;
    for (let [index, move] of solution.entries()) {
      let emoji = &#x27;?&#x27;
      let direction = &#x27;???&#x27;
      switch (move) {
        case 0:
          direction = &#x27;Right&#x27;
          emoji = &#x27;➡️&#x27;
          break
        case 1:
          direction = &#x27;Up&#x27;
          emoji = &#x27;⬆️&#x27;
          break
        case 2:
          direction = &#x27;Left&#x27;
          emoji = &#x27;⬅️&#x27;
          break
        case 3:
          direction = &#x27;Down&#x27;
          emoji = &#x27;⬇️&#x27;
          break
      }
      solutionHTML += `&lt;tr&gt;&lt;td&gt;${index + 1}&lt;&#x2F;td&gt;&lt;td&gt;${direction}&lt;&#x2F;td&gt;&lt;td&gt;${emoji}&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;`
    }
    solutionHTML += &#x27;&lt;&#x2F;table&gt;&#x27;
    this.refs.solution.innerHTML = solutionHTML
  }

  import () {
    this.history = []

    this.classList.remove(&#x27;solved&#x27;)
    this.classList.remove(&#x27;was-solved&#x27;)
    this.classList.remove(&#x27;was-optimal&#x27;)

    let source = this.refs.importInput.value
    try {
      if (source.startsWith(PLAYGROUND_URL)) {
        let base64 = source.match(&#x2F;(\?|&amp;)data=(?&lt;base64&gt;[a-zA-Z0-9+\&#x2F;=]*)(&amp;|$)&#x2F;).groups.base64
        source = atob(base64)
      }

      this.props = {
        ...this.props,
        data: JSON.parse(source),
      }

      this.refs.importInput.classList.remove(&#x27;error&#x27;)
      this.updateDisplay()
    } catch (e) {
      this.refs.importInput.classList.add(&#x27;error&#x27;)
      console.log(e)
    }
  }

  copyLinkToClipboard () {
    let json = JSON.stringify(this.props.data)
    navigator.clipboard.writeText(`${PLAYGROUND_URL}?data=${btoa(json)}`)
  }
}
window.customElements.define(&#x27;anima-puzzle&#x27;, Puzzle)

&lt;&#x2F;script&gt;
&lt;template id=&quot;anima-puzzle-template&quot;&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;div class=&quot;board-container&quot;&gt;
        &lt;h3 data-ref=&quot;name&quot;&gt;&lt;&#x2F;h3&gt;
        &lt;div class=&quot;controls&quot;&gt;
            &lt;div class=&quot;left&quot;&gt;
                &lt;button data-ref=&quot;undo&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;M7.18,4,8.6,5.44,6.06,8h9.71a6,6,0,0,1,0,12h-2V18h2a4,4,0,0,0,0-8H6.06L8.6,12.51,7.18,13.92,2.23,9Z&#x27; &#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
                &lt;button data-ref=&quot;reset&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M20,8 C18.5974037,5.04031171 15.536972,3 12,3 C7.02943725,3 3,7.02943725 3,12 C3,16.9705627 7.02943725,21 12,21 L12,21 C16.9705627,21 21,16.9705627 21,12 M21,3 L21,9 L15,9&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
            &lt;div class=&quot;right&quot;&gt;
                &lt;button data-ref=&quot;link&quot;&gt;
                    &lt;img src=&quot;data:image&#x2F;svg+xml,%3Csvg width=&#x27;24px&#x27; height=&#x27;24px&#x27; viewBox=&#x27;0 0 24 24&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath fill=&#x27;none&#x27; stroke=&#x27;%23000&#x27; stroke-width=&#x27;2&#x27; d=&#x27;M16.1251884,2.42026615 C16.9095797,1.63587482 18.1818354,1.63638083 18.9643331,2.41887857 L21.5811214,5.03566688 C22.3647464,5.81929188 22.3723943,7.08215115 21.5797338,7.87481161 L17.8748116,11.5797338 C17.0904203,12.3641252 15.8181646,12.3636192 15.0356669,11.5811214 L12.4188786,8.96433312 C11.6352536,8.18070812 11.6276057,6.91784885 12.4202662,6.12518839 L16.1251884,2.42026615 Z M6.12518839,12.4202662 C6.90957973,11.6358748 8.18183538,11.6363808 8.96433312,12.4188786 L11.5811214,15.0356669 C12.3647464,15.8192919 12.3723943,17.0821512 11.5797338,17.8748116 L7.87481161,21.5797338 C7.09042027,22.3641252 5.81816462,22.3636192 5.03566688,21.5811214 L2.41887857,18.9643331 C1.63525357,18.1807081 1.6276057,16.9178488 2.42026615,16.1251884 L6.12518839,12.4202662 Z M7,17 L17,7&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;&gt;
                &lt;&#x2F;button&gt;
            &lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;board&quot; tabindex=&quot;0&quot;&gt;&lt;&#x2F;div&gt;
        &lt;span data-ref=&quot;focuser&quot;&gt;
            Click to play
        &lt;&#x2F;span&gt;
        &lt;div&gt;
            &lt;span data-ref=&quot;moves&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;optimal-threshold&quot;&gt; &#x2F; &lt;span data-ref=&quot;optimalMoves&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; moves
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div data-ref=&quot;controls&quot;&gt;
        &lt;div class=&quot;import&quot;&gt;
            &lt;input type=&quot;text&quot; data-ref=&quot;importInput&quot;&gt;
            &lt;button data-ref=&quot;importButton&quot;&gt;Import&lt;&#x2F;button&gt;
        &lt;&#x2F;div&gt;
        &lt;div data-ref=&quot;solution&quot;&gt;
            &lt;em&gt;Solve to find a solution&lt;&#x2F;em&gt;
        &lt;&#x2F;div&gt;
        &lt;div class=&quot;solve&quot;&gt;
            &lt;input type=&quot;checkbox&quot; data-ref=&quot;autoSolve&quot;&#x2F;&gt;Auto
            &lt;button data-ref=&quot;solveButton&quot;&gt;Solve&lt;&#x2F;button&gt;
            &lt;span data-ref=&quot;solveTime&quot;&gt;0.000s&lt;&#x2F;span&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;spacer&quot;&gt;&lt;&#x2F;div&gt;
    &lt;style&gt;
        :host {
            display: flex;
            align-items: stretch;
            margin: 0.5rem auto;
            overflow-x: auto;
        }
        .spacer {
            flex-grow: 1;
        }
        .board-container {
            text-align: center;
            flex-shrink: 0;
            padding: 0 32px;
        }
        [data-ref=&quot;focuser&quot;] {
            display: inline-block;
            position: relative;
            top: -0.3rem;
            padding: 0 0.5rem;
            background-color: #fff;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            z-index: 1;
            cursor: pointer;
            transform: scale(1);
            transition: transform 0.15s cubic-bezier(.18, .85, .67, 1.53);
        }
        :host(.active) [data-ref=&quot;focuser&quot;] {
            transform: scale(0.0);
            transition: transform 0.1s linear;
        }
        .optimal-threshold {
            display: none;
            font-weight: bold;
        }
        :host(.was-solved) .optimal-threshold {
            display: inline;
        }
        :host(.was-solved.was-optimal) .optimal-threshold::after {
            content: &quot; ✔&quot;;
            color: #006600;
        }
        .controls {
            display: flex;
            position: relative;
            height: 0;
            flex-direction: row;
            justify-content: space-between;
        }
        .controls .left, .controls .right {
            position: relative;
            top: -10px;
            display: flex;
            flex-direction: column;
        }
        .controls .left {
            left: -34px;
        }
        .controls .right {
            right: -34px;
        }
        @keyframes bounce1 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        @keyframes bounce2 {
            0% {
                transform: scale(1.0);
            }
            30% {
                transform: scale(1.2);
            }
            60% {
                transform: scale(0.8);
            }
            100% {
                transform: scale(1.0);
            }
        }
        [data-ref=&quot;reset&quot;], [data-ref=&quot;undo&quot;], [data-ref=&quot;link&quot;] {
            padding: 6px;
            width: 36px;
            height: 36px;
            border-radius: 18px;
            z-index: 3;
            animation-duration: 0.2s;
        }
        [data-ref=&quot;reset&quot;].one, [data-ref=&quot;undo&quot;].one, [data-ref=&quot;link&quot;].one {
            animation-name: bounce1;
        }
        [data-ref=&quot;reset&quot;].two, [data-ref=&quot;undo&quot;].two, [data-ref=&quot;link&quot;].two {
            animation-name: bounce2;
        }
        [data-ref=&quot;board&quot;] {
            background-color: #e8e8e8;
            background-image:
                linear-gradient(135deg, #cccccc 25%, transparent 25%),
                linear-gradient(225deg, #cccccc 25%, transparent 25%),
                linear-gradient(45deg, #cccccc 25%, transparent 25%),
                linear-gradient(315deg, #cccccc 25%, #e8e8e8 25%);
            background-position: 18px 0, 18px 0, 0 0, 0 0;
            background-size: 36px 36px;
            background-repeat: repeat;
            position: relative;
            border-radius: 0.75rem;
            border: 0.5rem solid transparent;
            cursor: pointer;
        }
        :host(.active) [data-ref=&quot;board&quot;] {
            cursor: default;
        }
        [data-ref=&quot;board&quot;]::before {
            content: &quot; &quot;;
            position: absolute;
            left: -0.5rem;
            right: -0.5rem;
            top: -0.5rem;
            bottom: -0.5rem;
            border-radius: 0.75rem;
            box-shadow: inset 0 0 7px rgba(0, 0, 0, 0.5);
        }
        [data-ref=&quot;board&quot;]::after {
            content: &quot; &quot;;
            display: block;
            background-image: url(&quot;data:image&#x2F;svg+xml,%3C%3Fxml version=&#x27;1.0&#x27; encoding=&#x27;UTF-8&#x27;%3F%3E%3Csvg width=&#x27;111.58&#x27; height=&#x27;80.006&#x27; version=&#x27;1.1&#x27; viewBox=&#x27;0 0 111.57827 80.006501&#x27; xml:space=&#x27;preserve&#x27; xmlns=&#x27;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&#x27;%3E%3Cpath d=&#x27;m110.45 22.652c-1.0152-0.76245-2.4134-0.75457-3.414 0.01636l-29.369 22.42-19.275-43.549c-0.91154-2.0522-4.2759-2.0522-5.1905 0l-19.501 44.05-29.113-22.898c-1.0055-0.78609-2.4116-0.8079-3.4359-0.053335-1.0279 0.76002-1.417 2.1164-0.95579 3.2989l20.226 52.262c0.4188 1.0928 1.4728 1.8085 2.6407 1.8085h65.462c1.177 0 2.2219-0.71275 2.6425-1.8085l20.224-52.262c0.45759-1.1825 0.0739-2.5243-0.94124-3.2843z&#x27; fill=&#x27;%23ffd82b&#x27;&#x2F;%3E%3C&#x2F;svg%3E%0A&quot;);
            background-position: center center;
            background-repeat: no-repeat;
            position: absolute;
            left: 50%;
            top: 50%;
            width: 120px;
            height: 100px;
            opacity: 0.8;
            filter: drop-shadow(0 0 1rem rgba(0, 0, 0, 0.5));
            transform-origin: center;
            transform: translate(-50%, -50%) scale(0.0);
            transition: transform 0.1s linear;
            z-index: 3;
        }
        :host(.solved) [data-ref=&quot;board&quot;]::after {
            transform: translate(-50%, -50%) scale(1.0);
            transition: transform 0.25s cubic-bezier(.18, .85, .67, 1.53);
        }
        .tile {
            position: absolute;
        }
        .tile::before {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        }
        .tile::after {
            content: &quot; &quot;;
            display: block;
            position: absolute;
            width: 96%;
            height: 96%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            border-radius: 0.75rem;
            background-color: #fff;
            z-index: 1;
        }
        .tile.goal::after {
            background-image:
                linear-gradient(135deg, #fff 40%, transparent 40%),
                linear-gradient(225deg, #fff 40%, transparent 40%),
                linear-gradient(45deg, #fff 40%, transparent 40%),
                linear-gradient(315deg, #fff 40%, transparent 40%);
        }
        .tile.goal.red::after {
            background-color: #ff0046;
        }
        .tile.goal.blue::after {
            background-color: #0989B2;
        }
        button, input {
            padding: 0.25rem 0.5rem;
            background-color: #fff;
            border: 0;
            border-radius: 0.75rem;
            box-shadow: 0 0 7px rgba(0, 0, 0, 0.5);
            font-family: inherit;
            font-size: inherit;
            margin: 0.25rem;
        }
        button {
            cursor: pointer;
        }
        button:hover {
            background-color: #e0e0e0;
        }
        button:active {
            background-color: #ccc;
            box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        }
        input[type=&quot;text&quot;] {
            width: 0;
            flex-grow: 1;
        }
        [data-ref=&quot;controls&quot;] {
            text-align: center;
            display: flex;
            flex-direction: column;
            margin-left: 0.5rem;
            margin-top: 1rem;
        }
        [data-ref=&quot;controls&quot;].hidden {
            display: none;
        }
        .import, .solve {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 0.5rem 0;
        }
        [data-ref=&quot;importInput&quot;].error {
            background: #ffb8cb;
        }
        [data-ref=&quot;solution&quot;] {
            min-width: 200px;
            height: 0;
            flex-grow: 1;
            text-align: center;
            overflow-y: auto;
        }
        [data-ref=&quot;solution&quot;] table {
            margin: 0 auto;
            font-family: monospace;
            font-weight: bold;
        }
        [data-ref=&quot;solution&quot;] td {
            padding: 0 0.5rem;
            text-align: left;
        }
        [data-ref=&quot;solution&quot;] td:first-child {
            text-align: right;
        }
        [data-ref=&quot;solveButton&quot;] {
            margin: 0 0.75rem;
        }
        [data-ref=&quot;solveTime&quot;] {
            flex-grow: 1;
        }
    &lt;&#x2F;style&gt;
&lt;&#x2F;template&gt;
&lt;template id=&quot;anima-actor-template&quot;&gt;
    &lt;style&gt;
        :host {
            display: block;
            position: absolute;
            transition: transform 0.15s;
            z-index: 2;
        }
        .color {
            display: block;
            position: absolute;
            overflow: hidden;
            width: 81%;
            height: 81%;
            border-radius: 0.4rem;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        .color::after {
            content: &quot; &quot;;
            position: absolute;
            width: 100%;
            height: 100%;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
        :host(.red) .color::after {
            background-image:
                linear-gradient(135deg, #ff0046 30%, transparent 30%),
                linear-gradient(225deg, #ff0046 30%, transparent 30%),
                linear-gradient(45deg, #ff0046 30%, transparent 30%),
                linear-gradient(315deg, #ff0046 30%, transparent 30%);
        }
        :host(.blue) .color::after {
            background-image:
                linear-gradient(135deg, #0989B2 30%, transparent 30%),
                linear-gradient(225deg, #0989B2 30%, transparent 30%),
                linear-gradient(45deg, #0989B2 30%, transparent 30%),
                linear-gradient(315deg, #0989B2 30%, transparent 30%);
        }
    &lt;&#x2F;style&gt;
    &lt;div class=&quot;color&quot;&gt;&lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;U-Turn&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;r .&quot;,
        &quot;. .&quot;,
        &quot;...&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Single File&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;.. rr&quot;,
        &quot;.. rr&quot;,
        &quot; ... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 16
}
&lt;&#x2F;script&gt;
&lt;p&gt;These two are pretty easy, but you might have noticed some implicit rules that make solving these
puzzles nontrivial:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If an actor tries to move into an impassable tile, they do not move.&lt;&#x2F;li&gt;
&lt;li&gt;If an actor would overlap another actor, they do not move.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These side-effects make it very difficult (impossible?) to predict how the system will behave after
even a move or two, which is a hallmark of problems with high NP-complexity. We&#x27;ll add one more
twist to make it a little more interesting:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Gimbal Lock&quot;,
    &quot;width&quot;: 7,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;... ...&quot;,
        &quot;. r . .&quot;,
        &quot;... ..b&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 6,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;
&lt;p&gt;Unlike red actors, blue actors move in the opposite direction you choose. If you choose left, blue
actors will move right and vice-versa. This leads to one final implicit rule:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Deadlock&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot; . &quot;,
        &quot;br.&quot;,
        &quot; b &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;
&lt;p&gt;When they&#x27;re right next to each other, red and blue actors can pass through each other to exchange
positions. However, if they&#x27;re separated by a single space, they&#x27;ll try to move onto the same space
and block each other from moving at all. This added complexity can make puzzles much more difficult
to solve.&lt;&#x2F;p&gt;
&lt;p&gt;Before diving in, I&#x27;d definitely recommend trying out some more puzzles to get a better feel for
some high-level techniques and to get better acquainted with the game. Don&#x27;t worry about solving
all of these, they can get very hard. Just work with them until you feel competent and confident.&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div&gt;&lt;h2 id=&quot;practice-puzzles&quot;&gt;&lt;a href=&quot;&#x2F;blog&#x2F;anima-puzzles&#x2F;&quot;&gt;&lt;strong&gt;Practice Puzzles&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;This is where we start writing our solver. You can follow along using the &lt;code&gt;start&lt;&#x2F;code&gt; tag on the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;anima_solver&quot;&gt;GitHub repo&lt;&#x2F;a&gt;, which will start you with all of the
boilerplate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;git clone --branch start https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;anima_solver
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;a-basic-solver&quot;&gt;A basic solver&lt;&#x2F;h2&gt;
&lt;p&gt;Our strategy for a basic solver will be to explore, one move at a time, out from
the initial state until we find a solution. I&#x27;ll do this with a basic
breadth-first search augmented with parent tracking:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;solve&lt;&#x2F;span&gt;&lt;span&gt;(initial_state: State, data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Data) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Direction&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; parents &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;VecDeque::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Add transitions from initial state
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(action, transition) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; initial_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(data) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; transition {
&lt;&#x2F;span&gt;&lt;span&gt;            Transition::Indeterminate(state) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                parents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, action));
&lt;&#x2F;span&gt;&lt;span&gt;                queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(state);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Transition::Success &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(vec![action]),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; Pop states in order
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(parent_node) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(action, transition) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; parent_node.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(data) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; transition {
&lt;&#x2F;span&gt;&lt;span&gt;                Transition::Indeterminate(state) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    parents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;((index, action));
&lt;&#x2F;span&gt;&lt;span&gt;                    queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(state);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                Transition::Success &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; result_actions &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;vec![action];
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; current_index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; index;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; current_index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(next_index, action) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; parents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;swap_remove&lt;&#x2F;span&gt;&lt;span&gt;(current_index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                        result_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(action);
&lt;&#x2F;span&gt;&lt;span&gt;                        current_index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; next_index;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    result_actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(result_actions);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a lot of boilerplate omitted, so here&#x27;s what&#x27;s relevant:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We have &lt;code&gt;State&lt;&#x2F;code&gt; and &lt;code&gt;Data&lt;&#x2F;code&gt; structs where &lt;code&gt;State&lt;&#x2F;code&gt; is all the information that can change and
&lt;code&gt;Data&lt;&#x2F;code&gt; is all the information that is static. &lt;code&gt;State&lt;&#x2F;code&gt; is the positions of the actors, and &lt;code&gt;Data&lt;&#x2F;code&gt;
is the layout of the board and goal positions. These are separated out to minimize how much memory
is being used by &lt;code&gt;queue&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;transitions()&lt;&#x2F;code&gt; method operates on a &lt;code&gt;State&lt;&#x2F;code&gt;, takes some &lt;code&gt;Data&lt;&#x2F;code&gt;, and returns the new states
we reach by performing every possible move. An &lt;code&gt;Indeterminate&lt;&#x2F;code&gt; transition means that the state you
reach is not solved, and a &lt;code&gt;Success&lt;&#x2F;code&gt; transition means that it is.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;parents&lt;&#x2F;code&gt; here is a list of &lt;code&gt;(usize, Direction)&lt;&#x2F;code&gt; that tracks what state it came from and what
direction was moved to transition. When we get a successful transition, we crawl back through the
&lt;code&gt;parents&lt;&#x2F;code&gt; vector to reassemble the solution and return it. Let&#x27;s try it out!&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re going to use a nice and simple one to test:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Line Dance&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 1,
    &quot;tiles&quot;: [
        &quot;..r&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 0,
            &quot;y&quot;: 0
        }
    ],
    &quot;optimalMoves&quot;: 2
}
&lt;&#x2F;script&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;line_dance.txt
&lt;&#x2F;span&gt;&lt;span&gt;puzzles&#x2F;line_dance.txt:
&lt;&#x2F;span&gt;&lt;span&gt;Parse: 0.000201900s
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.000017600s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 2:
&lt;&#x2F;span&gt;&lt;span&gt;Right, Right
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool, it found it! And that looks right too, let&#x27;s see how fast it is in release mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;line_dance.txt
&lt;&#x2F;span&gt;&lt;span&gt;puzzles&#x2F;line_dance.txt:
&lt;&#x2F;span&gt;&lt;span&gt;Parse: 0.000122700s
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.000009100s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 2:
&lt;&#x2F;span&gt;&lt;span&gt;Right, Right
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Roughly twice as fast, great! We&#x27;re going to be running exclusively in release mode from here on
out. Now let&#x27;s step it up a little bit and try a harder puzzle:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;U-Turn&quot;,
    &quot;width&quot;: 3,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;r .&quot;,
        &quot;. .&quot;,
        &quot;...&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 6
}
&lt;&#x2F;script&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;u_turn.txt
&lt;&#x2F;span&gt;&lt;span&gt;puzzles&#x2F;u_turn.txt:
&lt;&#x2F;span&gt;&lt;span&gt;Parse: 0.005942000s
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.001093200s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 6:
&lt;&#x2F;span&gt;&lt;span&gt;Down, Down, Left, Left, Up, Up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome, it got that one too! One more, this one&#x27;s really more of the same:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Spiral&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot;.....&quot;,
        &quot;.   .&quot;,
        &quot;... .&quot;,
        &quot;    .&quot;,
        &quot;r....&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 2
        }
    ],
    &quot;optimalMoves&quot;: 16
}
&lt;&#x2F;script&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;spiral.txt
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh, this one doesn&#x27;t seem to be going anywhere fast. And if you don&#x27;t kill it soon, you might run
out of memory too! Looking at the timings explains why:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;puzzles&#x2F;line_dance.txt
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.000009100s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 2:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;puzzles&#x2F;u_turn.txt
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.001093200s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 6:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By adding just four moves to the solution length, our runtime went up by a factor of &lt;strong&gt;120x&lt;&#x2F;strong&gt;! Let&#x27;s
take a peek at how many states we&#x27;re exploring:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt;&amp;quot;Explored &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#183691;&quot;&gt; states&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, parents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;line_dance.txt
&lt;&#x2F;span&gt;&lt;span&gt;Explored 3 states
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;u_turn.txt
&lt;&#x2F;span&gt;&lt;span&gt;Explored 5364 states
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yikes, there&#x27;s our problem. And it makes sense, every state we explore leads to four more states so
we should expect that a solution of length &lt;code&gt;n&lt;&#x2F;code&gt; will explore at least &lt;code&gt;(4^n - 1) &#x2F; 3&lt;&#x2F;code&gt; states. For a
6-move solution, that comes out to between 1365 and 5461 states, so we&#x27;re right in that range. What
does that mean for our currently-unsolvable puzzle? It takes 16 moves to solve it, so we should
expect to explore between 1431655765 and 5726623061 states.&lt;&#x2F;p&gt;
&lt;p&gt;Uh oh.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to start iterating on our solver and improving it. We will measure progress by
measuring how long it takes to solve existing puzzles, then creating new and more difficult puzzles
as we go along. Our goal will be to quickly solve all puzzles that we can create.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;state-tracking&quot;&gt;State tracking&lt;&#x2F;h2&gt;
&lt;p&gt;First, we should observe that even though we explored 5364 states for &lt;em&gt;U-Turn&lt;&#x2F;em&gt;, there are
functionally only seven unique states: one for each of the tiles the actor could be on. So we must
be exploring the same state multiple times. We can avoid this by storing our explored states in a
hash set and only exploring its children if it&#x27;s not already been visited:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; states &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(parent_node) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    index &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;states.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;parent_node) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        states.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(parent_node);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see how this affects our cases so far:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;u_turn.txt
&lt;&#x2F;span&gt;&lt;span&gt;Explored 20 states
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.000895100s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 6:   
&lt;&#x2F;span&gt;&lt;span&gt;Down, Down, Left, Left, Up, Up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That looks much better! Maybe we can solve our new puzzle now?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo run --release&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; puzzles&#x2F;spiral.txt
&lt;&#x2F;span&gt;&lt;span&gt;Explored 51 states
&lt;&#x2F;span&gt;&lt;span&gt;puzzles&#x2F;spiral.txt:
&lt;&#x2F;span&gt;&lt;span&gt;Parse: 0.000212300s
&lt;&#x2F;span&gt;&lt;span&gt;Solve: 0.001049000s
&lt;&#x2F;span&gt;&lt;span&gt;Found solution of length 16:
&lt;&#x2F;span&gt;&lt;span&gt;Left, Left, Up, Up, Right, Right, Right, Right, Down, Down, Down, Down, Left, Left, Left, Left
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s much better, bringing our explored states down from over a billion to just 51. This
optimization alone brings all our sample puzzles into the realm of solvability! Now we can start
benchmarking our solver more comprehensively. Let&#x27;s pick a few representatives from the
&lt;a href=&quot;&#x2F;blog&#x2F;&quot;&gt;sample puzzles set&lt;&#x2F;a&gt; to bench:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;16.658 ms 16.888 ms 17.125 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;44.606 ms 45.193 ms 45.806 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;1.8001 s 1.8308 s 1.8640 s&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;entropy-reduction&quot;&gt;Entropy reduction&lt;&#x2F;h2&gt;
&lt;p&gt;One easy optimization we can make is to reduce the entropy of our states. Right now our puzzle state
looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Color {
&lt;&#x2F;span&gt;&lt;span&gt;    Red,
&lt;&#x2F;span&gt;&lt;span&gt;    Blue,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Actor {
&lt;&#x2F;span&gt;&lt;span&gt;    position: Vec2,
&lt;&#x2F;span&gt;&lt;span&gt;    color: Color,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;    actors: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Actor&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So imagine a board with a few red actors on it. Let&#x27;s say four, labeled A, B, C, and D:&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot;&gt;&lt;div&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;A&lt;&#x2F;td&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;td&gt;B&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;C&lt;&#x2F;td&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;td&gt;D&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;With these four actors, there&#x27;s actually &lt;code&gt;4!&lt;&#x2F;code&gt; ways we could represent the state since there are &lt;code&gt;4!&lt;&#x2F;code&gt;
permutations of the actors in the vector. We can fix this by sorting our &lt;code&gt;actors&lt;&#x2F;code&gt; array. This will
reorder any permutation of the actors into one canonical ordering. We can do this pretty easily when
we transition our states:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;transition&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Data, direction: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Direction) -&amp;gt; State {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    result.actors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    result
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A good way to think of this is as removing any unnecessary entropy in the state. Let&#x27;s see how that
affects our benchmarks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;4.4875 ms 4.5667 ms 4.6525 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-73.527% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;72.960% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;72.308%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;19.518 ms 19.647 ms 19.776 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-57.178% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;56.527% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;55.885%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;187.49 ms 190.53 ms 193.91 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-89.835% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;89.593% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;89.343%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see how the number of states explored (and branching factor) changed with that:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Puzzle&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Solution Length&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Before (BF)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;After (BF)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Change&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Square Dance&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37268 (2.292)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11401 (2.061)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-61.408%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Fractal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;86277 (2.294)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;46253 (2.179)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-46.390%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Antiparticle&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2514936 (1.888)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;315100 (1.708)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-87.471%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Getting big performance improvements from small changes like this is what we&#x27;re aiming to do most of
the time. The important thing here is that by reducing our state entropy, we reduced our branching
factor by a little bit. That small change amplifies quickly in exponential algorithms, so even a
very small decrease can lead to huge improvements.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-search&quot;&gt;A* search&lt;&#x2F;h2&gt;
&lt;p&gt;With that in mind, one easy way we can decrease our branching factor even more is by using a more
sophisticated searching algorithm. A* is a very common augmentation to breadth-first search that
prioritizes exploring more promising nodes first. In practice, this means that we have to define a
&lt;em&gt;heuristic function&lt;&#x2F;em&gt; that estimates the minimum number of moves to completion. We want our heuristic
function to estimate the remaining distance as closely as possible, but never overestimate. It&#x27;s
okay to underestimate. With this estimate of the number of moves remaining, we prioritize exploring
states that have the minimum estimated solution size (moves so far + remaining moves). This can help
us avoid exploring states that are clearly dead ends and prioritize states that look promising.&lt;&#x2F;p&gt;
&lt;p&gt;The main difficulty with implementing A* is determining a good heuristic function. A good heuristic
function should be &lt;em&gt;easy to compute&lt;&#x2F;em&gt; and return an estimate that is &lt;em&gt;as high as possible&lt;&#x2F;em&gt; without
overestimating. This is a tradeoff that we actively have to be conscious of. In most cases, it will
be a net positive. Let&#x27;s think about what heuristics we can calculate for our puzzle:&lt;&#x2F;p&gt;










&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;false&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Square Dance&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 5,
    &quot;tiles&quot;: [
        &quot; ....&quot;,
        &quot;.r.r.&quot;,
        &quot;.. ..&quot;,
        &quot;.r.r.&quot;,
        &quot;.... &quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 1
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 2,
            &quot;y&quot;: 3
        }
    ],
    &quot;optimalMoves&quot;: 12
}
&lt;&#x2F;script&gt;
&lt;p&gt;In order to complete the puzzle, each goal needs one actor of its color on top of it. Since all the
actors move at the same time, we can use a straightforward &lt;em&gt;maxmin&lt;&#x2F;em&gt;: Find the nearest actor to each
goal and calculate the distance between them, then take the maximum value of all goal distances. The
logical way to think about this is that we&#x27;re calculating the minimum number of moves necessary to
get any actor of our choice to any given goal. This is an extremely rough estimate, but it will work
for us. If we wanted, we could calculate the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linear_bottleneck_assignment_problem&quot;&gt;assignment bottleneck&lt;&#x2F;a&gt; instead,
but that could take a lot of time and negatively impact our performance. Also UPS lost my book from
SIAM.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;heuristic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Data) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; max_distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; goal &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; data.goals.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; min_distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;MAX&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; actor &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;self.actors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(|a| a.color &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; goal.color) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(goal.position &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; actor.position).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            min_distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;::min(min_distance, (d.x &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; d.y) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        max_distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;::max(max_distance, min_distance);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    max_distance
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Does what it says on the tin. The more difficult part is adapting our existing &lt;code&gt;solve&lt;&#x2F;code&gt; function to
prioritize states and calculate the heuristic. The first change we&#x27;ll make is to bundle all of the
information we need when exploring a node into a new structure:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[derive(Eq, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    state: State,
&lt;&#x2F;span&gt;&lt;span&gt;    distance: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    estimate: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    index: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will be what we insert into our queue now. Speaking of which:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;BinaryHeap::new();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A &lt;code&gt;BinaryHeap&lt;&#x2F;code&gt; is a simple data structure that we can use as a priority queue. We can insert items
and remove the maximum value in &lt;code&gt;log(N)&lt;&#x2F;code&gt; time. All we need to do is define an ordering on our nodes
that gives the most promising nodes (with lowest distance + heuristic) the highest priority:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;PartialOrd &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;partial_cmp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, other: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;Ordering&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span&gt;(other))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Ord &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, other: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;Self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Ordering {
&lt;&#x2F;span&gt;&lt;span&gt;        other.estimate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cmp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self.estimate)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A little opaque, but this just says that we want to sort in reverse &lt;code&gt;estimate&lt;&#x2F;code&gt; order. Finally, we
need to change our &lt;code&gt;push&lt;&#x2F;code&gt; operation to account for the new fields we need to fill out in &lt;code&gt;Node&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; estimate &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;heuristic&lt;&#x2F;span&gt;&lt;span&gt;(data) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;(parent_node.distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(Node {
&lt;&#x2F;span&gt;&lt;span&gt;    state: state,
&lt;&#x2F;span&gt;&lt;span&gt;    distance: parent_node.distance &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    estimate,
&lt;&#x2F;span&gt;&lt;span&gt;    index: parents.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of counting our states as we pop them off, we now need to keep track of which index our
current state is in the &lt;code&gt;parents&lt;&#x2F;code&gt; list. And with that, we&#x27;re done! We have a fully-functional A*
implementation ready to make our solver go super fast!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;4.4051 ms 4.4276 ms 4.4524 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;+3.7025% +4.6095% +5.4779%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;7.7314 ms 7.7718 ms 7.8183 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-57.412% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;57.044% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;56.682%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;201.26 ms 202.26 ms 203.36 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;+14.570% +15.351% +16.121%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well that&#x27;s a little disappointing. At least, it is if you only look at the individual benchmarks.
Two went up by around 5-15%, and one went down by over 50%. So while it wasn&#x27;t a unilateral gain, it
did give us a net benefit overall. And now, if we can improve our heuristic function somehow we can
gain the benefit from that too. Let&#x27;s take a look at our explored states (and branching factor):&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Puzzle&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Solution Length&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Before (BF)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;After (BF)&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Change&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Square Dance&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11401 (2.061)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9737 (2.031)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-14.595%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Fractal&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;13&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;46253 (2.179)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16593 (2.002)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-64.126%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Antiparticle&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;315100 (1.708)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;269211 (1.695)&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;-14.563%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;It&#x27;s important to remember to benchmark very carefully, since even though our states explored fell
for every puzzle, our total runtime did increase for two of them. Also a very small change in the
branching factor for &lt;em&gt;Fractal&lt;&#x2F;em&gt; resulted in a massive decrease in explored states. The average
runtime has fallen quite nicely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reducing-allocations&quot;&gt;Reducing allocations&lt;&#x2F;h2&gt;
&lt;p&gt;The first rule of high-performance optimization is to reduce your allocations. Let&#x27;s take a look and
see if there are some places we can do that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Data) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;(Direction, Transition&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our transitions function is returning a &lt;code&gt;Vec&lt;&#x2F;code&gt; with data allocated on the heap, but we know that
we&#x27;ll always return four transitions. We can make this return an array instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, data: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Data) -&amp;gt; [(Direction, Transition&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see what that gets us:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;4.4052 ms 4.4415 ms 4.4867 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-7.0971% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;6.1140% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;4.9385%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;7.6836 ms 7.7682 ms 7.8720 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-8.5312% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;7.0938% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;5.5943%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;207.00 ms 207.71 ms 208.44 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-4.9600% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;4.2495% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;3.5907%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some modest gains, let&#x27;s keep going. Next we can use the &lt;code&gt;arrayvec&lt;&#x2F;code&gt; crate to reduce the number of
allocations in our states. It&#x27;s essentially an inline-allocated array structure, so we won&#x27;t
constantly be allocating heap memory as long as we can put an upper bound on the number of actors in
our puzzles. Let&#x27;s pick eight for some headroom:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;State {
&lt;&#x2F;span&gt;&lt;span&gt;    actors: ArrayVec&amp;lt;Actor, 8&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How about that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;4.0299 ms 4.0567 ms 4.0854 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-9.7690% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;8.6635% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;7.6778%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;7.4610 ms 7.5152 ms 7.5743 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-4.6656% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;3.2571% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;1.9086%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;187.27 ms 188.29 ms 189.38 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-9.9536% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;9.3494% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;8.7499%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice! Some more modest gains, but every bit helps. It&#x27;s finally time to move on to...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;profiling&quot;&gt;Profiling&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re out of low-hanging fruit, so let&#x27;s move on to doing some micro-optimization. There&#x27;s still
plenty to be gained here though, and we can find it by doing some profiling. Running our benchmarks
in Visual Studio gets us some interesting insights:&lt;&#x2F;p&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;david.kolo.ski&amp;#x2F;processed_images&amp;#x2F;profile.1184b5365bda5748.png&quot; &#x2F;&gt;
&lt;p&gt;Here they are typed out:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Function&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Total CPU %&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;anima_solver::puzzle::State::transitions&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;24.40%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;hashbrown::map::HashMap::contains_key&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;20.72%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;hashbrown::map::HashMap::insert&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;19.83%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;alloc::collections::binary_heap::BinaryHeap::pop&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15.91%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;One thing that immediately jumps out is that we&#x27;re spending almost the same amount of time in
&lt;code&gt;HashMap::contains_key&lt;&#x2F;code&gt; as we do in &lt;code&gt;HashMap::insert&lt;&#x2F;code&gt;. But we don&#x27;t have any hash maps in our
solver, do we?&lt;&#x2F;p&gt;
&lt;p&gt;Well actually, we do. We&#x27;re using a &lt;code&gt;HashSet&lt;&#x2F;code&gt; for our visited states, and that&#x27;s secretly a
&lt;code&gt;HashMap&amp;lt;K, ()&amp;gt;&lt;&#x2F;code&gt; under the hood. Let&#x27;s take a look at our code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; states &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(parent_node) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span&gt;states.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;parent_node.state) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(action, transition) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; parent_node.state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(data) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        states.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(parent_node.state);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So there&#x27;s the problem, we&#x27;re checking to see if the set contains the state, then getting our
transitions, and after that we&#x27;re inserting the state. We should be able to use an &lt;code&gt;Entry&lt;&#x2F;code&gt; API to
check if the set contains the state and insert it with a single lookup right? Well... &lt;code&gt;HashSet&lt;&#x2F;code&gt;
doesn&#x27;t have an entry API like &lt;code&gt;HashMap&lt;&#x2F;code&gt; does &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;1490&quot;&gt;yet&lt;&#x2F;a&gt;.
Well, I guess we can use a &lt;code&gt;HashMap&lt;&#x2F;code&gt; with a value of &lt;code&gt;()&lt;&#x2F;code&gt; right?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; states &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashMap::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span&gt;(parent_node) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Entry::Vacant(entry) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; states.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span&gt;(parent_node.state) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(action, transition) &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;transitions&lt;&#x2F;span&gt;&lt;span&gt;(data) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That should do the trick. Let&#x27;s see how that changed our runtime:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;3.8785 ms 3.9364 ms 3.9998 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;+0.9796% +2.8698% +4.8065%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;6.7915 ms 6.8446 ms 6.9022 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-2.2994% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;1.2597% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;0.0914%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.03 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;172.04 ms 172.76 ms 173.54 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-2.4655% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;1.8303% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;1.1884%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well that&#x27;s disappointing, there&#x27;s statistically no change in runtime. I guess the entry API must
have some overhead that&#x27;s just as expensive as a lookup and insert. If anyone has ideas on why this
didn&#x27;t change the overall runtime, I&#x27;d love to know. But this also shows the importance of
benchmarking every step of the way. Even the most obvious improvements can end up having no effect
on the overall performance, or worse a negative impact.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;container-pre-sizing&quot;&gt;Container pre-sizing&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re getting close to the bottom of the barrel. A quick and easy optimization we can do is to
pre-size our containers. This helps us skip any work we might do to resize containers for work loads
under some minimum size. I&#x27;ve picked some relatively arbitrary pre-sizes here:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; states &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;HashMap::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; parents &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;BinaryHeap::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;1024&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We should expect these to only impact any puzzles that don&#x27;t use memory above the pre-sizing
threshold. Do we?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;3.7025 ms 3.7311 ms 3.7652 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-9.7612% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;8.3409% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;6.9754%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;6.0512 ms 6.1010 ms 6.1584 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-15.633% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;14.231% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;12.778%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;177.28 ms 178.40 ms 179.59 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-0.7913% +0.0458% +0.8882%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.92 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s exactly what we see. We do get some very nice deltas on our smaller puzzles, but our larger
puzzle benchmark is completely unaffected. Still, it&#x27;s bringing down our average case and that&#x27;s
important for us. Finally, we can move on to the last optimization strategy:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inlining&quot;&gt;Inlining&lt;&#x2F;h2&gt;
&lt;p&gt;One of the last tools in our performance toolbox is function inlining. The impact of function
inlining varies widely, and we should always be careful to benchmark our code along the way. Let&#x27;s
see if there are any good candidates for inlining. Ideally, a good function to inline should either
be &lt;em&gt;small&lt;&#x2F;em&gt; or medium-sized and used &lt;em&gt;once or twice&lt;&#x2F;em&gt;. We have a lot of basic little functions in our
vector and direction primitives that we can inline, so those might help a little. Inlining our
especially hot &lt;code&gt;transition&lt;&#x2F;code&gt; function for our puzzle state should also help eliminate some overhead.
Let&#x27;s see how that impacts our performance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;$ cargo bench
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_square_dance      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;3.7629 ms 3.8005 ms 3.8413 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-10.293% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;8.6516% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;6.9645%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_fractal           time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;6.7174 ms 6.8059 ms 6.9033 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-10.243% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;8.5148% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;6.7086%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;solve_antiparticle      time:   &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;175.97 ms 176.63 ms 177.38 ms&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                        change: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;-6.8481% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;5.9110% &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;5.0767%&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; (p = 0.00 &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.05)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A final solid set of improvements! It&#x27;s always nice to see. Let&#x27;s wrap up with some final thoughts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;ve successfully made a puzzle solver that&#x27;s capable of solving all of our given inputs and
optimized it using techniques specific to brute-forcing as well as general optimization techniques.
We looked at the performance impacts of various techniques and know what to expect in the future.
Finally, we also learned not to assume that any particular optimization will affect every case
evenly, or even positively.&lt;&#x2F;p&gt;
&lt;p&gt;In the future, the best gains will likely come from improving our heuristic function. For this
relatively simple game, there might not be much of a better heuristic we can calculate. In a more
complex game, we can often leverage the information in the puzzle to make a much better function
though. When writing a solver for Stephen&#x27;s Sausage Roll, which permitted a more accurate heuristic,
the gains from a heuristic function were much larger.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, you can actually use the solver written here right now! You can turn on the solver for any
page that has a puzzle on it by adding &lt;code&gt;&amp;amp;controls=true&lt;&#x2F;code&gt; to the URL
(&lt;a href=&quot;&#x2F;blog&#x2F;anima-playground?controls=true&quot;&gt;here&lt;&#x2F;a&gt; for example). Here&#x27;s one with the solver enabled, try
it out! You can also write, import, and share your own puzzles.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading, and happy solving!&lt;&#x2F;p&gt;








&lt;script
    class=&quot;anima-data&quot;
    type=&quot;application&#x2F;json&quot;
    data-scale=&quot;50&quot;
    data-controls=&quot;true&quot;
    data-dynamic=&quot;false&quot;
&gt;
    {
    &quot;name&quot;: &quot;Box Step&quot;,
    &quot;width&quot;: 5,
    &quot;height&quot;: 3,
    &quot;tiles&quot;: [
        &quot;.r.b.&quot;,
        &quot;.....&quot;,
        &quot;.b.r.&quot;
    ],
    &quot;actors&quot;: [
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;red&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 0
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 1,
            &quot;y&quot;: 2
        },
        {
            &quot;color&quot;: &quot;blue&quot;,
            &quot;x&quot;: 3,
            &quot;y&quot;: 0
        }
    ],
    &quot;optimalMoves&quot;: 15
}
&lt;&#x2F;script&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>rkyv is faster than {bincode, capnp, cbor, flatbuffers, postcard, prost, serde_json}</title>
        <published>2021-03-11T00:00:00+00:00</published>
        <updated>2021-03-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/rkyv-is-faster-than/"/>
        <id>https://david.kolo.ski/blog/rkyv-is-faster-than/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/rkyv-is-faster-than/">&lt;p&gt;I&#x27;ve been working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rkyv&quot;&gt;rkyv&lt;&#x2F;a&gt;, a zero-copy deserialization library, since November of 2020. rkyv is similar to &lt;a href=&quot;https:&#x2F;&#x2F;capnproto.org&#x2F;&quot;&gt;Cap&#x27;n Proto&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;flatbuffers&quot;&gt;FlatBuffers&lt;&#x2F;a&gt;, but has a handful of different design choices that make it stand out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No type restrictions: you can serialize anything with rkyv&lt;&#x2F;li&gt;
&lt;li&gt;No external schemas: you can use the library with just &lt;code&gt;#[derive]&lt;&#x2F;code&gt;s&lt;&#x2F;li&gt;
&lt;li&gt;Rust-only: it doesn&#x27;t sacrifice simplicity and performance for cross-language compatibility&lt;&#x2F;li&gt;
&lt;li&gt;Safe mutation: the only rust library (I tested) that supports mutating data without deserializing&lt;&#x2F;li&gt;
&lt;li&gt;Scalable: works equally well for small and large payloads&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But just having design goals isn&#x27;t good enough, you need results to back them up. With that in mind, I can&#x27;t disclaim enough that I am the creator and maintainer of rkyv. However, the last thing I want is to be biased, so I made some benchmarks to hopefully convince you on their own merits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;&#x2F;h2&gt;
&lt;p&gt;There are a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erickt&#x2F;rust-serialization-benchmarks&quot;&gt;couple&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;blog.logrocket.com&#x2F;rust-serialization-whats-ready-for-production-today&#x2F;&quot;&gt;different&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;only-cliches&#x2F;noproto#benchmarks&quot;&gt;benchmarks&lt;&#x2F;a&gt; already available, but in general they fail in a couple different ways:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;they-test-with-too-little-data&quot;&gt;They test with too little data&lt;&#x2F;h3&gt;
&lt;p&gt;This leads to highly variable results and can make it difficult to see whether one library is really faster than another&lt;&#x2F;p&gt;
&lt;h3 id=&quot;they-test-only-with-simple-data&quot;&gt;They test only with simple data&lt;&#x2F;h3&gt;
&lt;p&gt;The library may perform completely differently with complex and highly structured data&lt;&#x2F;p&gt;
&lt;h3 id=&quot;they-test-only-serialization-and-deserialization&quot;&gt;They test only serialization and deserialization&lt;&#x2F;h3&gt;
&lt;p&gt;For most serialization formats, all you can do is serialize and deserialize data. But zero-copy deserialization libraries can access and traverse data without deserializing it first. Knowing how these operations compare with each other is essential to evaluating their relative performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-serialization-benchmark&quot;&gt;&lt;code&gt;rust_serialization_benchmark&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;With these shortcomings in mind, I set off to make my own benchmarks. The goal was to be thorough and complete, and I think I did a pretty good job.&lt;&#x2F;p&gt;
&lt;p&gt;You can run the benchmarks yourself or look over the raw data &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rust_serialization_benchmark&quot;&gt;from the github repo&lt;&#x2F;a&gt;. I&#x27;ll summarize the results.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rules&quot;&gt;Rules&lt;&#x2F;h3&gt;
&lt;p&gt;Each library got tested on three different data sets:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;log&lt;&#x2F;code&gt;: a data set of HTTP request logs that are small and contain many strings&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mesh&lt;&#x2F;code&gt;: a single mesh composed of triangles, each of which has three vertices and a normal&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;minecraft_savedata&lt;&#x2F;code&gt;: a highly-structured data set modeled after Minecraft player savedata&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each data set is randomly generated from an RNG seeded with the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nothing-up-my-sleeve_number&quot;&gt;first 20 digits of pi&lt;&#x2F;a&gt;, so the data tested is identical for every run. For each data set, a library was measured for the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serialize&lt;&#x2F;strong&gt;: how long it took to serialize the data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Deserialize&lt;&#x2F;strong&gt;: how long it took to deserialize the data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;&#x2F;strong&gt;: how many bytes the serialized data occupied&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Zlib&lt;&#x2F;strong&gt;: the serialized size after zlib compression&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Additionally, zero-copy deserialization libraries were tested for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Access&lt;&#x2F;strong&gt;: how long it took to get access to the serialized data&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Read&lt;&#x2F;strong&gt;: how long it took to run through the data and read fields&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Update&lt;&#x2F;strong&gt;: how long it took to update the serialized data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are a couple footnotes that need explaining:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Abomonation requires a mutable backing to access and read serialized data. This means that it&#x27;s not viable for some use cases.&lt;&#x2F;li&gt;
&lt;li&gt;Abomonation does not support buffer mutation, so this wasn&#x27;t tested.&lt;&#x2F;li&gt;
&lt;li&gt;While Flatbuffers and Cap&#x27;n Proto support buffer mutation in the main (usually C++) libraries, the rust counterparts do not and they couldn&#x27;t be tested for this.&lt;&#x2F;li&gt;
&lt;li&gt;None of the other zero-copy deserialization frameworks provided deserialization capabilities by default. Writing and benchmarking my own deserialization code is somewhat meaningless for these. You can get an idea of what sort of deserialization performance you&#x27;d get by looking at the read benchmark.&lt;&#x2F;li&gt;
&lt;li&gt;Abomonation&#x27;s &lt;code&gt;decode&lt;&#x2F;code&gt; qualified as access not deserialize because it yields an immutable reference instead of a mutable object. In order to deserialize this object, a simple &lt;code&gt;Clone&lt;&#x2F;code&gt; would suffice but I&#x27;m not here to write and benchmark my own deserialization code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;results&quot;&gt;Results&lt;&#x2F;h2&gt;
&lt;p&gt;These results are directly from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rust_serialization_benchmark&quot;&gt;benchmark repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;log&quot;&gt;&lt;code&gt;log&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This data set is composed of HTTP request logs that are small and contain many strings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Raw data:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For operations, time per iteration; for size, bytes. Lower is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;315.13 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;36.773 us*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;58.999 us*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1705800&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;507971&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;640.51 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.2787 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1045784&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;374305&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.8558 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;259.95 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;711.84 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1843240&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;537966&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.9698 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.9702 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1407835&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;407372&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.6780 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.9815 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;162.95 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1276368&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;469962&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;714.70 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.4387 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;765778&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;312739&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.4927 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.1024 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;764951&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;269811&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;422.92 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.3616 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;18.962 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;71.321 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.2492 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1065784&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;333895&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.4054 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.148 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1827461&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;474358&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Comparison:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Relative to best. Higher is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.00%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;32.14%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;44.84%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;53.12%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;49.20%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;75.94%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;73.15%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;72.08%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16.98%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.52%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.66%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41.50%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;50.15%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;36.22%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;54.34%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.23%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.77%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;45.67%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;11.64%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;59.93%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;57.41%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;44.09%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;73.20%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;99.89%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;86.27%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.74%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;63.68%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;74.51%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;71.77%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;80.81%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.15%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;32.02%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41.86%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;56.88%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;mesh&quot;&gt;&lt;code&gt;mesh&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The data set is a single mesh. The mesh contains an array of triangles, each of which has three
vertices and a normal vector.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Raw data:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For operations, time per iteration; for size, bytes. Lower is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;430.61 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.4135 ns*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;177.87 us*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6000024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5380836&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.0288 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;12.294 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6000008&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5380823&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15.854 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;247.35 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.9442 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;16000056&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6780527&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;43.109 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;70.247 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;13122324&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7527423&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.9518 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.9588 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;152.39 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6000024&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5380800&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.6844 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.9408 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6000003&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5380817&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;34.037 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;20.232 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8750000&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6683814&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.1217 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.4006 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;172.20 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;649.18 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.9594 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6000008&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4263104&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;105.86 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;83.016 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;26192883&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9612105&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Comparison:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Relative to best. Higher is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;58.03%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;85.67%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;79.23%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.13%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15.94%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;79.23%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.72%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.57%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.70%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;37.50%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;62.87%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.79%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;45.72%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;56.63%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22.06%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;47.34%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;79.23%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.44%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;21.92%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;79.23%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.27%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;9.68%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;68.57%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;63.78%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;38.39%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.50%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.41%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.36%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;22.91%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;44.35%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;minecraft-savedata&quot;&gt;&lt;code&gt;minecraft_savedata&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The data set is composed of Minecraft player saves that contain highly-structured data.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Raw data:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For operations, time per iteration; for size, bytes. Lower is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;368.23 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;40.823 us*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41.413 us*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1290592&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;393696&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;806.73 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.4132 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;569975&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;240897&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;863.41 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;256.55 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.3431 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;835784&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;342099&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.4356 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.8797 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1109821&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;347562&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;38.683 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.9212 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.9676 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;849472&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;349208&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;774.37 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;3.7533 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;356311&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;213270&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.8678 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.4083 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;596811&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;306728&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;843.80 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1.3837 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;282.88 ns&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.5422 us&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;2.4810 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;725176&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;334238&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;4.3501 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;10.699 ms&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;1623197&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;472162&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;Comparison:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Relative to best. Higher is better.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Format &#x2F; Lib&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Serialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Access&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Read&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Update&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Deserialize&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: right&quot;&gt;Size (zlib)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;abomonation&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.00%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.68%*&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;†&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;27.61%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;54.17%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bincode&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;45.64%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;72.69%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;62.51%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;88.53%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;capnp&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;42.65%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.54%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;5.29%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;42.63%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;62.34%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;cbor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;15.12%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;27.94%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;32.11%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;61.36%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;flatbuffers&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;0.95%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;47.37%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;7.13%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;§&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;‡&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;41.94%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;61.07%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;postcard&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;47.55%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;66.10%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;prost&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;6.28%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;45.87%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;59.70%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;69.53%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;rkyv&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;43.64%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;100.00%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;49.13%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;63.81%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;serde_json&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;8.46%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;23.19%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;21.95%&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: right&quot;&gt;45.17%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;p&gt;* &lt;em&gt;abomonation requires a mutable backing to access data&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;† &lt;em&gt;abomonation does not support buffer mutation&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;‡ &lt;em&gt;do not provide deserialization capabilities, but the user can write their own&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;§ &lt;em&gt;supports buffer mutation, but not in the rust implementation&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cbor-serde-json&quot;&gt;CBOR &#x2F; serde_json&lt;&#x2F;h3&gt;
&lt;p&gt;Unsurprisingly, these two had very similar performance because they&#x27;re almost the same format. CBOR did a bit better than serde_json in every benchmark, but these two consistently trailed behind all the other frameworks (in some cases, very considerably behind).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prost&quot;&gt;Prost&lt;&#x2F;h3&gt;
&lt;p&gt;Prost was the chosen representative for protobuf-style serialization. Its performance was average-to-lackluster on every benchmark, with the exception of the log size benchmark. It beat out postcard, which consistently performed extremely well in the size&#x2F;zlib categories. This shows just how much the format was optimized for stringy data and minimizing wire size.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bincode-postcard&quot;&gt;bincode &#x2F; postcard&lt;&#x2F;h3&gt;
&lt;p&gt;Despite being completely different libraries, bincode and postcard had very similar benchmark results. Serialize and deserialize speed were very close for both of them, and the main difference between the two was usually the final size. Postcard consistently beat bincode on size and zlib. I suspect that they are using very similar techniques, but that postcard has a few more tricks up its sleeve that don&#x27;t cost much to perform but give it a sizeable advantage.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cap-n-proto&quot;&gt;Cap&#x27;n Proto&lt;&#x2F;h3&gt;
&lt;p&gt;Cap&#x27;n Proto had a good showing, and it proved its worth as a replacement for protobuf. Compared to prost, it was faster to serialize, and supported comparatively fast zero-copy deserialization. These two features are absolutely killer. Unfortunately, it didn&#x27;t stack up nearly as well against the other zero-copy frameworks. It consistently had disapointing access and read times compared to its competitors, and failed pretty miserably on the mesh size benchmarks. This makes sense as it wasn&#x27;t built to handle large amounts of raw data, but it was disappointing to see so much wasted space compared to FlatBuffers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flatbuffers&quot;&gt;FlatBuffers&lt;&#x2F;h3&gt;
&lt;p&gt;FlatBuffers is the comparison point for zero-copy deserialization. It&#x27;s got a lot of usage, was built specifically for performance, and proves out the zero-copy concept. It did well in all categories on most of the tests, but had a major stumbling block. In the &lt;code&gt;minecraft_savedata&lt;&#x2F;code&gt; test, its serialization performance was by far the worst, even worse than serde_json (which had to write twice as much data!). This highlights a major weakness of FlatBuffers: its very poor serialization performance on highly-structured data. It&#x27;s possible (even probable) that I wrote this bench more poorly than it could be, but it&#x27;s enough that I wouldn&#x27;t recommend its use for general-purpose data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;abomonation&quot;&gt;Abomonation&lt;&#x2F;h3&gt;
&lt;p&gt;Abomonation was definitely a bright spot in the benchmarks. It proved out its insanely fast serialization on every bench, and didn&#x27;t suffer from some of the size traps that its competitors fell into. It would be an easy library to recommend if it didn&#x27;t come with so many caveats. It&#x27;s very unsafe, non-portable, requires mutable backing to access its data, and doesn&#x27;t support mutations. Nonetheless, abomonation was a really impressive contender in every benchmark.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rkyv&quot;&gt;rkyv&lt;&#x2F;h3&gt;
&lt;p&gt;I went into these benchmarks not knowing how rkyv would perform relative to its peers, but confident that it would make a good showing. It ended up doing much better than I expected. It won nearly every performance category, and was highly competitive with the winner when it didn&#x27;t. It also did so without compromising on size, where it was also highly competitive. Finally it showed exceptional scalability, peforming equally well on all different kinds of data where its zero-copy competitors all hard shortcomings on one or more of the data sets. Unlike abomonation, it&#x27;s also a safe, highly-portable format that doesn&#x27;t need mutable backing and has more feature support than other competitors.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I welcome and encourage anyone to run &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rust_serialization_benchmark&quot;&gt;the benchmarks&lt;&#x2F;a&gt; for themselves and open pull requests to improve or clean up whatever they want. I am confident in the validity of these results, and will happily update the tables as changes are made. I will update my analyses if there are any major changes.&lt;&#x2F;p&gt;
&lt;p&gt;My hope is that this article not only convinced you that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rkyv&quot;&gt;rkyv&lt;&#x2F;a&gt; is one of the best-performing serializers available, but that it also helped you understand the relationships between the different serialization solutions available in rust today.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If you&#x27;re interested in rkyv, I encourage you to contribute to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rkyv&#x2F;issues&#x2F;67&quot;&gt;request for feedback&lt;&#x2F;a&gt; for planning its future&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;blog.burntsushi.net&#x2F;ripgrep&#x2F;&quot;&gt;burntsushi&lt;&#x2F;a&gt; for the article title inspiration&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>rkyv architecture and internals</title>
        <published>2020-11-18T00:00:00+00:00</published>
        <updated>2020-11-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/rkyv-architecture/"/>
        <id>https://david.kolo.ski/blog/rkyv-architecture/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/rkyv-architecture/">&lt;h2 id=&quot;what-is-rkyv&quot;&gt;What is rkyv?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rkyv&quot;&gt;rkyv&lt;&#x2F;a&gt; is a zero-copy deserialization framework written in rust. It&#x27;s deeply integrated into the language and has a lot of neat features with the new v0.2.0 release.&lt;&#x2F;p&gt;
&lt;p&gt;I originally released and &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;jss6h4&#x2F;rkyv_a_zerocopy_deserialization_framework_for_rust&#x2F;&quot;&gt;posted about rkyv&lt;&#x2F;a&gt; in the rust subreddit and got a lot of great feedback. Along with a couple highly desired features, many people asked for a blog post about the design and internals of rkyv. This blog post should serve as a jumping-off point to understand rkyv and zero-copy deserialization in general.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-copy-deserialization&quot;&gt;Zero-copy deserialization&lt;&#x2F;h2&gt;
&lt;p&gt;Zero-copy deserialization is a technique used to reduce memory consumption and eliminate work when reading from disk or another external source. This isn&#x27;t really a precise term, since &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&#x2F;releases&#x2F;tag&#x2F;v1.0.0&quot;&gt;serde has support&lt;&#x2F;a&gt; for zero-copy deserialization, but a very different kind than rkyv. Zero-copy deserialization is more of an umbrella term for techniques that use some of the data from the source and therefore don&#x27;t copy it when deserializing, hence the name.&lt;&#x2F;p&gt;
&lt;p&gt;To be more precise, rkyv implements total zero-copy deserialization. All of the output of deserialization is borrowed from the input and no work is required to transform it from the external (on-disk) representation to the in-memory one. In practice, this means that you can do things like &lt;code&gt;mmap&lt;&#x2F;code&gt; files into memory and use them without deserialization. This is a technique that is sometimes used in the game industry, where performance requirements are very strict. Total zero-copy deserialization can drastically reduce load times which translates directly into a better user experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rkyv-architecture&quot;&gt;rkyv architecture&lt;&#x2F;h2&gt;
&lt;p&gt;This is where we can start getting into the meat and potatoes of rkyv. The first thing to understand about rkyv is relative pointers.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;relative-pointers&quot;&gt;Relative pointers&lt;&#x2F;h3&gt;
&lt;p&gt;The first hurdle for total zero-copy deserialization is that regular pointers are not serializable. A pointer is just some address in memory, and that means that it might not even be a valid location for your program on a subsequent run. Even if we could get all of our data back into memory, we would still have to fix up the pointers so they point to the right locations.&lt;&#x2F;p&gt;
&lt;p&gt;Relative pointers are a technique where instead of writing an absolute pointer to disk (which wouldn&#x27;t come back pointing to the right place), we instead write an &lt;em&gt;offset&lt;&#x2F;em&gt; to some memory. That offset essentially points to &quot;the address of this plus some bytes&quot;. A simple example of a relative pointer to a string is these bytes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;0x0000    04 00 00 00 68 65 6c 6c
&lt;&#x2F;span&gt;&lt;span&gt;0x0008    6f 20 77 6f 72 6c 64 21
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll assume that our relative pointers use 32-bit offsets. The first four bytes of the archive are the relative pointer, which encodes the offset to the string. The first four bytes are &lt;code&gt;04 00 00 00&lt;&#x2F;code&gt;, which is four on little endian machines. This means that the data is located four bytes forward from the address of the offset. Since the offset is located at &lt;code&gt;0x0000&lt;&#x2F;code&gt;, we should look for the data at &lt;code&gt;0x0000 + 4 = 0x0004&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Taking a peek at that location reveals some bytes that look like ASCII, but we don&#x27;t know how many yet! Along with the data for the bytes of a string, we also need to encode the length of the string. Let&#x27;s update our example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-txt &quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span&gt;0x0000    08 00 00 00 0c 00 00 00
&lt;&#x2F;span&gt;&lt;span&gt;0x0008    68 65 6c 6c 6f 20 77 6f
&lt;&#x2F;span&gt;&lt;span&gt;0x0010    72 6c 64 21 cd cd cd cd
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now there&#x27;s two four-byte values: first the relative pointer and second the string length. The relative pointer now has bytes &lt;code&gt;08 00 00 00&lt;&#x2F;code&gt;, four more than before since we now need to skip over the string length bytes. So the data is now located at &lt;code&gt;0x0000 + 8 = 0x0008&lt;&#x2F;code&gt;. The length bytes tell us there should be 12 bytes at that location. Reading off the first 12 bytes from there gives us &lt;code&gt;&quot;hello world!&quot;&lt;&#x2F;code&gt;! Success!&lt;&#x2F;p&gt;
&lt;p&gt;In order to map those bytes into a structure in memory, we might put our &lt;code&gt;ArchivedString&lt;&#x2F;code&gt; together like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedString {
&lt;&#x2F;span&gt;&lt;span&gt;    ptr: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    len: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;ArchivedString {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(self &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as *const Self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                .cast::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(self.ptr);
&lt;&#x2F;span&gt;&lt;span&gt;            slice::from_raw_parts(ptr, self.len &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;as usize&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;::from_utf8_unchecked(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The reality is just a little bit more complicated than this, but this is pretty close to the same code you can find in rkyv right now. The general idea behind rkyv is to take build these structures for all of our types so that we can serialize them out and get them back later without having to deserialize.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;archiving-dependencies&quot;&gt;Archiving dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;The next problem we have to tackle is actually creating those relative pointers. In order to make one, we need to know the locations of &lt;em&gt;both&lt;&#x2F;em&gt; the target memory and the relative pointer itself. This is a problem; how can we know where the relative pointer should point if we haven&#x27;t written it yet?&lt;&#x2F;p&gt;
&lt;p&gt;Imagine that we had some struct that had two strings in it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Pair {
&lt;&#x2F;span&gt;&lt;span&gt;    key: String,
&lt;&#x2F;span&gt;&lt;span&gt;    value: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s archived version would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;ArchivedPair {
&lt;&#x2F;span&gt;&lt;span&gt;    key: ArchivedString,
&lt;&#x2F;span&gt;&lt;span&gt;    value: ArchivedString,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to make our archived pair, we have to write the bytes of the key and value first, then construct the relative pointers for the strings. Let&#x27;s brainstorm roughly what that would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Pair {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, writer: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Write) -&amp;gt; ArchivedPair {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_pos &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(self.key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value_pos &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(self.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; base &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; key_off &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;offset_of!(ArchivedPair, key);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; value_off &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;offset_of!(ArchivedPair, value);
&lt;&#x2F;span&gt;&lt;span&gt;        ArchivedPair {
&lt;&#x2F;span&gt;&lt;span&gt;            key: ArchivedString::new(
&lt;&#x2F;span&gt;&lt;span&gt;                base &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; key_off,
&lt;&#x2F;span&gt;&lt;span&gt;                key_pos,
&lt;&#x2F;span&gt;&lt;span&gt;                self.key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            ),
&lt;&#x2F;span&gt;&lt;span&gt;            value: ArchivedString::new(
&lt;&#x2F;span&gt;&lt;span&gt;                base &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value_off,
&lt;&#x2F;span&gt;&lt;span&gt;                value_pos,
&lt;&#x2F;span&gt;&lt;span&gt;                self.value.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            ),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Right off the bat, we&#x27;ve introduced some new concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offset_of!&lt;&#x2F;code&gt; is a macro that tells us the offset of a field in our struct. We need to use this to make sure that we&#x27;re using the positions of the strings &lt;em&gt;within&lt;&#x2F;em&gt; our struct instead of the position of the start of the struct.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Write&lt;&#x2F;code&gt; is a writer like &lt;code&gt;std::io::Write&lt;&#x2F;code&gt; that we can write bytes to and which also knows the current position. We need this to get the &lt;code&gt;base&lt;&#x2F;code&gt; for our relative pointers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a little simplified, but both of these are both concepts used extensively in rkyv. And this works! But what if we wanted to write an array of &lt;code&gt;ArchivedPair&lt;&#x2F;code&gt;s?&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve run into a problem!&lt;&#x2F;p&gt;
&lt;p&gt;We can write out the first pair just fine, but when write out the second pair we accidentally write our two strings where the second pair should be! Because they&#x27;re in an array, the archived pairs have to be right next to each other. But there has to be a way around this, this is exactly like how we had to write out the key and value before building our pair!&lt;&#x2F;p&gt;
&lt;p&gt;Taking a look at the archive function, you can see that the archive process is broken up into two steps:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Write out the bytes of your dependencies&lt;&#x2F;li&gt;
&lt;li&gt;Get the current position and figure out your relative pointers using it&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This translates to the two core traits in rkyv: &lt;code&gt;Archive&lt;&#x2F;code&gt; and &lt;code&gt;Resolve&lt;&#x2F;code&gt;. The first step is handled by &lt;code&gt;Archive&lt;&#x2F;code&gt; and the second is handled by &lt;code&gt;Resolve&lt;&#x2F;code&gt;. So what do these traits do?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;archive-and-resolve&quot;&gt;&lt;code&gt;Archive&lt;&#x2F;code&gt; and &lt;code&gt;Resolve&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Archive&lt;&#x2F;code&gt; writes out the dependencies of the type and returns a &lt;em&gt;resolver&lt;&#x2F;em&gt;. A resolver is a struct that contains the extra information we need to make an archived version of our type from the writer position and original value. A string&#x27;s implementation might look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Archive &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Resolver &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;= usize&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;archive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self, writer: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;mut&lt;&#x2F;span&gt;&lt;span&gt; Writer) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Resolver {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pos &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        writer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        pos
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Resolve &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Archived &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ArchivedString;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#795da3;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;self,
&lt;&#x2F;span&gt;&lt;span&gt;        pos: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        resolver: &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span&gt;    ) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Archived {
&lt;&#x2F;span&gt;&lt;span&gt;        ArchivedString {
&lt;&#x2F;span&gt;&lt;span&gt;            ptr: RelPtr::from_to(pos, resolver),
&lt;&#x2F;span&gt;&lt;span&gt;            len: self.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the archive step, we write out the bytes for the string and return the position those bytes were written to. In the resolve step, we take that position and make a new relative pointer that points to them. Now if we wanted to archive an array of strings, we can archive them all and &lt;em&gt;then&lt;&#x2F;em&gt; resolve them all.&lt;&#x2F;p&gt;
&lt;p&gt;Once again, this is very simplified for the sake of example. But the real implementations of these are not too different!&lt;&#x2F;p&gt;
&lt;p&gt;rkyv provides archived versions of core and standard library types for you out of the box, but you still need to provide them for your own types. That&#x27;s why rkyv also provides a handy derive macro that does all the heavy lifting for you! Just add &lt;code&gt;#[derive(Archive)]&lt;&#x2F;code&gt; to your type and rkyv will generate an archived type, resolver, and implementations of &lt;code&gt;Archive&lt;&#x2F;code&gt; and &lt;code&gt;Resolve&lt;&#x2F;code&gt; automagically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extending-rkyv&quot;&gt;Extending rkyv&lt;&#x2F;h2&gt;
&lt;p&gt;Being able to archive types made out of library types is enough functionality for some, but there are a few holes in our system that we need to plug up.&lt;&#x2F;p&gt;
&lt;p&gt;The first trait is &lt;code&gt;ArchiveRef&lt;&#x2F;code&gt;, which is like &lt;code&gt;Archive&lt;&#x2F;code&gt; for unsized types. Instead of resolving to an archived version of themselves, they instead resolve to a something that dereferences to the archived type. A good way to think about this is that &lt;code&gt;ArchiveRef&lt;&#x2F;code&gt; is &lt;code&gt;Archive&lt;&#x2F;code&gt; for unsized types which use wide pointers with extra associated data.&lt;&#x2F;p&gt;
&lt;p&gt;This allows us to implement &lt;code&gt;Archive&lt;&#x2F;code&gt; for types like &lt;code&gt;Box&lt;&#x2F;code&gt;, which needs to be able to archive unsized types like slices and str&#x27;s. We can also archive our own unsized types with things like trailing slices, even though they&#x27;re pretty uncommon in practice.&lt;&#x2F;p&gt;
&lt;p&gt;The last hole we need to plug is trait objects. Unfortunately this one is pretty complicated, so if you&#x27;re really interested in how trait object archiving works, I would recommend you look at some of the source for &lt;code&gt;rkyv_dyn&lt;&#x2F;code&gt;, the crate that adds trait object serialization to rkyv.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Even though this overview is pretty basic, it gives a relatively complete overview of how rkyv works internally. The core ideas are pretty simple, the complicated part is really just writing the core and std implementations.&lt;&#x2F;p&gt;
&lt;p&gt;If you weren&#x27;t interested in rkyv before and are now, try it out and see how you like it! I just shipped a shiny new version with some great new features including validation and mutable archives. You can find the source &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djkoloski&#x2F;rkyv&quot;&gt;on github&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Static Site Generation with Zola</title>
        <published>2018-12-02T00:00:00+00:00</published>
        <updated>2018-12-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://david.kolo.ski/blog/ssg-with-zola/"/>
        <id>https://david.kolo.ski/blog/ssg-with-zola/</id>
        
        <content type="html" xml:base="https://david.kolo.ski/blog/ssg-with-zola/">&lt;h2 id=&quot;i-m-a-big-fan-of-rust&quot;&gt;I&#x27;m a big fan of Rust&lt;&#x2F;h2&gt;
&lt;p&gt;And so are a lot of other people. There&#x27;s a lot to love about the language, build system, and packages available. But what really brings it home is the community around the language and how they approach programming. In general, the Rust community seems to strike a good balance between purity and pragmatism. Maybe it&#x27;s because of what the language was built to do, or maybe it&#x27;s a copy and paste of Mozilla internal culture, but either way it means that Rust makes really good tools. You might have heard of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;, but you probably haven&#x27;t heard of &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; is a small static site generator that was originally called Gutenberg and is written in Rust. Its key features are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No dependencies: it&#x27;s just a single executable, perfect for embedding in repositories.&lt;&#x2F;li&gt;
&lt;li&gt;Blazing fast: the average site generation time is well under a second.&lt;&#x2F;li&gt;
&lt;li&gt;Fully featured: has support for robust HTML templating with &lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.com&#x2F;&quot;&gt;Tera Templates&lt;&#x2F;a&gt; - another Rust project - and compiles &lt;a href=&quot;https:&#x2F;&#x2F;sass-lang.com&#x2F;&quot;&gt;Sass&lt;&#x2F;a&gt; and Markdown for you.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If this piques your interest already, then I&#x27;d suggest you go grab the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;releases&quot;&gt;latest release&lt;&#x2F;a&gt; and follow along.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zola-init&quot;&gt;Zola init&lt;&#x2F;h3&gt;
&lt;p&gt;Making a new site project is incredibly easy - just run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;zola init my_site
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it will create a new directory named &lt;code&gt;my_site&lt;&#x2F;code&gt; with the right directory structure set up and ready to go. Just change into the new directory and keep going from there:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#62a35c;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; my_site
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zola-build&quot;&gt;Zola build&lt;&#x2F;h3&gt;
&lt;p&gt;Building the site is as simple as running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;zola build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it will build the entire site into a new directory named &lt;code&gt;public&lt;&#x2F;code&gt;. This is how the final build of the site is made; copying the &lt;code&gt;public&lt;&#x2F;code&gt; directory to a simple file server is all you need to do to deploy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zola-serve&quot;&gt;Zola serve&lt;&#x2F;h3&gt;
&lt;p&gt;For development, Zola comes with a development server built-in. Run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;zola serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and it will continuously:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Watch content, styles, and templates for changes&lt;&#x2F;li&gt;
&lt;li&gt;Rebuild the site on the fly&lt;&#x2F;li&gt;
&lt;li&gt;Refresh the page through an injected script&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This makes for a really great iteration loop since you don&#x27;t have to constantly switch back and forth between your text editor and browser to refresh it. For obvious reasons, you shouldn&#x27;t use use the Zola server to serve your final build.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-blocks&quot;&gt;Building blocks&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;pages-and-sections&quot;&gt;Pages and Sections&lt;&#x2F;h3&gt;
&lt;p&gt;Zola is built on the idea that a site is compsed of &lt;em&gt;pages&lt;&#x2F;em&gt; and &lt;em&gt;sections&lt;&#x2F;em&gt; arranged in a tree structure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Pages&lt;&#x2F;em&gt; are leaf nodes on your site map, and they&#x27;re meant to contain most or all of your content. Examples include blog posts and informational pages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Sections&lt;&#x2F;em&gt; are branch nodes on your site map, and they&#x27;re meant to direct the user to the pages that they&#x27;re interested in. Examples include directories that list out blog posts and link to them.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;content&lt;&#x2F;code&gt; directory in a Zola project defines how the site is structured. Each directory defines a new section&lt;a href=&quot;#footnote-1&quot; id=&quot;citation-1&quot; class=&quot;citation&quot;&gt;1&lt;&#x2F;a&gt; and the Markdown files inside of it are the pages that are children of that section&lt;a href=&quot;#footnote-2&quot; id=&quot;citation-2&quot; class=&quot;citation&quot;&gt;2&lt;&#x2F;a&gt;. This is why your root index page at &lt;code&gt;my-site.com&lt;&#x2F;code&gt; is a section: it contains all of the other sections and pages in the site.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;templates&quot;&gt;Templates&lt;&#x2F;h3&gt;
&lt;p&gt;Zola uses &lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.com&#x2F;&quot;&gt;Tera Templates&lt;&#x2F;a&gt; for page templating. They have a lot more documentation about the templating engine on their site, so I&#x27;ll cover mainly how the Tera works with Zola.&lt;&#x2F;p&gt;
&lt;p&gt;Zola will look in the &lt;code&gt;templates&lt;&#x2F;code&gt; directory for HTML templates to apply to the Markdown files in the &lt;code&gt;content&lt;&#x2F;code&gt; directory. There are three main special templates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;section.html&lt;&#x2F;code&gt; is applied to all sections.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;page.html&lt;&#x2F;code&gt; is applied to all pages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;&#x2F;code&gt; is a special section template applied to the root section instead of &lt;code&gt;section.html&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Zola will take all the metadata about sections and pages that it has available, and expose it through a &lt;code&gt;section&lt;&#x2F;code&gt; or &lt;code&gt;page&lt;&#x2F;code&gt; object to the template. The Markdown for the section or page can be injected into the template through either &lt;code&gt;{{ section.content }}&lt;&#x2F;code&gt; or &lt;code&gt;{{ page.content }}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sass&quot;&gt;Sass&lt;&#x2F;h3&gt;
&lt;p&gt;Zola automatically compiles any Sass files directly under the &lt;code&gt;sass&lt;&#x2F;code&gt; directory into CSS files. Sass is a great set of extensions to CSS that make it easier to write and maintain your styles. I ended up mostly leveraging its variables, but there are a lot of other quality-of-life features and powerful styling tools that make it a joy to use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;static-content-and-assets-colocation&quot;&gt;Static content and Assets Colocation&lt;&#x2F;h3&gt;
&lt;p&gt;Files placed in the &lt;code&gt;static&lt;&#x2F;code&gt; directory will be copied over as-is to the compiled site, so it&#x27;s a good place to put content that will be used across the entire site.&lt;&#x2F;p&gt;
&lt;p&gt;Zola also supports &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;overview&#x2F;#assets-colocation&quot;&gt;&quot;assets colocation&quot;&lt;&#x2F;a&gt;, which is a fancy way of saying that if you put non-Markdown files under the &lt;code&gt;content&lt;&#x2F;code&gt; directory, they&#x27;ll be copied over right next to other Markdown files&#x27; compiled HTML pages. This makes it really easy to organize pages that require custom assets like images and javascript files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;After working with Zola for a while, the overall experience has been very pleasant. At first I found Zola&#x27;s notion of sections and pages and little unintuitive, but I think that part of that is due to some confusing wording in their site&#x27;s documentation. It was really easy to set up and the iteration loop is fast and efficient. While it&#x27;s still a bit rough around the edges&lt;a href=&quot;#footnote-3&quot; id=&quot;citation-3&quot; class=&quot;citation&quot;&gt;3&lt;&#x2F;a&gt;, I can definitely recommend it for anyone looking to make a site like mine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;p id=&quot;footnote-1&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-1&quot;&gt;1&lt;&#x2F;a&gt; For all sections except the top-level index, you also need to add an &lt;code&gt;_index.md&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p id=&quot;footnote-2&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-2&quot;&gt;2&lt;&#x2F;a&gt; With the exception of any &lt;code&gt;_index.md&lt;&#x2F;code&gt; files.&lt;&#x2F;p&gt;
&lt;p id=&quot;footnote-3&quot; class=&quot;footnote&quot;&gt;&lt;a href=&quot;#citation-3&quot;&gt;3&lt;&#x2F;a&gt; I had problems with the built-in pagination functionality. It seems like it either doesn&#x27;t work right or I don&#x27;t understand it and the docs are too sparse. The server works pretty well for content serving, but every once in a while I managed to crash it with some syntax errors. The system that refreshes the browser page when the server rebuilds content also seems to mess up every once in a while, but restarting the server fixes it.&lt;&#x2F;p&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
